{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport { Text } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nvar _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n  notifyOnNetworkStatusChange: true,\n  fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n}),\n    loading = _useQuery.loading,\n    error = _useQuery.error,\n    _useQuery$data = _useQuery.data,\n    data = _useQuery$data === void 0 ? {} : _useQuery$data;\n\nvar Reading = function Reading(_ref) {\n  _s();\n\n  var errorId = _ref.errorId,\n      plant = _ref.plant,\n      settingType = _ref.settingType,\n      handleSettingsChange = _ref.handleSettingsChange,\n      onDeleteSchedule = _ref.onDeleteSchedule,\n      data = _ref.data,\n      openTab = _ref.openTab,\n      setOpenTab = _ref.setOpenTab,\n      handleDeleteSensor = _ref.handleDeleteSensor;\n  var setting = plant.sensors.find(function (sensor) {\n    return sensor.settingType === settingType;\n  });\n  var intl = useIntl();\n\n  var _useState = useState(false),\n      editIsOn = _useState[0],\n      setEditIsOn = _useState[1];\n\n  var selectedMode = humidityModeOptions.find(function (option) {\n    return option.value === setting.mode;\n  });\n  var selectedManualState = manualModeOptions.find(function (option) {\n    return option.value === setting.relayOneWorking;\n  });\n  var relayOneSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayOneIdRelated;\n  });\n  var relayTwoSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayTwoIdRelated;\n  });\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '179.88px',\n        textAlign: 'left'\n      });\n    }\n  }; // const tabIsOpen = openTab === settingType;\n\n  var tabIsOpen = true;\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-time-schedule-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  var reading = (setting === null || setting === void 0 ? void 0 : setting.reading) >= -5 && (setting === null || setting === void 0 ? void 0 : setting.reading) < 0 ? 0 + ' % ðŸ’§' : (setting === null || setting === void 0 ? void 0 : setting.reading) >= 0 && (setting === null || setting === void 0 ? void 0 : setting.reading) <= 100 && (setting === null || setting === void 0 ? void 0 : setting.reading) ? (setting === null || setting === void 0 ? void 0 : setting.reading) + ' % ðŸ’§' : 'Disconected';\n  return __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, reading, \" \");\n};\n\n_s(Reading, \"SNkuE7AeEUGxjSKVxE+KojPAO2Y=\", false, function () {\n  return [useIntl];\n});\n\n_c = Reading;\nexport default Reading;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx"],"names":["React","useState","useIntl","fourRelaysOptions","humidityModeOptions","manualModeOptions","Text","openModal","useQuery","GET_LOGGED_IN_USER_SETTINGS","notifyOnNetworkStatusChange","fetchPolicy","loading","error","data","Reading","errorId","plant","settingType","handleSettingsChange","onDeleteSchedule","openTab","setOpenTab","handleDeleteSensor","setting","sensors","find","sensor","intl","editIsOn","setEditIsOn","selectedMode","option","value","mode","selectedManualState","relayOneWorking","relayOneSelected","relayOneIdRelated","relayTwoSelected","relayTwoIdRelated","selectStyle","control","styles","width","textAlign","tabIsOpen","handleModal","modalComponent","modalProps","className","show","config","height","enableResizing","disableDragging","closeOnClickOutside","component","componentProps","item","reading"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nconst { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    // pollInterval: 5000,\n  });\ninterface Props {\n  data?: any;\n  plant: any;\n  openTab: string;\n  errorId: string;\n  setOpenTab: (settingType: string) => void;\n  handleDeleteSensor: (plant: any, settingType: string) => void;\n  settingType: SensorsTypes;\n  handleSettingsChange: (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => void;\n  onDeleteSchedule: (plant: any, settingType: SensorsTypes, position: number) => void;\n}\n\nconst Reading: React.FC<Props> = ({ errorId, plant, settingType, handleSettingsChange, onDeleteSchedule, data, openTab, setOpenTab, handleDeleteSensor  }) => {\n    const setting = plant.sensors.find((sensor: ISetting) => sensor.settingType === settingType);\n    const intl = useIntl();\n    const [editIsOn, setEditIsOn] = useState(false);\n    const selectedMode = humidityModeOptions.find((option) => option.value === setting.mode);\n    const selectedManualState = manualModeOptions.find((option) => option.value === setting.relayOneWorking);\n    const relayOneSelected = fourRelaysOptions.find((option) => option.value === setting.relayOneIdRelated);\n    const relayTwoSelected = fourRelaysOptions.find((option) => option.value === setting.relayTwoIdRelated);\n    const selectStyle = { control: styles => ({ ...styles, width: '179.88px', textAlign: 'left' }) };\n    // const tabIsOpen = openTab === settingType;\n    const tabIsOpen = true;\n\n    const handleModal = (\n        modalComponent: any,\n        modalProps = {},\n        className: string = 'add-time-schedule-modal'\n        ) => {\n        openModal({\n            show: true,\n            config: {\n            width: 360,\n            height: 'auto',\n            enableResizing: false,\n            disableDragging: true,\n            className: className,\n            },\n            closeOnClickOutside: true,\n            component: modalComponent,\n            componentProps: { item: modalProps },\n        });\n    };\n    const reading = (setting?.reading >= -5 && setting?.reading < 0) ? 0 + ' % ðŸ’§' : (setting?.reading >= 0 && setting?.reading <= 100 && setting?.reading) ? setting?.reading + ' % ðŸ’§' : 'Disconected';\n    return (\n        <Text bold>{reading} </Text>\n    );\n};\n\nexport default Reading;\n"]},"metadata":{},"sourceType":"module"}