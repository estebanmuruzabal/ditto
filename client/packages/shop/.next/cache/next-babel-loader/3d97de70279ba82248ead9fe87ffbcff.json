{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, SensorsTypes } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantsPageContainer, OrderDetails, BlockTitle, Text, ListItem, ListTitle, ListDes, ButtonText, PlantPageWrapper, PlantsWrapper, Column1, Row1 } from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, DELETE_SETTING, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\nimport Select from 'react-select';\nimport Plug from './sensors/Plug';\nimport DistanceSensor from './sensors/DistanceSensor';\n\nvar YourPlants = function YourPlants(_ref) {\n  _s();\n\n  var deviceType = _ref.deviceType,\n      userRefetch = _ref.userRefetch;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER, {\n    pollInterval: 5000\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; // const router = useRouter();\n\n\n  var intl = useIntl();\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setPlantName = _useState[1];\n\n  var _useState2 = useState(''),\n      openTab = _useState2[0],\n      setOpenTab = _useState2[1];\n\n  var _useState3 = useState(''),\n      plantId = _useState3[0],\n      setControllerID = _useState3[1];\n\n  var _useState4 = useState(''),\n      userinfoMsg = _useState4[0],\n      setUserinfoMsg = _useState4[1];\n\n  var _useState5 = useState(''),\n      sensorSelected = _useState5[0],\n      setSensor = _useState5[1];\n\n  var _useMutation = useMutation(ADD_PLANT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addPlant = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_SETTING),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateSetting = _useMutation4[0];\n\n  var _useMutation5 = useMutation(DELETE_SETTING),\n      _useMutation6 = _slicedToArray(_useMutation5, 1),\n      deleteSetting = _useMutation6[0];\n\n  var plants = state.plants;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n\n  var isRelayIdAlreadyAssigend = function isRelayIdAlreadyAssigend(plant, field, value, settingType) {\n    if (field !== 'relayOneIdRelated' && field !== 'relayTwoIdRelated' && field !== 'relayThreeIdRelated' && field !== 'relayFourIdRelated') return false;\n    var relayOneIdRelated = 'relayOneIdRelated';\n    var relayTwoIdRelated = 'relayTwoIdRelated';\n    console.log('value', value);\n    console.log('field', field);\n    plant.sensors.map(function (sensor) {\n      console.log('sensor:', sensor);\n      console.log('sensor[field]:', sensor[field]);\n\n      if (sensor[field] === value) {\n        var texto = intl.formatMessage({\n          id: 'relayAlreadyAssinged',\n          defaultMessage: 'Relay already assigned in '\n        });\n        return alert(texto);\n      }\n    }); //   {Object.keys(SensorsTypes).map((settingType, i: number) => {\n    //     const relaysIds = [RelaysIds.RELAY_ONE, RelaysIds.RELAY_TWO, RelaysIds.RELAY_THIRD, RelaysIds.RELAY_FOURTH];\n    //     console.log(plant, field)\n    //     console.log(plant.sensors)\n    //     console.log(settingIndex)\n    //     console.log('plant.sensors[settingIndex]', plant.sensors[settingIndex])\n    //     console.log('plant.sensors[settingIndex][field]', plant.sensors[settingIndex][field])\n    //     console.log('relaysIds.includes(plant.sensors[settingIndex][field])', relaysIds.includes(plant.sensors[settingIndex][field]));\n    //     const relayAlreadyAssigned = plant.sensors[settingIndex] && relaysIds.includes(plant.sensors[settingIndex][field]);\n    //     console.log(1)\n    //     if (relayAlreadyAssigned) {\n    //       // setUserinfoMsg(`${intl.formatMessage({ id: 'relayAlreadyAssinged', defaultMessage: 'Relay already assigned in ' })} ${plant[settingType]}`);\n    //       // setTimeout(function () {\n    //         console.log(2)\n    //         const texto = intl.formatMessage({ id: 'relayAlreadyAssinged', defaultMessage: 'Relay already assigned in ' });\n    //         return alert(texto);\n    //       // }, 8000)\n    //       return true;\n    //     }\n    //    })\n    //  }\n\n    return false;\n  };\n\n  var handleSettingsChange = function handleSettingsChange(plant, field, value, settingType) {\n    if (isRelayIdAlreadyAssigend(plant, field, value, settingType)) return;\n    dispatch({\n      type: settingType,\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    dispatchSettingSave(plant, field, value, settingType);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var handleAddClick = function handleAddClick() {\n    var _data$getUser;\n\n    addPlant({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n        name: name,\n        plantId: Number(plantId)\n      }\n    });\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n      userRefetch();\n      window.location.reload();\n    }, 3000);\n  };\n\n  var handleDeleteSensor = function handleDeleteSensor(plant, settingName) {\n    var _data$getUser2;\n\n    deleteSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n        plantId: plant.plantId,\n        settingName: settingName\n      }\n    });\n    setUserinfoMsg('deleted setting successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n      userRefetch();\n      window.location.reload();\n    }, 3000);\n  };\n\n  var onDeleteSchedule = function onDeleteSchedule(plant, settingType, scheduleIndex) {\n    var _plant$sensors$settin, _data$getUser3;\n\n    var settingIndex = plant.sensors.findIndex(function (sensor) {\n      return sensor.settingType === settingType;\n    });\n    (_plant$sensors$settin = plant.sensors[settingIndex]) === null || _plant$sensors$settin === void 0 ? void 0 : _plant$sensors$settin.scheduledOnTimes.splice(scheduleIndex, 1);\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser3 = data.getUser) === null || _data$getUser3 === void 0 ? void 0 : _data$getUser3.id,\n        plantId: plant.plantId,\n        input: _objectSpread(_objectSpread({}, plant.sensors[settingIndex]), {}, {\n          settingType: settingType\n        })\n      }\n    });\n    setUserinfoMsg('deleted schedule successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n      userRefetch();\n      window.location.reload();\n    }, 3000);\n  };\n\n  var getDefaultSetting = function getDefaultSetting(settingTypeName) {\n    return {\n      name: '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: [],\n      scheduledOnTimes: [],\n      settingType: settingTypeName\n    };\n  };\n\n  var dispatchSettingSave = function dispatchSettingSave(plant, fieldName, fieldValue, settingType) {\n    var _data$getUser4;\n\n    var settingIndex = plant.sensors.findIndex(function (sensor) {\n      return sensor.settingType === settingType;\n    });\n    plant.sensors[settingIndex][fieldName] = fieldValue;\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser4 = data.getUser) === null || _data$getUser4 === void 0 ? void 0 : _data$getUser4.id,\n        plantId: plant.plantId,\n        input: plant.sensors[settingIndex]\n      }\n    });\n  };\n\n  var getSensorCompleteName = function getSensorCompleteName(plant, settingType) {\n    var _plant$sensors;\n\n    var amountOfSameType = 1;\n    plant === null || plant === void 0 ? void 0 : (_plant$sensors = plant.sensors) === null || _plant$sensors === void 0 ? void 0 : _plant$sensors.map(function (sensor) {\n      var _sensor$settingType;\n\n      if ((sensor === null || sensor === void 0 ? void 0 : (_sensor$settingType = sensor.settingType) === null || _sensor$settingType === void 0 ? void 0 : _sensor$settingType.split('_')[0]) === settingType) amountOfSameType++;\n    });\n    return \"\".concat(settingType, \"_\").concat(amountOfSameType);\n  };\n\n  var dispatchNewSettingSave = function dispatchNewSettingSave(plant, settingType) {\n    var _data$getUser5;\n\n    var completeSensorTypeName = getSensorCompleteName(plant, settingType);\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser5 = data.getUser) === null || _data$getUser5 === void 0 ? void 0 : _data$getUser5.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(completeSensorTypeName)\n      }\n    });\n    setTimeout(function () {\n      userRefetch();\n      window.location.reload();\n    }, 2000);\n  }; // Add or edit modal\n\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-time-schedule-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '197px',\n        textAlign: 'left'\n      });\n    }\n  };\n  var sensorsOptions = [{\n    value: SensorsTypes.DISTANCE,\n    label: intl.formatMessage({\n      id: 'distanceId',\n      defaultMessage: 'distanceId'\n    })\n  }, {\n    value: SensorsTypes.SOIL_HUMIDITY,\n    label: intl.formatMessage({\n      id: 'moistHumidityId',\n      defaultMessage: 'moistHumidityId'\n    })\n  }, {\n    value: SensorsTypes.HUMIDITY_TEMPETURE,\n    label: intl.formatMessage({\n      id: 'airHumidityAndTempetureId',\n      defaultMessage: 'airHumidityAndTempetureId'\n    })\n  }, {\n    value: SensorsTypes.LIGHT,\n    label: intl.formatMessage({\n      id: 'lightSensorId',\n      defaultMessage: 'lightSensorId'\n    })\n  }, {\n    value: SensorsTypes.PLUG,\n    label: intl.formatMessage({\n      id: 'intelligentPlugId',\n      defaultMessage: 'intelligentPlugId'\n    })\n  }];\n  return __jsx(PlantPageWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 5\n    }\n  }, __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/profile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: \"home-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"backProfileBtn\",\n    defaultMessage: \"Back to Profile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }))), __jsx(OrderDetails, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }, __jsx(BlockTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"dittoBotsIds\",\n    defaultMessage: \"dittoBotsIds\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  })), (plants === null || plants === void 0 ? void 0 : plants.length) < 1 && __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 36\n    }\n  }, \"No tienes plantas registradas\"), plants === null || plants === void 0 ? void 0 : plants.map(function (plant, i) {\n    var sensors = plant.sensors;\n    return __jsx(PlantsWrapper, {\n      key: i + '-orderList',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }\n    }, __jsx(Row1, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 19\n      }\n    }, __jsx(Column1, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }\n    }, __jsx(ListItem, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"controllerNameId\",\n      defaultMessage: \"controllerNameId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 25\n      }\n    }, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      disabled: true,\n      value: (plant === null || plant === void 0 ? void 0 : plant.name) || '' // we have to change the onChange because the is no one for the controller name actualy\n      // onChange={(e: any) => handleSettingsChange(plant, 'name', e.target.value, SensorsTypes.SOIL_HUMIDITY_SETTING_1)}\n      ,\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 27\n      }\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addSensorId\",\n      defaultMessage: \"addSensorId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 25\n      }\n    }, __jsx(Select, {\n      onChange: function onChange(e) {\n        return dispatchNewSettingSave(plant, e.value);\n      },\n      value: sensorSelected // @ts-ignore\n      ,\n      options: sensorsOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 25\n      }\n    }))))), sensors === null || sensors === void 0 ? void 0 : sensors.map(function (sensor) {\n      switch (sensor === null || sensor === void 0 ? void 0 : sensor.settingType) {\n        case \"\".concat(SensorsTypes.SOIL_HUMIDITY, \"_1\"):\n        case \"\".concat(SensorsTypes.SOIL_HUMIDITY, \"_2\"):\n        case \"\".concat(SensorsTypes.SOIL_HUMIDITY, \"_3\"):\n          // check the number of same setting to send\n          return __jsx(SoilHumiditySensor, {\n            key: i + sensor.settingType,\n            data: data,\n            plant: plant,\n            openTab: openTab,\n            handleDeleteSensor: handleDeleteSensor,\n            setOpenTab: setOpenTab,\n            settingType: sensor.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.LIGHT, \"_1\"):\n          return __jsx(LightSensor, {\n            data: data,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: sensor.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.DISTANCE, \"_1\"):\n          return __jsx(DistanceSensor, {\n            data: data,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: sensor.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.PLUG, \"_1\"):\n          return __jsx(Plug, {\n            data: data,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: sensor.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 29\n            }\n          });\n\n        default:\n          break;\n      }\n    }));\n  }), userinfoMsg && __jsx(SuccessMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"userInfoSuccess\",\n    defaultMessage: userinfoMsg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }\n  })))), __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }\n  }, __jsx(BlockTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addController\",\n    defaultMessage: \"Your Plants\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 11\n    }\n  })), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantNameField\",\n    defaultMessage: \"Name of the plant\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    onChange: function onChange(e) {\n      return setPlantName(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'plantNamePlaceholderId',\n      defaultMessage: 'Balcony plants'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 13\n    }\n  }))), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantIdField\",\n    defaultMessage: \"ID of the controller\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"plantId\",\n    value: plantId,\n    onChange: function onChange(e) {\n      return setControllerID(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'serialNumberPlaceholderId',\n      defaultMessage: 'Look behind Ditto Bot'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 13\n    }\n  }))), __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: handleAddClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 9\n    }\n  }, __jsx(ButtonText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addPlantButton\",\n    defaultMessage: \"Add plant\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 13\n    }\n  })))));\n};\n\n_s(YourPlants, \"2EgjqTXUI09Wi3zSvXIoRYYmDyY=\", false, function () {\n  return [useQuery, useIntl, useMutation, useMutation, useMutation];\n});\n\n_c = YourPlants;\nexport default YourPlants;\n\nvar _c;\n\n$RefreshReg$(_c, \"YourPlants\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx"],"names":["React","useState","useContext","Link","openModal","useMutation","useQuery","CommonMode","SensorsTypes","ErrorMessage","PlantsPageContainer","OrderDetails","BlockTitle","Text","ListItem","ListTitle","ListDes","ButtonText","PlantPageWrapper","PlantsWrapper","Column1","Row1","FormattedMessage","useIntl","GET_LOGGED_IN_USER","Button","ADD_PLANT","DELETE_SETTING","UPDATE_SETTING","Input","ProfileContext","SuccessMsg","SoilHumiditySensor","LightSensor","Select","Plug","DistanceSensor","YourPlants","deviceType","userRefetch","state","dispatch","pollInterval","data","error","loading","intl","name","setPlantName","openTab","setOpenTab","plantId","setControllerID","userinfoMsg","setUserinfoMsg","sensorSelected","setSensor","addPlant","updateSetting","deleteSetting","plants","message","isRelayIdAlreadyAssigend","plant","field","value","settingType","relayOneIdRelated","relayTwoIdRelated","console","log","sensors","map","sensor","texto","formatMessage","id","defaultMessage","alert","handleSettingsChange","type","payload","dispatchSettingSave","setTimeout","handleAddClick","variables","getUser","Number","window","location","reload","handleDeleteSensor","settingName","onDeleteSchedule","scheduleIndex","settingIndex","findIndex","scheduledOnTimes","splice","input","getDefaultSetting","settingTypeName","whatsappWarningsOn","maxWarning","minWarning","mode","NONE","relayOneAutomatedTimeToRun","relayTwoAutomatedStartedTime","relayOneAutomatedStartedTime","relayOneWorking","relayTwoAutomatedTimeToRun","relayTwoWorking","logs","fieldName","fieldValue","getSensorCompleteName","amountOfSameType","split","dispatchNewSettingSave","completeSensorTypeName","handleModal","modalComponent","modalProps","className","show","config","width","height","enableResizing","disableDragging","closeOnClickOutside","component","componentProps","item","selectStyle","control","styles","textAlign","sensorsOptions","DISTANCE","label","SOIL_HUMIDITY","HUMIDITY_TEMPETURE","LIGHT","PLUG","length","i","justifyContent","e","target"],"mappings":"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","sourcesContent":["import React,  { useState, useEffect, useContext } from 'react';\nimport Link from 'next/link';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, RelaysIds, SensorsTypes } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\n\nimport {\n  PlantsPageContainer,\n  OrderDetails,\n  BlockTitle,\n  Text,\n  ListItem,\n  ListTitle,\n  ListDes,\n  ButtonText,\n  PlantPageWrapper,\n  PlantsWrapper,\n  PlantsSensorContainer,\n  Column1,\n  Row1,\n  CardButtons\n} from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, DELETE_SETTING, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\nimport { ISetting } from 'utils/types';\nimport Select from 'react-select';\nimport Plug from './sensors/Plug';\nimport DistanceSensor from './sensors/DistanceSensor';\n  \n\ntype YourPlantsProps = {\n  data?: any;\n  userRefetch: any;\n  index?: Number;\n  Router?: any;\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst YourPlants: React.FC<YourPlantsProps> = ({ deviceType, userRefetch }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const { data, error, loading  } = useQuery(GET_LOGGED_IN_USER, {\n    pollInterval: 5000,\n  });\n  // const router = useRouter();\n  const intl = useIntl();\n  const [name, setPlantName] = useState('');\n  const [openTab, setOpenTab] = useState('');\n  const [plantId, setControllerID] = useState('');\n  const [userinfoMsg, setUserinfoMsg] = useState('');\n  const [sensorSelected, setSensor] = useState('');\n  const [addPlant] = useMutation(ADD_PLANT);\n  \n  const [updateSetting] = useMutation(UPDATE_SETTING);\n  const [deleteSetting] = useMutation(DELETE_SETTING);\n  const { plants } = state;\n\n  if (loading) {\n    return <ErrorMessage message={'Cargando...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  const isRelayIdAlreadyAssigend = (plant: any, field: string, value: string, settingType: any) => {\n    if (field !== 'relayOneIdRelated' && field !== 'relayTwoIdRelated' && field !== 'relayThreeIdRelated' && field !== 'relayFourIdRelated') return false;\n    const relayOneIdRelated = 'relayOneIdRelated';\n    const relayTwoIdRelated = 'relayTwoIdRelated';\n    console.log('value', value)\n    console.log('field', field)\n    plant.sensors.map((sensor) => {\n      console.log('sensor:', sensor);\n      console.log('sensor[field]:', sensor[field]);\n      if (sensor[field] === value) {\n        const texto = intl.formatMessage({ id: 'relayAlreadyAssinged', defaultMessage: 'Relay already assigned in ' });\n          return alert(texto);\n      }\n    })\n\n    \n\n  //   {Object.keys(SensorsTypes).map((settingType, i: number) => {\n  //     const relaysIds = [RelaysIds.RELAY_ONE, RelaysIds.RELAY_TWO, RelaysIds.RELAY_THIRD, RelaysIds.RELAY_FOURTH];\n    \n\n  //     console.log(plant, field)\n  //     console.log(plant.sensors)\n  //     console.log(settingIndex)\n    \n  //     console.log('plant.sensors[settingIndex]', plant.sensors[settingIndex])\n  //     console.log('plant.sensors[settingIndex][field]', plant.sensors[settingIndex][field])\n  //     console.log('relaysIds.includes(plant.sensors[settingIndex][field])', relaysIds.includes(plant.sensors[settingIndex][field]));\n  //     const relayAlreadyAssigned = plant.sensors[settingIndex] && relaysIds.includes(plant.sensors[settingIndex][field]);\n  //     console.log(1)\n  //     if (relayAlreadyAssigned) {\n  //       // setUserinfoMsg(`${intl.formatMessage({ id: 'relayAlreadyAssinged', defaultMessage: 'Relay already assigned in ' })} ${plant[settingType]}`);\n  //       // setTimeout(function () {\n  //         console.log(2)\n  //         const texto = intl.formatMessage({ id: 'relayAlreadyAssinged', defaultMessage: 'Relay already assigned in ' });\n  //         return alert(texto);\n  //       // }, 8000)\n  //       return true;\n  //     }\n  //    })\n  //  }\n   return false;\n  };\n  \n\n  const handleSettingsChange = (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => {\n    if (isRelayIdAlreadyAssigend(plant, field, value, settingType)) return;\n\n    dispatch({ type: settingType, payload: { plant, value, field } });\n\n    dispatchSettingSave(plant, field, value, settingType);\n\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000)\n  };\n  \n  const handleAddClick = () => {\n    addPlant({\n      variables: {\n        id: data?.getUser?.id,\n        name,\n        plantId: Number(plantId)\n      },\n    });\n\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n      userRefetch();\n      window.location.reload();\n    }, 3000)\n  };\n\n  const handleDeleteSensor = (plant: any, settingName: SensorsTypes) => {\n    deleteSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        settingName\n      },\n    });\n\n    setUserinfoMsg('deleted setting successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n      userRefetch();\n      window.location.reload();\n    }, 3000)\n  };\n\n  const onDeleteSchedule = (plant: any, settingType: SensorsTypes, scheduleIndex: number) => {\n\n    const settingIndex = plant.sensors.findIndex((sensor: ISetting) => sensor.settingType === settingType);            \n    plant.sensors[settingIndex]?.scheduledOnTimes.splice(scheduleIndex, 1);\n    \n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: { ...plant.sensors[settingIndex], settingType: settingType }\n      },\n    });\n\n    setUserinfoMsg('deleted schedule successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n      userRefetch();\n      window.location.reload();\n  }, 3000)\n  };\n\n  const getDefaultSetting = (settingTypeName: string) => { \n    return {\n      name: '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: [],\n      scheduledOnTimes: [],\n      settingType: settingTypeName\n    }\n}\n    \n  const dispatchSettingSave = (plant: any, fieldName: string, fieldValue: string | boolean, settingType: SensorsTypes) => {\n    const settingIndex = plant.sensors.findIndex((sensor: ISetting) => sensor.settingType === settingType);\n    plant.sensors[settingIndex][fieldName] = fieldValue;\n\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: plant.sensors[settingIndex]\n      },\n    });\n  };\n  \n  const getSensorCompleteName = (plant, settingType: SensorsTypes) => {\n    let amountOfSameType = 1;\n    plant?.sensors?.map((sensor: ISetting) => {\n      if (sensor?.settingType?.split('_')[0] === settingType) amountOfSameType ++;\n    });\n    return `${settingType}_${amountOfSameType}`;\n  };\n\n  const dispatchNewSettingSave = (plant: any, settingType: SensorsTypes) => {\n    const completeSensorTypeName = getSensorCompleteName(plant, settingType);\n\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(completeSensorTypeName)\n      },\n    });\n    setTimeout(function () {\n      userRefetch();\n      window.location.reload();\n    }, 2000)\n  };\n\n\n  // Add or edit modal\n  const handleModal = (\n    modalComponent: any,\n    modalProps = {},\n    className: string = 'add-time-schedule-modal'\n  ) => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className,\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: { item: modalProps },\n    });\n  };\n\n  const selectStyle = { control: styles => ({ ...styles, width: '197px', textAlign: 'left' }) };\n  const sensorsOptions = [\n    { value: SensorsTypes.DISTANCE, label: intl.formatMessage({ id: 'distanceId', defaultMessage: 'distanceId' }) },\n    { value: SensorsTypes.SOIL_HUMIDITY, label: intl.formatMessage({ id: 'moistHumidityId', defaultMessage: 'moistHumidityId' }) },\n    { value: SensorsTypes.HUMIDITY_TEMPETURE, label: intl.formatMessage({ id: 'airHumidityAndTempetureId', defaultMessage: 'airHumidityAndTempetureId' }) },\n    { value: SensorsTypes.LIGHT, label: intl.formatMessage({ id: 'lightSensorId', defaultMessage: 'lightSensorId' }) },\n    { value: SensorsTypes.PLUG, label: intl.formatMessage({ id: 'intelligentPlugId', defaultMessage: 'intelligentPlugId' }) },\n  ];\n\n  return (\n    <PlantPageWrapper>\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <Link href=\"/profile\">\n          <a className=\"home-btn\">\n            <FormattedMessage id=\"backProfileBtn\" defaultMessage=\"Back to Profile\" />\n          </a>\n        </Link>\n\n        <OrderDetails>\n          <BlockTitle>\n            <FormattedMessage\n              id=\"dittoBotsIds\"\n              defaultMessage=\"dittoBotsIds\"\n            />\n          </BlockTitle>\n\n          { plants?.length < 1 && (<Text>No tienes plantas registradas</Text>) }\n          { plants?.map((plant, i: number) => {\n            const { sensors } = plant;\n              return (\n                <PlantsWrapper key={i + '-orderList'}>\n                  <Row1>\n                    <Column1>\n                      <ListItem>\n                        <ListTitle>\n                          <Text bold>\n                            <FormattedMessage\n                              id=\"controllerNameId\"\n                              defaultMessage=\"controllerNameId\"\n                            />\n                          </Text>\n                        </ListTitle>\n                        <ListDes>\n                          <Input\n                            type='text'\n                            name='name'\n                            disabled={true}\n                            value={plant?.name || ''}\n                            // we have to change the onChange because the is no one for the controller name actualy\n                            // onChange={(e: any) => handleSettingsChange(plant, 'name', e.target.value, SensorsTypes.SOIL_HUMIDITY_SETTING_1)}\n                            backgroundColor='#F7F7F7'\n                            width='197px'\n                            height='34.5px'\n                          />\n                        </ListDes>\n                      </ListItem>\n\n                      <ListItem style={{ justifyContent: 'flex-start' }}>\n                        <ListTitle>\n                        <Text bold>\n                            <FormattedMessage\n                            id=\"addSensorId\"\n                            defaultMessage=\"addSensorId\"\n                            />\n                        </Text>\n                        </ListTitle>\n                        <ListDes>\n                        <Select \n                            onChange={(e: any) => dispatchNewSettingSave(plant, e.value)}\n                            value={sensorSelected}\n                            // @ts-ignore\n                            options={sensorsOptions}\n                            styles={selectStyle}\n                            menuPosition={'fixed'}\n                        />\n                        </ListDes>\n                      </ListItem>\n\n                    </Column1>\n                  </Row1>\n\n                    { sensors?.map((sensor: ISetting) => {\n                      switch (sensor?.settingType) {\n                        case `${SensorsTypes.SOIL_HUMIDITY}_1`:\n                        case `${SensorsTypes.SOIL_HUMIDITY}_2`:\n                        case `${SensorsTypes.SOIL_HUMIDITY}_3`:\n                          // check the number of same setting to send\n                          return (\n                            <SoilHumiditySensor \n                              key={i + sensor.settingType}\n                              data={data}\n                              plant={plant}\n                              openTab={openTab}\n                              handleDeleteSensor={handleDeleteSensor}\n                              setOpenTab={setOpenTab}\n                              settingType={sensor.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.LIGHT}_1`:\n                          return (\n                            <LightSensor \n                              data={data}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={sensor.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.DISTANCE}_1`:\n                          return (\n                            <DistanceSensor\n                              data={data}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={sensor.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.PLUG}_1`:\n                          return (\n                            <Plug \n                              data={data}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={sensor.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                      \n                        default:\n                          break;\n                      }\n                    })}\n                </PlantsWrapper>\n              )\n            })\n          }\n\n          {userinfoMsg && (\n              <SuccessMsg>\n                <FormattedMessage\n                  id='userInfoSuccess'\n                  defaultMessage={userinfoMsg}\n                />\n              </SuccessMsg>\n          )}\n\n        </OrderDetails>\n      </PlantsPageContainer>\n\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <BlockTitle>\n          <FormattedMessage\n            id=\"addController\"\n            defaultMessage=\"Your Plants\"\n          />\n        </BlockTitle>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantNameField'\n                defaultMessage='Name of the plant'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='text'\n              name='name'\n              value={name}\n              onChange={(e) => setPlantName(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'plantNamePlaceholderId', defaultMessage: 'Balcony plants' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantIdField'\n                defaultMessage='ID of the controller'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='number'\n              name='plantId'\n              value={plantId}\n              onChange={(e) => setControllerID(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'serialNumberPlaceholderId', defaultMessage: 'Look behind Ditto Bot' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <Button className=\"cart-button\" variant=\"secondary\" borderRadius={100} onClick={handleAddClick}>\n          <ButtonText>\n            <FormattedMessage id={\"addPlantButton\"} defaultMessage=\"Add plant\" />\n          </ButtonText>\n        </Button>\n      </PlantsPageContainer>\n    </PlantPageWrapper>\n  );\n};\n\nexport default YourPlants;\n"]},"metadata":{},"sourceType":"module"}