{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport localForage from 'localforage';\n\nconst isObjectLiked = value => value.constructor.name === 'Array' || value.constructor.name === 'Object';\n\nconst rehydrate = (value, defaultValue) => {\n  if (!value) return defaultValue; // if (value === 'false') str = false;\n  // if (value === 'true') str = true;\n  // if (!isObjectLiked(value)) {\n  //   return value;\n  // }\n\n  try {\n    const parse = JSON.parse(value);\n    return parse;\n  } catch (err) {\n    return defaultValue;\n  }\n};\n\nconst hydrate = value => {\n  if (!isObjectLiked(value)) {\n    return value;\n  }\n\n  return JSON.stringify(value);\n};\n\nconst createMigration = (opts, data) => {\n  return new Promise((resolve, reject) => {\n    const key = `${opts.key}-version`;\n    localForage.getItem(key, (err, version) => {\n      if (version !== opts.version) {\n        data = opts.migrate(data);\n        localForage.setItem(opts.key, rehydrate(data), err => {\n          if (err) return reject(err);\n          localForage.setItem(key, opts.version, err => {\n            if (err) return reject(err);\n            return resolve(data);\n          });\n        });\n      } else {\n        resolve(data);\n      }\n    });\n  });\n};\n\nconst config = {\n  key: '@session',\n  version: 1,\n  migrate: state => {\n    return _objectSpread({}, state);\n  }\n};\nexport const useStorage = (state, setState) => {\n  const {\n    0: rehydrated,\n    1: setRehydrated\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  useEffect(() => {\n    async function init() {\n      await localForage.getItem(config.key, (err, value) => {\n        if (err) {\n          setRehydrated(true);\n          return setError(err);\n        } // Migrate persisted data\n\n\n        const restoredValue = rehydrate(value);\n\n        if (typeof config.migrate === 'function') {\n          createMigration(config, restoredValue).then(data => setState(data)).then(() => setRehydrated(true));\n        } else {\n          setState(restoredValue);\n          setRehydrated(true);\n        }\n      });\n    }\n\n    init();\n  }, []);\n  useEffect(() => {\n    // if (isNil(state) || isEmpty(state)) {\n    //   localForage.removeItem(config.key);\n    // }\n    localForage.setItem(config.key, hydrate(state));\n  }, [state]);\n  return {\n    rehydrated,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/utils/use-storage.ts"],"names":["useState","useEffect","localForage","isObjectLiked","value","constructor","name","rehydrate","defaultValue","parse","JSON","err","hydrate","stringify","createMigration","opts","data","Promise","resolve","reject","key","getItem","version","migrate","setItem","config","state","useStorage","setState","rehydrated","setRehydrated","error","setError","init","restoredValue","then"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport localForage from 'localforage';\nconst isObjectLiked = (value) =>\n  value.constructor.name === 'Array' || value.constructor.name === 'Object';\n\nconst rehydrate = (value: any, defaultValue?: any) => {\n  if (!value) return defaultValue;\n  // if (value === 'false') str = false;\n  // if (value === 'true') str = true;\n  // if (!isObjectLiked(value)) {\n  //   return value;\n  // }\n  try {\n    const parse = JSON.parse(value);\n    return parse;\n  } catch (err) {\n    return defaultValue;\n  }\n};\n\nconst hydrate = (value) => {\n  if (!isObjectLiked(value)) {\n    return value;\n  }\n  return JSON.stringify(value);\n};\nconst createMigration = (opts, data) => {\n  return new Promise((resolve, reject) => {\n    const key = `${opts.key}-version`;\n    localForage.getItem(key, (err, version) => {\n      if (version !== opts.version) {\n        data = opts.migrate(data);\n        localForage.setItem(opts.key, rehydrate(data), (err) => {\n          if (err) return reject(err);\n          localForage.setItem(key, opts.version, (err) => {\n            if (err) return reject(err);\n            return resolve(data);\n          });\n        });\n      } else {\n        resolve(data);\n      }\n    });\n  });\n};\n\nconst config = {\n  key: '@session',\n  version: 1,\n  migrate: (state) => {\n    return { ...state };\n  },\n};\n\nexport const useStorage = (state, setState) => {\n  const [rehydrated, setRehydrated] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function init() {\n      await localForage.getItem(config.key, (err, value) => {\n        if (err) {\n          setRehydrated(true);\n          return setError(err);\n        }\n        // Migrate persisted data\n        const restoredValue = rehydrate(value);\n        if (typeof config.migrate === 'function') {\n          createMigration(config, restoredValue)\n            .then((data) => setState(data))\n            .then(() => setRehydrated(true));\n        } else {\n          setState(restoredValue);\n          setRehydrated(true);\n        }\n      });\n    }\n    init();\n  }, []);\n\n  useEffect(() => {\n    // if (isNil(state) || isEmpty(state)) {\n    //   localForage.removeItem(config.key);\n    // }\n    localForage.setItem(config.key, hydrate(state));\n  }, [state]);\n\n  return {\n    rehydrated,\n    error,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}