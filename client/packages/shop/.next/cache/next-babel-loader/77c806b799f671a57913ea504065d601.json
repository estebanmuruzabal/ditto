{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { HumiditySensorMode, LightSensorModes, WeekDays } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';\nimport { PlantsPageContainer, OrderDetails, BlockTitle, Text, ListItem, ListTitle, ListDes, ButtonText, InputUpper, PlantPageWrapper, PlantsWrapper, WeekContainer, DayContainer, PlantsSensorContainer, ScheduleTime, ActionButton, CardButtons, TextSpaced } from './your-plants.style';\nimport { FormattedMessage } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, UPDATE_HUMIDITY_1_SETTINGS, UPDATE_HUMIDITY_2_SETTINGS, UPDATE_LIGHT_SETTINGS } from 'graphql/query/plants.query';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport Switch from 'components/switch/switch';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport HumidityLogsGraph from './humidity-logs-graph/humidity-logs-graph';\n\nvar YourPlants = function YourPlants(_ref) {\n  var deviceType = _ref.deviceType;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER, {\n    pollInterval: 5000\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      userRefetch = _useQuery.refetch; // const router = useRouter();\n  // const intl = useIntl();\n\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setPlantName = _useState[1];\n\n  var _useState2 = useState(''),\n      controllerId = _useState2[0],\n      setControllerID = _useState2[1];\n\n  var _useState3 = useState(''),\n      userinfoMsg = _useState3[0],\n      setUserinfoMsg = _useState3[1];\n\n  var _useState4 = useState(''),\n      daySelected = _useState4[0],\n      setDay = _useState4[1];\n\n  var _useMutation = useMutation(ADD_PLANT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addPlant = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_HUMIDITY_1_SETTINGS),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateSoilHumiditySettings1 = _useMutation4[0];\n\n  var _useMutation5 = useMutation(UPDATE_HUMIDITY_2_SETTINGS),\n      _useMutation6 = _slicedToArray(_useMutation5, 1),\n      updateSoilHumiditySettings2 = _useMutation6[0];\n\n  var _useMutation7 = useMutation(UPDATE_LIGHT_SETTINGS),\n      _useMutation8 = _slicedToArray(_useMutation7, 1),\n      updateLightSettings = _useMutation8[0];\n\n  var plants = state.plants;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...'\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message\n    });\n  }\n\n  ;\n\n  var handleHumiditySettings1Change = function handleHumiditySettings1Change(plant, field, value) {\n    dispatch({\n      type: 'HANDLE_HUMIDITY_1_SETTINGS_CHANGE',\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    setTimeout(function () {\n      handleSettings1SaveClick(plant, field, value);\n    }, 1000);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var handleHumiditySettings2Change = function handleHumiditySettings2Change(plant, field, value) {\n    dispatch({\n      type: 'HANDLE_HUMIDITY_2_SETTINGS_CHANGE',\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    handleSettings2SaveClick(plant, field, value);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var handleAddClick = function handleAddClick() {\n    var _data$getUser;\n\n    addPlant({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n        name: name,\n        controllerId: Number(controllerId)\n      }\n    });\n    setUserinfoMsg('Update user info successfully');\n    userRefetch();\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var handleLightSettingChange = function handleLightSettingChange(plant, field, value) {\n    dispatch({\n      type: 'HANDLE_LIGHT_SETTINGS_CHANGE',\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    handleLightSettingSaveClick(plant, field, value);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var onDeleteSchedule = function onDeleteSchedule(plant, settingName, position) {\n    var _data$getUser2;\n\n    delete plant[settingName][position];\n    updateLightSettings({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n        controllerId: plant.controllerId,\n        input: plant[settingName]\n      }\n    });\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var handleSettings1SaveClick = function handleSettings1SaveClick(plant, fieldName, fieldValue) {\n    var _data$getUser3;\n\n    updateSoilHumiditySettings1({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser3 = data.getUser) === null || _data$getUser3 === void 0 ? void 0 : _data$getUser3.id,\n        controllerId: plant.controllerId,\n        input: _objectSpread(_defineProperty({}, fieldName, fieldValue), plant.soilHumiditySettings1)\n      }\n    });\n  };\n\n  var handleSettings2SaveClick = function handleSettings2SaveClick(plant, fieldName, fieldValue) {\n    var _data$getUser4;\n\n    updateSoilHumiditySettings2({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser4 = data.getUser) === null || _data$getUser4 === void 0 ? void 0 : _data$getUser4.id,\n        controllerId: plant.controllerId,\n        input: _objectSpread(_defineProperty({}, fieldName, fieldValue), plant.soilHumiditySettings2)\n      }\n    });\n  };\n\n  var handleLightSettingSaveClick = function handleLightSettingSaveClick(plant, fieldName, fieldValue) {\n    var _data$getUser5;\n\n    updateLightSettings({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser5 = data.getUser) === null || _data$getUser5 === void 0 ? void 0 : _data$getUser5.id,\n        controllerId: plant.controllerId,\n        input: _objectSpread(_defineProperty({}, fieldName, fieldValue), plant.lightSettings)\n      }\n    });\n  }; // Add or edit modal\n\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-time-schedule-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  var humidityModeOptions = [{\n    value: HumiditySensorMode.SEEDS_POOL_IRRIGATION,\n    label: 'Riego por inmersión'\n  }, {\n    value: HumiditySensorMode.MANUAL,\n    label: 'Manual'\n  }, {\n    value: HumiditySensorMode.IRRIGATE_SPECIFICT_AMOUNT_ON_DEMAND,\n    label: 'Semi-automático'\n  }, {\n    value: HumiditySensorMode.IRRIGATE_ON_DEMAND,\n    label: 'Automático'\n  }, {\n    value: HumiditySensorMode.SCHEDULE,\n    label: 'Calendario de riego'\n  }, {\n    value: HumiditySensorMode.NONE,\n    label: 'Ninguno'\n  }];\n  var lightModeOptions = [{\n    value: LightSensorModes.MANUAL,\n    label: 'Manual'\n  }, {\n    value: LightSensorModes.NONE,\n    label: 'Ninguno'\n  }, {\n    value: LightSensorModes.SCHEDULE,\n    label: 'Calendario'\n  }, {\n    value: LightSensorModes.SMART_SCHEDULE,\n    label: 'Calendario inteligente'\n  }];\n  var manualModeOptions = [{\n    value: true,\n    label: 'Prendido'\n  }, {\n    value: false,\n    label: 'Apagado'\n  }];\n  var fourRelaysOptions = [{\n    value: 'isRelayOneOn',\n    label: 'Enchufe 1'\n  }, {\n    value: 'isRelayTwoOn',\n    label: 'Enchufe 2'\n  }, {\n    value: 'isRelayThirdOn',\n    label: 'Enchufe 3'\n  }, {\n    value: 'isRelayFourthOn',\n    label: 'Enchufe 4'\n  }];\n  var eightRelaysOptions = [{\n    value: 'isRelayOneOn',\n    label: 'Enchufe 1'\n  }, {\n    value: 'isRelayTwoOn',\n    label: 'Enchufe 2'\n  }, {\n    value: 'isRelayThirdOn',\n    label: 'Enchufe 3'\n  }, {\n    value: 'isRelayFourthOn',\n    label: 'Enchufe 4'\n  }];\n\n  var renderSoilSensor1 = function renderSoilSensor1(plant, setting, i) {\n    var _plant$soilHumiditySe5, _plant$soilHumiditySe7, _plant$soilHumiditySe8, _plant$soilHumiditySe9, _setting$scheduledOnT, _plant$soilHumiditySe10, _setting$relayOneIdRe, _setting$relayOneIdRe2, _plant$soilHumiditySe11;\n\n    var selectedMode = humidityModeOptions.find(function (option) {\n      var _plant$soilHumiditySe;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe === void 0 ? void 0 : _plant$soilHumiditySe.mode);\n    });\n    var selectedManualState = manualModeOptions.find(function (option) {\n      var _plant$soilHumiditySe2;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe2 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe2 === void 0 ? void 0 : _plant$soilHumiditySe2.relayOneWorking);\n    });\n    var relayOneSelected = fourRelaysOptions.find(function (option) {\n      var _plant$soilHumiditySe3;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe3 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe3 === void 0 ? void 0 : _plant$soilHumiditySe3.relayOneIdRelated);\n    });\n    var relayTwoSelected = fourRelaysOptions.find(function (option) {\n      var _plant$soilHumiditySe4;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe4 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe4 === void 0 ? void 0 : _plant$soilHumiditySe4.relayTwoIdRelated);\n    });\n    return __jsx(React.Fragment, null, __jsx(PlantsSensorContainer, {\n      key: i + '-orderList'\n    }, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"plantName\",\n      defaultMessage: \"plantName\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings1.name,\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'name', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\" // intlInputLabelId=\"profileEmailField\"\n\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"soilHumidityId\",\n      defaultMessage: \"soilHumidityId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.soilHumidity1, \" %\"))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"humidityModeId\",\n      defaultMessage: \"humidityModeId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'mode', e.value);\n      },\n      value: selectedMode,\n      options: humidityModeOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"notifyChangesId\",\n      defaultMessage: \"notifyChangesId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Switch, {\n      disabled: false,\n      checked: plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe5 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe5 === void 0 ? void 0 : _plant$soilHumiditySe5.sendWhatsappWarnings,\n      labelPosition: 'right' // className,\n      ,\n      onUpdate: function onUpdate() {\n        var _plant$soilHumiditySe6;\n\n        return handleHumiditySettings1Change(plant, 'sendWhatsappWarnings', !(plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe6 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe6 === void 0 ? void 0 : _plant$soilHumiditySe6.sendWhatsappWarnings));\n      } // style\n\n    }))), ((plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe7 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe7 === void 0 ? void 0 : _plant$soilHumiditySe7.mode) === HumiditySensorMode.IRRIGATE_ON_DEMAND || (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe8 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe8 === void 0 ? void 0 : _plant$soilHumiditySe8.mode) === HumiditySensorMode.SEEDS_POOL_IRRIGATION) && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"maxHumidityId\",\n      defaultMessage: \"maxHumidityId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"maxWarning\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings1.maxWarning,\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'maxWarning', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"minHumidityId\",\n      defaultMessage: \"minHumidityId\"\n    }))), __jsx(ListDes, null, __jsx(InputUpper, {\n      type: \"number\",\n      name: \"minWarning\",\n      value: plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe9 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe9 === void 0 ? void 0 : _plant$soilHumiditySe9.minWarning,\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'minWarning', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayOneId\",\n      defaultMessage: \"asociateRelayOneId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'relayOneIdRelated', e.value);\n      },\n      value: relayOneSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayTwoId\",\n      defaultMessage: \"asociateRelayTwoId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'relayTwoIdRelated', e.value);\n      },\n      value: relayTwoSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    })))), setting.mode === HumiditySensorMode.SCHEDULE && __jsx(React.Fragment, null, __jsx(WeekContainer, null, Object.keys(WeekDays).map(function (day, i) {\n      return __jsx(DayContainer, {\n        key: i + '-day--humidity-1container',\n        style: {\n          backgroundColor: daySelected === day ? '#E6E6E6' : 'transparent'\n        },\n        onClick: function onClick() {\n          return setDay(day);\n        }\n      }, day.substring(0, 3));\n    })), setting === null || setting === void 0 ? void 0 : (_setting$scheduledOnT = setting.scheduledOnTimes) === null || _setting$scheduledOnT === void 0 ? void 0 : _setting$scheduledOnT.map(function (schedule, i) {\n      return __jsx(WeekContainer, null, schedule.daysToRepeat.includes(daySelected) ? __jsx(ScheduleTime, null, __jsx(TextSpaced, null, __jsx(FormattedMessage, {\n        id: \"startTimeId\",\n        defaultMessage: \"startTimeId\"\n      })), \" \", __jsx(TextSpaced, null, schedule.startTime), __jsx(TextSpaced, null, __jsx(FormattedMessage, {\n        id: \"endTimeId\",\n        defaultMessage: \"endTimeId\"\n      })), \" \", __jsx(TextSpaced, null, schedule.endTime), __jsx(CardButtons, {\n        className: \"button-wrapper\"\n      }, __jsx(ActionButton, {\n        onClick: function onClick() {\n          var _data$getUser6;\n\n          return handleModal(AddTimeSchedule, {\n            name: 'add-humidity-1-schedule',\n            plant: plant,\n            id: data === null || data === void 0 ? void 0 : (_data$getUser6 = data.getUser) === null || _data$getUser6 === void 0 ? void 0 : _data$getUser6.id\n          });\n        },\n        className: \"edit-btn\"\n      }, __jsx(PencilIcon, null)), __jsx(ActionButton, {\n        onClick: function onClick() {\n          return onDeleteSchedule(plant, 'soilHumiditySettings1', i);\n        },\n        className: \"delete-btn\"\n      }, __jsx(CloseIcon, null)))) : __jsx(ScheduleTime, {\n        style: {\n          border: '0px',\n          height: '42px'\n        }\n      }));\n    }), __jsx(Button, {\n      size: \"small\",\n      variant: \"outlined\",\n      type: \"button\",\n      className: \"add-button\",\n      onClick: function onClick() {\n        var _data$getUser7;\n\n        return handleModal(AddTimeSchedule, {\n          name: 'add-humidity-1-schedule',\n          plant: plant,\n          id: data === null || data === void 0 ? void 0 : (_data$getUser7 = data.getUser) === null || _data$getUser7 === void 0 ? void 0 : _data$getUser7.id\n        });\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addTimeScheduleId\",\n      defaultMessage: \"addTimeScheduleId\"\n    }))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe10 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe10 === void 0 ? void 0 : _plant$soilHumiditySe10.mode) === HumiditySensorMode.MANUAL && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"manualModeStateId\",\n      defaultMessage: \"manualModeStateId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'relayOneWorking', e.value);\n      },\n      value: selectedManualState,\n      options: manualModeOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: ((_setting$relayOneIdRe = setting.relayOneIdRelated) === null || _setting$relayOneIdRe === void 0 ? void 0 : _setting$relayOneIdRe.length) ? 'asociateRelayId' : 'asociatedRelayId',\n      defaultMessage: ((_setting$relayOneIdRe2 = setting.relayOneIdRelated) === null || _setting$relayOneIdRe2 === void 0 ? void 0 : _setting$relayOneIdRe2.length) ? 'asociateRelayId' : 'asociatedRelayId'\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'relayOneIdRelated', e.value);\n      },\n      value: relayOneSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    })))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe11 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe11 === void 0 ? void 0 : _plant$soilHumiditySe11.mode) === HumiditySensorMode.SEEDS_POOL_IRRIGATION && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"irrigationTimeId\",\n      defaultMessage: \"irrigationTimeId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"relayOneAutomatedTimeToRun\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings1.relayOneAutomatedTimeToRun,\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'relayOneAutomatedTimeToRun', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"irrigationEvacuationTimeId\",\n      defaultMessage: \"irrigationEvacuationTimeId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"relayTwoAutomatedTimeToRun\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings1.relayTwoAutomatedTimeToRun,\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'relayTwoAutomatedTimeToRun', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    })))), (setting === null || setting === void 0 ? void 0 : setting.logs.length) > 0 && __jsx(HumidityLogsGraph, {\n      data: setting.logs\n    }), (setting === null || setting === void 0 ? void 0 : setting.mode) === HumiditySensorMode.NONE && __jsx(Text, null, \"Necesitas seleccionar un modo\")));\n  };\n\n  var renderSoilSensor2 = function renderSoilSensor2(plant, setting, i) {\n    var _plant$soilHumiditySe16, _plant$soilHumiditySe18, _plant$soilHumiditySe19, _plant$soilHumiditySe20, _plant$soilHumiditySe21, _setting$relayOneIdRe3, _setting$relayOneIdRe4, _plant$soilHumiditySe22, _setting$scheduledOnT2, _plant$soilHumiditySe23;\n\n    var selectedMode = humidityModeOptions.find(function (option) {\n      var _plant$soilHumiditySe12;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe12 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe12 === void 0 ? void 0 : _plant$soilHumiditySe12.mode);\n    });\n    var selectedManualState = manualModeOptions.find(function (option) {\n      var _plant$soilHumiditySe13;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe13 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe13 === void 0 ? void 0 : _plant$soilHumiditySe13.relayOneWorking);\n    });\n    var relayOneSelected = fourRelaysOptions.find(function (option) {\n      var _plant$soilHumiditySe14;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe14 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe14 === void 0 ? void 0 : _plant$soilHumiditySe14.relayOneIdRelated);\n    });\n    var relayTwoSelected = fourRelaysOptions.find(function (option) {\n      var _plant$soilHumiditySe15;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe15 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe15 === void 0 ? void 0 : _plant$soilHumiditySe15.relayTwoIdRelated);\n    });\n    return __jsx(PlantsSensorContainer, {\n      key: i + '-orderList'\n    }, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"plantName\",\n      defaultMessage: \"plantName\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      value: (plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings2.name) || '',\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'name', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"soilHumidityId\",\n      defaultMessage: \"soilHumidityId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.soilHumidity2, \" %\"))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"humidityModeId\",\n      defaultMessage: \"humidityModeId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'mode', e.value);\n      },\n      value: selectedMode,\n      options: humidityModeOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"notifyChangesId\",\n      defaultMessage: \"notifyChangesId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Switch, {\n      disabled: false,\n      checked: plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe16 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe16 === void 0 ? void 0 : _plant$soilHumiditySe16.sendWhatsappWarnings,\n      labelPosition: 'right' // className,\n      ,\n      onUpdate: function onUpdate() {\n        var _plant$soilHumiditySe17;\n\n        return handleHumiditySettings2Change(plant, 'sendWhatsappWarnings', !(plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe17 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe17 === void 0 ? void 0 : _plant$soilHumiditySe17.sendWhatsappWarnings));\n      } // style\n\n    }))), ((plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe18 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe18 === void 0 ? void 0 : _plant$soilHumiditySe18.mode) === HumiditySensorMode.IRRIGATE_ON_DEMAND || (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe19 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe19 === void 0 ? void 0 : _plant$soilHumiditySe19.mode) === HumiditySensorMode.SEEDS_POOL_IRRIGATION) && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"maxHumidityId\",\n      defaultMessage: \"maxHumidityId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\" // min=\"1\" \n      // max=\"5\"\n      // placeholder={intl.formatMessage({\n      //   id: 'couponPlaceholder',\n      //   defaultMessage: 'Enter Coupon Here',\n      // })}\n      // inputRef={register({required: true})}\n      //               placeholder='Ex: Search By Name'\n      // required={true}\n      ,\n      name: \"maxWarning\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings2.maxWarning,\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'maxWarning', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"minHumidityId\",\n      defaultMessage: \"minHumidityId\"\n    }))), __jsx(ListDes, null, __jsx(InputUpper, {\n      type: \"number\",\n      name: \"minWarning\",\n      value: plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe20 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe20 === void 0 ? void 0 : _plant$soilHumiditySe20.minWarning,\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'minWarning', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayOneId\",\n      defaultMessage: \"asociateRelayOneId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'relayOneIdRelated', e.value);\n      },\n      value: relayOneSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayTwoId\",\n      defaultMessage: \"asociateRelayTwoId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'relayTwoIdRelated', e.value);\n      },\n      value: relayTwoSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    })))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe21 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe21 === void 0 ? void 0 : _plant$soilHumiditySe21.mode) === HumiditySensorMode.MANUAL && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"manualModeStateId\",\n      defaultMessage: \"manualModeStateId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'relayOneWorking', e.value);\n      },\n      value: selectedManualState,\n      options: manualModeOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: ((_setting$relayOneIdRe3 = setting.relayOneIdRelated) === null || _setting$relayOneIdRe3 === void 0 ? void 0 : _setting$relayOneIdRe3.length) ? 'asociateRelayId' : 'asociatedRelayId',\n      defaultMessage: ((_setting$relayOneIdRe4 = setting.relayOneIdRelated) === null || _setting$relayOneIdRe4 === void 0 ? void 0 : _setting$relayOneIdRe4.length) ? 'asociateRelayId' : 'asociatedRelayId'\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'relayOneIdRelated', e.value);\n      },\n      value: relayOneSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    })))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe22 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe22 === void 0 ? void 0 : _plant$soilHumiditySe22.mode) === HumiditySensorMode.SEEDS_POOL_IRRIGATION && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"irrigationTimeId\",\n      defaultMessage: \"irrigationTimeId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"relayOneAutomatedTimeToRun\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings2.relayOneAutomatedTimeToRun,\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'relayOneAutomatedTimeToRun', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"irrigationEvacuationTimeId\",\n      defaultMessage: \"irrigationEvacuationTimeId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"relayTwoAutomatedTimeToRun\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings2.relayTwoAutomatedTimeToRun,\n      onChange: function onChange(e) {\n        return handleHumiditySettings2Change(plant, 'relayTwoAutomatedTimeToRun', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    })))), setting.mode === HumiditySensorMode.SCHEDULE && __jsx(React.Fragment, null, __jsx(WeekContainer, null, Object.keys(WeekDays).map(function (day, i) {\n      return __jsx(DayContainer, {\n        key: i + '-day--humidity-2container',\n        style: {\n          backgroundColor: daySelected === day ? '#E6E6E6' : 'transparent'\n        },\n        onClick: function onClick() {\n          return setDay(day);\n        }\n      }, day.substring(0, 3));\n    })), setting === null || setting === void 0 ? void 0 : (_setting$scheduledOnT2 = setting.scheduledOnTimes) === null || _setting$scheduledOnT2 === void 0 ? void 0 : _setting$scheduledOnT2.map(function (schedule, i) {\n      return __jsx(WeekContainer, null, schedule.daysToRepeat.includes(daySelected) ? __jsx(ScheduleTime, {\n        key: i + '-day--schedule-on-time'\n      }, __jsx(TextSpaced, null, __jsx(FormattedMessage, {\n        id: \"startTimeId\",\n        defaultMessage: \"startTimeId\"\n      })), \" \", __jsx(TextSpaced, null, schedule.startTime), __jsx(TextSpaced, null, __jsx(FormattedMessage, {\n        id: \"endTimeId\",\n        defaultMessage: \"endTimeId\"\n      })), \" \", __jsx(TextSpaced, null, schedule.endTime), __jsx(CardButtons, {\n        className: \"button-wrapper\"\n      }, __jsx(ActionButton, {\n        onClick: function onClick() {\n          var _data$getUser8;\n\n          return handleModal(AddTimeSchedule, {\n            name: 'add-humidity-2-schedule',\n            plant: plant,\n            id: data === null || data === void 0 ? void 0 : (_data$getUser8 = data.getUser) === null || _data$getUser8 === void 0 ? void 0 : _data$getUser8.id\n          });\n        },\n        className: \"edit-btn\"\n      }, __jsx(PencilIcon, null)), __jsx(ActionButton, {\n        onClick: function onClick() {\n          return onDeleteSchedule(plant, 'soilHumiditySettings2', i);\n        },\n        className: \"delete-btn\"\n      }, __jsx(CloseIcon, null)))) : __jsx(ScheduleTime, {\n        style: {\n          border: '0px',\n          height: '42px'\n        }\n      }));\n    }), __jsx(Button, {\n      size: \"small\",\n      variant: \"outlined\",\n      type: \"button\",\n      className: \"add-button\",\n      onClick: function onClick() {\n        var _data$getUser9;\n\n        return handleModal(AddTimeSchedule, {\n          name: 'add-humidity-2-schedule',\n          plant: plant,\n          id: data === null || data === void 0 ? void 0 : (_data$getUser9 = data.getUser) === null || _data$getUser9 === void 0 ? void 0 : _data$getUser9.id\n        });\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addTimeScheduleId\",\n      defaultMessage: \"addTimeScheduleId\"\n    }))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe23 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe23 === void 0 ? void 0 : _plant$soilHumiditySe23.mode) === HumiditySensorMode.NONE && __jsx(Text, null, \"Necesitas seleccionar un modo\"));\n  };\n\n  var renderAirTemperatureSensor = function renderAirTemperatureSensor(plant, i) {\n    return __jsx(PlantsSensorContainer, null, __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"tempSensorId\",\n      defaultMessage: \"tempSensorId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.tempeture, \" \\xB0\"))));\n  };\n\n  var renderAirHumiditySensor = function renderAirHumiditySensor(plant, i) {\n    return __jsx(PlantsSensorContainer, null, __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"humedadAmbienteSensorId\",\n      defaultMessage: \"humedadAmbienteSensorId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.airHumidity, \" %\"))));\n  };\n\n  var renderLightSensor = function renderLightSensor(plant, setting, i) {\n    var _setting$relayOneIdRe5, _setting$relayOneIdRe6, _setting$scheduledOnT3;\n\n    var selectedMode = lightModeOptions.find(function (option) {\n      return option.value === setting.mode;\n    });\n    var selectedManualState = manualModeOptions.find(function (option) {\n      return option.value === setting.relayOneWorking;\n    });\n    var relayOneSelected = fourRelaysOptions.find(function (option) {\n      return option.value === setting.relayOneIdRelated;\n    });\n    var relayTwoSelected = fourRelaysOptions.find(function (option) {\n      return option.value === setting.relayTwoIdRelated;\n    });\n    return __jsx(PlantsSensorContainer, null, __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"lightId\",\n      defaultMessage: \"lightId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.light, \" % \", (plant === null || plant === void 0 ? void 0 : plant.light) < 40 ? '🌙' : '☀️'))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"manualModeStateId\",\n      defaultMessage: \"manualModeStateId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, __jsx(FormattedMessage, {\n      id: setting.relayOneWorking ? 'manualModeStateOnId' : 'manualModeStateOffId',\n      defaultMessage: \"noDefaultOnOffMsg\"\n    })))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"lightModeId\",\n      defaultMessage: \"lightModeId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleLightSettingChange(plant, 'mode', e.value);\n      },\n      value: selectedMode,\n      options: lightModeOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    }))), ((setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.MANUAL || (setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.SCHEDULE || (setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.SMART_SCHEDULE) && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: ((_setting$relayOneIdRe5 = setting.relayOneIdRelated) === null || _setting$relayOneIdRe5 === void 0 ? void 0 : _setting$relayOneIdRe5.length) ? 'asociatedRelayId' : 'asociateRelayId',\n      defaultMessage: ((_setting$relayOneIdRe6 = setting.relayOneIdRelated) === null || _setting$relayOneIdRe6 === void 0 ? void 0 : _setting$relayOneIdRe6.length) ? 'asociatedRelayId' : 'asociateRelayId'\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleLightSettingChange(plant, 'relayOneIdRelated', e.value);\n      },\n      value: relayOneSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    }))), setting.mode === LightSensorModes.MANUAL && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"manualModeStateId\",\n      defaultMessage: \"manualModeStateId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: function onChange(e) {\n        return handleLightSettingChange(plant, 'relayOneWorking', e.value);\n      },\n      value: selectedManualState,\n      options: manualModeOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed'\n    })))), (setting.mode === LightSensorModes.SCHEDULE || setting.mode === LightSensorModes.SMART_SCHEDULE) && __jsx(React.Fragment, null, __jsx(WeekContainer, null, Object.keys(WeekDays).map(function (day, i) {\n      return __jsx(DayContainer, {\n        key: i + '-day-container',\n        style: {\n          backgroundColor: daySelected === day ? '#E6E6E6' : 'transparent'\n        },\n        onClick: function onClick() {\n          return setDay(day);\n        }\n      }, day.substring(0, 3));\n    })), setting === null || setting === void 0 ? void 0 : (_setting$scheduledOnT3 = setting.scheduledOnTimes) === null || _setting$scheduledOnT3 === void 0 ? void 0 : _setting$scheduledOnT3.map(function (schedule, i) {\n      return __jsx(WeekContainer, {\n        key: i + '-days-to-repeat-2'\n      }, schedule.daysToRepeat.includes(daySelected) ? __jsx(ScheduleTime, null, __jsx(TextSpaced, null, __jsx(FormattedMessage, {\n        id: \"startTimeId\",\n        defaultMessage: \"startTimeId\"\n      })), \" \", __jsx(TextSpaced, null, schedule.startTime), __jsx(TextSpaced, null, __jsx(FormattedMessage, {\n        id: \"endTimeId\",\n        defaultMessage: \"endTimeId\"\n      })), \" \", __jsx(TextSpaced, null, schedule.endTime), __jsx(CardButtons, {\n        className: \"button-wrapper\"\n      }, __jsx(ActionButton, {\n        onClick: function onClick() {\n          var _data$getUser10;\n\n          return handleModal(AddTimeSchedule, {\n            name: 'add-light-schedule',\n            plant: plant,\n            id: data === null || data === void 0 ? void 0 : (_data$getUser10 = data.getUser) === null || _data$getUser10 === void 0 ? void 0 : _data$getUser10.id\n          });\n        },\n        className: \"edit-btn\"\n      }, __jsx(PencilIcon, null)), __jsx(ActionButton, {\n        onClick: function onClick() {\n          return onDeleteSchedule(plant, 'lightSettings', i);\n        },\n        className: \"delete-btn\"\n      }, __jsx(CloseIcon, null)))) : __jsx(ScheduleTime, {\n        style: {\n          border: '0px',\n          height: '42px'\n        }\n      }));\n    }), __jsx(Button, {\n      size: \"small\",\n      variant: \"outlined\",\n      type: \"button\",\n      className: \"add-button\",\n      onClick: function onClick() {\n        var _data$getUser11;\n\n        return handleModal(AddTimeSchedule, {\n          name: 'add-light-schedule',\n          plant: plant,\n          id: data === null || data === void 0 ? void 0 : (_data$getUser11 = data.getUser) === null || _data$getUser11 === void 0 ? void 0 : _data$getUser11.id\n        });\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addTimeScheduleId\",\n      defaultMessage: \"addTimeScheduleId\"\n    }))));\n  };\n\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '197px'\n      });\n    }\n  };\n  return __jsx(PlantPageWrapper, null, __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    }\n  }, __jsx(Link, {\n    href: \"/profile\"\n  }, __jsx(\"a\", {\n    className: \"home-btn\"\n  }, __jsx(FormattedMessage, {\n    id: \"backProfileBtn\",\n    defaultMessage: \"Back to Profile\"\n  }))), __jsx(OrderDetails, null, __jsx(BlockTitle, null, __jsx(FormattedMessage, {\n    id: \"yourPlants\",\n    defaultMessage: \"Your Plants\"\n  })), (plants === null || plants === void 0 ? void 0 : plants.length) < 1 && __jsx(Text, null, \"No tienes plantas registradas\"), plants === null || plants === void 0 ? void 0 : plants.map(function (plant, i) {\n    return __jsx(PlantsWrapper, {\n      key: i + '-orderList'\n    }, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"controllerNameId\",\n      defaultMessage: \"controllerNameId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      disabled: true,\n      value: (plant === null || plant === void 0 ? void 0 : plant.name) || '' // we have to change the onChange because the is no one for the controller name actualy\n      ,\n      onChange: function onChange(e) {\n        return handleHumiditySettings1Change(plant, 'name', e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    }))), renderSoilSensor1(plant, plant.soilHumiditySettings1, i), renderSoilSensor2(plant, plant.soilHumiditySettings2, i), renderLightSensor(plant, plant.lightSettings, i), renderAirTemperatureSensor(plant, i), renderAirHumiditySensor(plant, i));\n  }), userinfoMsg && __jsx(SuccessMsg, null, __jsx(FormattedMessage, {\n    id: \"userInfoSuccess\",\n    defaultMessage: userinfoMsg\n  })))), __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    }\n  }, __jsx(BlockTitle, null, __jsx(FormattedMessage, {\n    id: \"addController\",\n    defaultMessage: \"Your Plants\"\n  })), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"plantNameField\",\n    defaultMessage: \"Name of the plant\"\n  }))), __jsx(ListDes, null, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    onChange: function onChange(e) {\n      return setPlantName(e.target.value);\n    },\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\"\n  }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"controllerIdField\",\n    defaultMessage: \"ID of the controller\"\n  }))), __jsx(ListDes, null, __jsx(Input, {\n    type: \"number\",\n    name: \"controllerId\",\n    value: controllerId,\n    onChange: function onChange(e) {\n      return setControllerID(e.target.value);\n    },\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\"\n  }))), __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: handleAddClick\n  }, __jsx(ButtonText, null, __jsx(FormattedMessage, {\n    id: \"addPlantButton\",\n    defaultMessage: \"Add plant\"\n  })))));\n};\n\nexport default YourPlants;","map":null,"metadata":{},"sourceType":"module"}