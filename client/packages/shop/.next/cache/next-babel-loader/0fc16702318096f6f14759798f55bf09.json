{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightReading.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nconst LightReading = ({\n  module,\n  plantId\n}) => {\n  var _data$getUser, _data$getUser$plants, _data$getUser$plants$, _data$getUser$plants$2, _data$getUser$plants$3, _data$getUser$plants$4;\n\n  const setting = plant.sensors.find(module => module.settingType === settingType);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 1000\n  });\n  const plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(plant => plant.plantId === plantId);\n  const sensorIndex = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.findIndex(sensor => sensor.settingType === module.settingType);\n  let reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$3 = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$3 === void 0 ? void 0 : (_data$getUser$plants$4 = _data$getUser$plants$3.sensors[sensorIndex]) === null || _data$getUser$plants$4 === void 0 ? void 0 : _data$getUser$plants$4.reading; // const reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n  return __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, setting === null || setting === void 0 ? void 0 : setting.reading, \" % \", (setting === null || setting === void 0 ? void 0 : setting.reading) < 40 ? 'ðŸŒ™' : 'ðŸ’¡');\n};\n\nexport default LightReading;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","LightReading","module","plantId","setting","plant","sensors","find","settingType","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","plantIndex","getUser","plants","findIndex","sensorIndex","sensor","reading"],"mappings":";;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAOA,MAAMC,YAA6B,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA0B;AAAA;;AAC5D,QAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAoBL,MAAD,IAAsBA,MAAM,CAACM,WAAP,KAAuBA,WAAhE,CAAhB;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACC,2BAAD,EAA8B;AACnEY,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAAzC;AAME,QAAMC,UAAU,GAAGJ,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEK,OAAT,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,SAAvB,CAAkCb,KAAD,IAAgBA,KAAK,CAACF,OAAN,KAAkBA,OAAnE,CAAnB;AACA,QAAMgB,WAAW,GAAGR,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEK,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,oFAAG,sBAAkCT,OAArC,2DAAG,uBAA2CY,SAA3C,CAAsDE,MAAD,IAAiBA,MAAM,CAACZ,WAAP,KAAuBN,MAAM,CAACM,WAApG,CAApB;AACA,MAAIa,OAAO,GAAGV,IAAH,aAAGA,IAAH,iDAAGA,IAAI,CAAEK,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,qFAAG,uBAAkCT,OAAlC,CAA0Ca,WAA1C,CAAH,2DAAG,uBAAwDE,OAAtE,CAX0D,CAY5D;;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYjB,OAAZ,aAAYA,OAAZ,uBAAYA,OAAO,CAAEiB,OAArB,SAAiC,CAAAjB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEiB,OAAT,IAAmB,EAAnB,GAAwB,IAAxB,GAA+B,IAAhE,CADJ;AAGH,CAhBD;;AAkBA,eAAepB,YAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  plant: any;\n  settingType: SensorsTypes;\n}\n\nconst LightReading: React.FC<Props> = ({ module, plantId  }) => {\n    const setting = plant.sensors.find((module: ISetting) => module.settingType === settingType);\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 1000,\n      });\n    \n      const plantIndex = data?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plantId);\n      const sensorIndex = data?.getUser.plants[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n      let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    // const reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    return (\n        <Text bold>{setting?.reading} % {setting?.reading < 40 ? 'ðŸŒ™' : 'ðŸ’¡'}</Text>\n    );\n};\n\nexport default LightReading;\n"]},"metadata":{},"sourceType":"module"}