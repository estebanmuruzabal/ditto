{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/AirHumidityReading.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\n\nvar AirHumidityReading = function AirHumidityReading(_ref) {\n  var _latestDataFetched$ge, _latestDataFetched$ge2, _latestDataFetched$ge3, _latestDataFetched$ge4, _latestDataFetched$ge5, _latestDataFetched$ge6;\n\n  var module = _ref.module,\n      plantId = _ref.plantId,\n      latestDataFetched = _ref.latestDataFetched;\n  var plantIndex = latestDataFetched === null || latestDataFetched === void 0 ? void 0 : (_latestDataFetched$ge = latestDataFetched.getUser) === null || _latestDataFetched$ge === void 0 ? void 0 : (_latestDataFetched$ge2 = _latestDataFetched$ge.plants) === null || _latestDataFetched$ge2 === void 0 ? void 0 : _latestDataFetched$ge2.findIndex(function (plant) {\n    return plant.plantId === plantId;\n  });\n  var sensorIndex = latestDataFetched === null || latestDataFetched === void 0 ? void 0 : (_latestDataFetched$ge3 = latestDataFetched.getUser.plants[plantIndex]) === null || _latestDataFetched$ge3 === void 0 ? void 0 : (_latestDataFetched$ge4 = _latestDataFetched$ge3.sensors) === null || _latestDataFetched$ge4 === void 0 ? void 0 : _latestDataFetched$ge4.findIndex(function (sensor) {\n    return sensor.settingType === module.settingType;\n  });\n  var reading = latestDataFetched === null || latestDataFetched === void 0 ? void 0 : (_latestDataFetched$ge5 = latestDataFetched.getUser.plants[plantIndex]) === null || _latestDataFetched$ge5 === void 0 ? void 0 : (_latestDataFetched$ge6 = _latestDataFetched$ge5.sensors[sensorIndex]) === null || _latestDataFetched$ge6 === void 0 ? void 0 : _latestDataFetched$ge6.reading;\n  return __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, reading, \" % \\uD83D\\uDCA8\");\n};\n\n_c = AirHumidityReading;\nexport default AirHumidityReading;\n\nvar _c;\n\n$RefreshReg$(_c, \"AirHumidityReading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/AirHumidityReading.tsx"],"names":["React","Text","AirHumidityReading","module","plantId","latestDataFetched","plantIndex","getUser","plants","findIndex","plant","sensorIndex","sensors","sensor","settingType","reading"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AACA,SAASC,IAAT,QAAqB,yBAArB;;AAQA,IAAMC,kBAAmC,GAAG,SAAtCA,kBAAsC,OAA6C;AAAA;;AAAA,MAA1CC,MAA0C,QAA1CA,MAA0C;AAAA,MAAlCC,OAAkC,QAAlCA,OAAkC;AAAA,MAAzBC,iBAAyB,QAAzBA,iBAAyB;AAErF,MAAMC,UAAU,GAAGD,iBAAH,aAAGA,iBAAH,gDAAGA,iBAAiB,CAAEE,OAAtB,oFAAG,sBAA4BC,MAA/B,2DAAG,uBAAoCC,SAApC,CAA8C,UAACC,KAAD;AAAA,WAAgBA,KAAK,CAACN,OAAN,KAAkBA,OAAlC;AAAA,GAA9C,CAAnB;AACA,MAAMO,WAAW,GAAGN,iBAAH,aAAGA,iBAAH,iDAAGA,iBAAiB,CAAEE,OAAnB,CAA2BC,MAA3B,CAAkCF,UAAlC,CAAH,qFAAG,uBAA+CM,OAAlD,2DAAG,uBAAwDH,SAAxD,CAAkE,UAACI,MAAD;AAAA,WAAiBA,MAAM,CAACC,WAAP,KAAuBX,MAAM,CAACW,WAA/C;AAAA,GAAlE,CAApB;AACA,MAAIC,OAAO,GAAGV,iBAAH,aAAGA,iBAAH,iDAAGA,iBAAiB,CAAEE,OAAnB,CAA2BC,MAA3B,CAAkCF,UAAlC,CAAH,qFAAG,uBAA+CM,OAA/C,CAAuDD,WAAvD,CAAH,2DAAG,uBAAqEI,OAAnF;AAEA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYA,OAAZ,oBADJ;AAGH,CATD;;KAAMb,kB;AAWN,eAAeA,kBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Text } from '../../your-plants.style';\n\ninterface Props {\n  module: any;\n  plantId: any;\n  latestDataFetched: any;\n}\n\nconst AirHumidityReading: React.FC<Props> = ({ module, plantId, latestDataFetched  }) => {\n\n    const plantIndex = latestDataFetched?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plantId);\n    const sensorIndex = latestDataFetched?.getUser.plants[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n    let reading = latestDataFetched?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n    return (\n        <Text bold>{reading} % ðŸ’¨</Text>\n    );\n};\n\nexport default AirHumidityReading;\n"]},"metadata":{},"sourceType":"module"}