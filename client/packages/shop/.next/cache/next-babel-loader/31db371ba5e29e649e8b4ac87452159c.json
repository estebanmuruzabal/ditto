{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport Link from 'next/link';\nimport { Button } from 'components/button/button';\nimport RadioCard from 'components/radio-card/radio-card';\nimport RadioGroupTwo from 'components/radio-group/radio-group-two';\nimport RadioGroupThree from 'components/radio-group/radio-group-three';\nimport RadioCardTWO from 'components/radio-card/radio-card-two';\nimport PaymentGroup from 'components/payment-group/payment-group';\nimport UpdateContact from 'components/contact-card/contact-card';\nimport { DELETE_ADDRESS, SETPRIMARY_ADDRESS } from 'graphql/mutation/address';\nimport { DELETE_PHONENUMBER, SETPRIMARY_PHONENUMBER } from 'graphql/mutation/phone';\nimport { CREAT_ORDER } from 'graphql/mutation/order';\nimport { GET_COUPON } from 'graphql/query/coupon';\nimport { DELETE_CARD } from 'graphql/mutation/card';\nimport { DELETE_CONTACT } from 'graphql/mutation/contact';\nimport { CURRENCY } from 'utils/constant';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport CheckoutWrapper, { CheckoutContainer, CheckoutInformation, InformationBox, DeliverySchedule, Heading, ButtonGroup, CheckoutSubmit, HaveCoupon, CouponBoxWrapper, CouponInputBox // Input,\n, CouponCode, RemoveCoupon, ErrorMsg, TermConditionText, TermConditionLink, CartWrapper, CalculationWrapper, OrderInfo, Title, ItemsWrapper, Items, Quantity, Multiplier, ItemInfo, Price, TextWrapper, Text, Bold, NoProductMsg, NoProductImg, IconWrapper } from './checkout-two.style';\nimport CouponBox from 'components/coupon-box/coupon-box';\nimport { Plus } from 'assets/icons/PlusMinus';\nimport { NoCartBag } from 'assets/icons/NoCartBag';\nimport Sticky from 'react-stickynode';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useCart } from 'contexts/cart/use-cart';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { useWindowSize } from 'utils/useWindowSize';\nimport UpdateAddressTwo from 'components/address-card/address-card-two'; // The type of props Checkout Form receives\n\nconst OrderItem = ({\n  product\n}) => {\n  const {\n    id,\n    quantity,\n    title,\n    name,\n    unit,\n    price,\n    salePrice\n  } = product;\n  const displayPrice = salePrice ? salePrice : price;\n  const intl = useIntl();\n  return __jsx(Items, {\n    key: id\n  }, __jsx(Quantity, null, quantity), __jsx(Multiplier, null, \"x\"), __jsx(ItemInfo, null, name ? name : title, \" \", unit ? `| ${unit}` : ''), __jsx(Price, null, CURRENCY, (displayPrice * quantity).toFixed(2)));\n};\n\nconst CheckoutWithSidebar = ({\n  token,\n  deviceType\n}) => {\n  const {\n    0: hasCoupon,\n    1: setHasCoupon\n  } = useState(false);\n  const {\n    0: couponCode,\n    1: setCouponCode\n  } = useState('');\n  const {\n    0: couponError,\n    1: setError\n  } = useState('');\n  const {\n    0: orderError,\n    1: setOrderError\n  } = useState('');\n  const {\n    0: checkoutError,\n    1: setCheckoutError\n  } = useState('');\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    isRtl\n  } = useLocale();\n  const {\n    items,\n    removeCoupon,\n    coupon,\n    applyCoupon,\n    clearCart,\n    cartItemsCount,\n    calculatePrice,\n    calculateDiscount,\n    calculateSubTotalPrice,\n    isRestaurant,\n    toggleRestaurant\n  } = useCart();\n  const intl = useIntl();\n  let cartProduct = null;\n\n  if (items.length > 0) {\n    cartProduct = items.map((item, index) => ({\n      product_id: item.id,\n      unit: item.unit,\n      quantity: Number(item.quantity),\n      sale_price: item.sale_price,\n      price: item.price,\n      image: item.images[0],\n      name: item.name\n    }));\n  }\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: isValid,\n    1: setIsValid\n  } = useState(false);\n  const {\n    0: submitResult,\n    1: setSubmitResult\n  } = useState({\n    contact_number: '',\n    payment_option_id: '',\n    delivery_method_id: '',\n    coupon_code: '',\n    delivery_address: null,\n    products: null\n  });\n  const {\n    delivery_address,\n    contact,\n    paymentMethods,\n    phones,\n    name,\n    email,\n    id,\n    deliveryMethods\n  } = state; //set mututions\n\n  const [setprimaryAddressMutation] = useMutation(SETPRIMARY_ADDRESS);\n  const [deleteAddressMutation] = useMutation(DELETE_ADDRESS);\n  const [setprimaryPhoneNumberMutation] = useMutation(SETPRIMARY_PHONENUMBER);\n  const [deletePhoneNumberMutation] = useMutation(DELETE_PHONENUMBER);\n  const [setOrderMutation] = useMutation(CREAT_ORDER);\n  const [deleteContactMutation] = useMutation(DELETE_CONTACT);\n  const [deletePaymentCardMutation] = useMutation(DELETE_CARD);\n  const size = useWindowSize();\n  const [appliedCoupon] = useMutation(GET_COUPON);\n  const selectedAddress = delivery_address && delivery_address.find(item => item.is_primary === true);\n  const selectedContact = phones.find(item => item.is_primary === true);\n  useEffect(() => {\n    removeCoupon();\n    setHasCoupon(false);\n    setSubmitResult(_objectSpread(_objectSpread({}, submitResult), {}, {\n      delivery_address: `${selectedAddress && selectedAddress.title}) -   \n      ${selectedAddress && selectedAddress.address}, ${selectedAddress && selectedAddress.district}, ${selectedAddress && selectedAddress.region}`,\n      products: cartProduct,\n      contact_number: selectedContact.number\n    }));\n\n    if (calculatePrice() > 0 && cartItemsCount > 0 && delivery_address && delivery_address.length && phones.length && paymentMethods.length && deliveryMethods.length) {\n      setIsValid(true);\n    }\n  }, [state]); // Add or edit modal\n\n  const handleModal = (modalComponent, modalProps = {}, className = 'add-address-modal') => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  const handleEditDelete = async (item, index, type, name) => {\n    if (type === 'edit') {\n      const modalComponent = name === 'address' ? UpdateAddressTwo : UpdateContact;\n      handleModal(modalComponent, {\n        item,\n        id\n      });\n    } else {\n      switch (name) {\n        /* case 'payment':\n           dispatch({ type: 'DELETE_CARD', payload: item.id });\n           return await deletePaymentCardMutation({\n             variables: { cardId: JSON.stringify(item.id) },\n           });\n         */\n        case 'contact':\n          if (phones.length > 1) {\n            dispatch({\n              type: 'DELETE_CONTACT',\n              payload: item.id\n            });\n            return await deletePhoneNumberMutation({\n              variables: {\n                id,\n                phoneId: item.id\n              }\n            });\n          } else {\n            return null;\n          }\n\n        case 'address':\n          if (delivery_address.length > 1) {\n            dispatch({\n              type: 'DELETE_ADDRESS',\n              payload: item.id\n            });\n            return await deleteAddressMutation({\n              variables: {\n                id,\n                addressId: item.id\n              }\n            });\n          } else {\n            return null;\n          }\n\n        default:\n          return false;\n      }\n    }\n  };\n\n  const handlePrimary = async (item, name) => {\n    switch (name) {\n      case 'contact':\n        dispatch({\n          type: 'SET_PRIMARY_CONTACT',\n          payload: item.id\n        });\n        return await setprimaryPhoneNumberMutation({\n          variables: {\n            id,\n            phoneId: item.id\n          }\n        });\n\n      case 'address':\n        dispatch({\n          type: 'SET_PRIMARY_ADDRESS',\n          payload: item.id\n        });\n        return await setprimaryAddressMutation({\n          variables: {\n            id,\n            addressId: item.id\n          }\n        });\n\n      default:\n        return false;\n    }\n  };\n\n  const handleApplyCoupon = async () => {\n    if (!couponCode) {\n      setError('Invalid Coupon');\n      return null;\n    }\n\n    const {\n      data,\n      errors\n    } = await appliedCoupon({\n      variables: {\n        code: couponCode\n      }\n    });\n\n    if (!data.getCoupon.coupon && data.getCoupon.message && !data.getCoupon.message.status) {\n      setError('Invalid Coupon');\n      return null;\n    }\n\n    if (errors) {\n      setError('Invalid Coupon');\n      return null;\n    }\n\n    if (data.getCoupon.coupon && data.getCoupon.coupon.percentage) {\n      applyCoupon(data.getCoupon.coupon);\n      setSubmitResult(_objectSpread(_objectSpread({}, submitResult), {}, {\n        coupon_code: couponCode,\n        products: cartProduct\n      }));\n      setCouponCode('');\n    } else {\n      setError('Invalid Coupon');\n    }\n  };\n\n  const handleOnUpdate = e => {\n    setCouponCode(e.currentTarget.value);\n  };\n\n  const setErrorFor5Sec = messageId => {\n    const a = __jsx(FormattedMessage, {\n      id: messageId\n    });\n\n    setCheckoutError('a');\n    setTimeout(() => setCheckoutError(null), 1500);\n    return null;\n  };\n\n  const handleSubmit = async () => {\n    const otherSubmitResult = {\n      customer_id: id,\n      sub_total: Number(calculateSubTotalPrice()),\n      total: Number(calculatePrice()),\n      discount_amount: Number(calculateDiscount())\n    };\n    const {\n      contact_number,\n      payment_option_id,\n      delivery_method_id,\n      delivery_address,\n      coupon_code,\n      products\n    } = submitResult;\n    const {\n      customer_id,\n      sub_total,\n      total,\n      discount_amount\n    } = otherSubmitResult;\n    console.log('total = ', typeof total);\n    console.log('sub_total = ', typeof sub_total);\n    console.log('discount_amount = ', typeof discount_amount);\n    console.log('product-price = ', products);\n    if (!delivery_address) setErrorFor5Sec('checkoutDeliveryAddressInvalid');\n    if (!delivery_method_id) setErrorFor5Sec('checkoutDeliveryMethodInvalid');\n    if (!contact_number) setErrorFor5Sec('checkoutContactNumberInvalid');\n    if (!payment_option_id) setErrorFor5Sec('checkoutPaymentMethodInvalid');\n\n    if (!customer_id || !products) {\n      setCheckoutError('Please place a valid order!');\n      return null;\n    } // if (confirm('Are you sure? You want to place this order?')) {\n\n\n    const {\n      errors: orderCreateError\n    } = await setOrderMutation({\n      variables: {\n        input: {\n          customer_id,\n          contact_number,\n          payment_option_id,\n          delivery_method_id,\n          delivery_address,\n          sub_total,\n          total,\n          coupon_code,\n          discount_amount,\n          products\n        }\n      }\n    });\n\n    if (!orderCreateError) {\n      setLoading(true);\n\n      if (isValid) {\n        clearCart();\n        removeCoupon();\n        setHasCoupon(false);\n        Router.push('/order');\n      }\n\n      setLoading(false);\n      setIsValid(false);\n    }\n\n    if (orderCreateError) {\n      setOrderError(orderCreateError[0].message);\n    } // }\n\n  };\n\n  const pickUpOptionIds = deliveryMethods.map(deliveryMethod => {\n    return deliveryMethod.name.toLowerCase().includes('busc') ? deliveryMethod.id : null;\n  });\n  console.log(submitResult, deliveryMethods, pickUpOptionIds);\n  return __jsx(\"form\", null, __jsx(CheckoutWrapper, null, __jsx(CheckoutContainer, null, __jsx(CheckoutInformation, null, __jsx(InformationBox, null, __jsx(DeliverySchedule, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"deliverySchedule\",\n    defaultMessage: \"Select Your Delivery Schedule\"\n  })), (deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.length) ? __jsx(RadioGroupTwo, {\n    items: deliveryMethods,\n    component: (item, index) => __jsx(RadioCard, {\n      id: item.id,\n      key: item.id,\n      title: item.name,\n      content: item.details,\n      name: \"schedule\",\n      checked: item.type === 'primary',\n      withActionButtons: false,\n      onClick: () => setSubmitResult(_objectSpread(_objectSpread({}, submitResult), {}, {\n        delivery_method_id: item.id,\n        products: cartProduct\n      })),\n      onChange: () => {\n        return dispatch({\n          type: 'SET_PRIMARY_SCHEDULE',\n          payload: item.id.toString()\n        });\n      }\n    })\n  }) : __jsx(FormattedMessage, {\n    id: \"noDeliveryOptionsDefinedId\",\n    defaultMessage: \"No hay m\\xE9todos de envios por el momento\"\n  }))), !pickUpOptionIds.includes(submitResult.delivery_method_id) && __jsx(InformationBox, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"checkoutDeliveryAddress\",\n    defaultMessage: \"Delivery Address\"\n  })), __jsx(ButtonGroup, null, __jsx(RadioGroupTwo, {\n    items: delivery_address,\n    component: (item, index) => __jsx(RadioCardTWO, {\n      id: index,\n      key: index,\n      address: item.address,\n      district: item.district,\n      division: item.division,\n      title: item.title,\n      region: item.region,\n      name: \"address\",\n      isChecked: item.is_primary === true,\n      onClick: () => setSubmitResult(_objectSpread(_objectSpread({}, submitResult), {}, {\n        delivery_address: `${item.title} -\n                          ${item.address}, ${item.region}, ${item.district}\n                          `,\n        products: cartProduct\n      })),\n      onChange: () => handlePrimary(item, 'address'),\n      onEdit: () => handleEditDelete(item, index, 'edit', 'address'),\n      onDelete: () => handleEditDelete(item, index, 'delete', 'address')\n    }),\n    secondaryComponent: __jsx(Button, {\n      className: \"addButton\",\n      variant: \"text\",\n      type: \"button\",\n      onClick: () => handleModal(UpdateAddressTwo, {\n        item: {},\n        id\n      }, 'add-address-modal')\n    }, __jsx(IconWrapper, null, __jsx(Plus, {\n      width: \"10px\"\n    })), __jsx(FormattedMessage, {\n      id: \"addNew\",\n      defaultMessage: \"Add New\"\n    }))\n  }))), __jsx(InformationBox, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"contactNumberText\",\n    defaultMessage: \"Select Your Contact Number\"\n  })), __jsx(ButtonGroup, null, __jsx(RadioGroupThree, {\n    items: phones,\n    component: (item, index) => __jsx(RadioCard, {\n      id: index,\n      key: index,\n      title: item.is_primary ? intl.formatMessage({\n        id: 'primaryId',\n        defaultMessage: 'Primary'\n      }) : intl.formatMessage({\n        id: 'secundaryId',\n        defaultMessage: 'Secondary'\n      }),\n      content: item.number,\n      checked: item.is_primary === true,\n      onChange: () => handlePrimary(item, 'contact'),\n      onClick: () => setSubmitResult(_objectSpread(_objectSpread({}, submitResult), {}, {\n        contact_number: item.number,\n        products: cartProduct\n      })),\n      name: \"contact\",\n      onEdit: () => handleEditDelete(item, index, 'edit', 'contact'),\n      onDelete: () => handleEditDelete(item, index, 'delete', 'contact')\n    }),\n    secondaryComponent: __jsx(Button, {\n      className: \"addButton\",\n      variant: \"text\",\n      type: \"button\",\n      onClick: () => handleModal(UpdateContact, {\n        item: {},\n        id\n      }, 'add-contact-modal')\n    }, __jsx(IconWrapper, null, __jsx(Plus, {\n      width: \"10px\"\n    })), __jsx(FormattedMessage, {\n      id: \"addContactBtn\",\n      defaultMessage: \"Add Contact\"\n    }))\n  }))), __jsx(InformationBox, {\n    className: \"paymentBox\",\n    style: {\n      paddingBottom: 30\n    }\n  }, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"selectPaymentText\",\n    defaultMessage: \"Select Payment Option\"\n  })), __jsx(PaymentGroup, {\n    name: \"payment\",\n    deviceType: deviceType,\n    items: paymentMethods,\n    onEditDeleteField: (item, type) => null,\n    onClick: item => {\n      setSubmitResult(_objectSpread(_objectSpread({}, submitResult), {}, {\n        payment_option_id: item.id,\n        products: cartProduct\n      }));\n      return null;\n    },\n    onChange: item => {\n      return dispatch({\n        type: 'SET_PRIMARY_CARD',\n        payload: item.id.toString()\n      });\n    },\n    handleAddNewCard: () => null\n  }), coupon ? __jsx(CouponBoxWrapper, null, __jsx(CouponCode, null, __jsx(FormattedMessage, {\n    id: \"couponApplied\"\n  }), __jsx(\"span\", null, coupon.code), __jsx(RemoveCoupon, {\n    onClick: e => {\n      e.preventDefault();\n      removeCoupon();\n      setHasCoupon(false);\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"removeCoupon\"\n  })))) : __jsx(CouponBoxWrapper, null, !hasCoupon ? __jsx(HaveCoupon, {\n    onClick: () => setHasCoupon(prev => !prev)\n  }, __jsx(FormattedMessage, {\n    id: \"specialCode\",\n    defaultMessage: \"Have a special code?\"\n  })) : __jsx(React.Fragment, null, __jsx(CouponInputBox, null, __jsx(CouponBox, {\n    onClick: handleApplyCoupon,\n    value: couponCode,\n    onChange: handleOnUpdate,\n    className: \"normalCoupon\"\n  })), couponError && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"couponError\",\n    defaultMessage: couponError\n  })))), __jsx(TermConditionText, null, __jsx(FormattedMessage, {\n    id: \"termAndConditionHelper\",\n    defaultMessage: \"By making this purchase you agree to our\"\n  }), __jsx(Link, {\n    href: \"#\"\n  }, __jsx(TermConditionLink, null, __jsx(FormattedMessage, {\n    id: \"termAndCondition\",\n    defaultMessage: \"terms and conditions.\"\n  })))), __jsx(CheckoutSubmit, null, __jsx(Button, {\n    type: \"button\",\n    onClick: handleSubmit,\n    disabled: !isValid,\n    size: \"big\",\n    loading: loading,\n    style: {\n      width: '100%'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"processCheckout\",\n    defaultMessage: \"Proceed to Checkout\"\n  }))), __jsx(\"div\", null, checkoutError && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"checkoutError\",\n    defaultMessage: checkoutError\n  })), orderError && __jsx(ErrorMsg, null, __jsx(\"p\", null, orderError))))), __jsx(CartWrapper, null, __jsx(Sticky, {\n    enabled: size.width >= 768 ? true : false,\n    top: 120,\n    innerZ: 999\n  }, __jsx(OrderInfo, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"cartTitle\",\n    defaultMessage: \"Your Orderdfd\"\n  })), __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: \"390px\",\n    renderView: props => __jsx(\"div\", _extends({}, props, {\n      style: _objectSpread(_objectSpread({}, props.style), {}, {\n        marginLeft: isRtl ? props.style.marginRight : 0,\n        marginRight: isRtl ? 0 : props.style.marginRight,\n        paddingLeft: isRtl ? 15 : 0,\n        paddingRight: isRtl ? 0 : 15\n      })\n    }))\n  }, __jsx(ItemsWrapper, null, cartItemsCount > 0 ? items.map(item => __jsx(OrderItem, {\n    key: `cartItem-${item.id}`,\n    product: item\n  })) : __jsx(React.Fragment, null, __jsx(NoProductImg, null, __jsx(NoCartBag, null)), __jsx(NoProductMsg, null, __jsx(FormattedMessage, {\n    id: \"noProductFound\",\n    defaultMessage: \"No products found\"\n  }))))), __jsx(CalculationWrapper, null, __jsx(TextWrapper, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"subTotal\",\n    defaultMessage: \"Subtotal\"\n  })), __jsx(Text, null, CURRENCY, calculateSubTotalPrice())), __jsx(TextWrapper, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"discountText\",\n    defaultMessage: \"Discount\"\n  })), __jsx(Text, null, CURRENCY, calculateDiscount())), __jsx(TextWrapper, {\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(Bold, null, __jsx(FormattedMessage, {\n    id: \"totalText\",\n    defaultMessage: \"Total\"\n  }), ' '), __jsx(Bold, null, CURRENCY, calculatePrice())))))))));\n};\n\nexport default CheckoutWithSidebar;","map":null,"metadata":{},"sourceType":"module"}