{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ButtonsContainer, DayContainer, Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text, WeekContainer } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\nimport TimePicker from 'react-time-picker';\nimport { WeekDays } from 'utils/constant';\nimport { UPDATE_HUMIDITY_1_SETTINGS, UPDATE_HUMIDITY_2_SETTINGS, UPDATE_LIGHT_SETTINGS } from 'graphql/query/plants.query'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required')\n  }),\n  handleSubmit: values => {// do submitting things\n  }\n});\n\nconst AddTimeSchedule = props => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: isSmartLightingOn,\n    1: isSmartLighting\n  } = useState(false);\n  const {\n    0: startTime,\n    1: startTimeChange\n  } = useState('00:00');\n  const {\n    0: endTime,\n    1: endTimeChange\n  } = useState('23:59');\n  const {\n    0: daysSelected,\n    1: setDaysSelected\n  } = useState([]);\n  const [updateLightSettings] = useMutation(UPDATE_LIGHT_SETTINGS);\n  const [updateHumiditySettings1] = useMutation(UPDATE_HUMIDITY_1_SETTINGS);\n  const [updateHumiditySettings2] = useMutation(UPDATE_HUMIDITY_2_SETTINGS);\n  const intl = useIntl();\n\n  const handleSubmit = async () => {\n    const newSchedule = {\n      daysToRepeat: daysSelected,\n      startTime,\n      endTime,\n      enabled: true,\n      smartLight: isSmartLightingOn\n    };\n    setLoading(true); // if (isValid) {\n\n    switch (item.name) {\n      case 'add-light-schedule':\n        item.plant.lightSettings.scheduledOnTimes = item.plant.lightSettings.scheduledOnTimes ? item.plant.lightSettings.scheduledOnTimes : [];\n        item.plant.lightSettings.scheduledOnTimes.push(newSchedule);\n        dispatch({\n          type: 'HANDLE_LIGHT_SETTINGS_CHANGE',\n          payload: {\n            plant: item.plant,\n            value: item.plant.lightSettings.scheduledOnTimes,\n            field: 'scheduledOnTimes'\n          }\n        });\n        return await updateLightSettings({\n          variables: {\n            id: item === null || item === void 0 ? void 0 : item.id,\n            controllerId: item.plant.controllerId,\n            input: item.plant.lightSettings\n          }\n        });\n\n      case 'add-humidity-1-schedule':\n        item.plant.soilHumiditySettings1.scheduledOnTimes = item.plant.soilHumiditySettings1.scheduledOnTimes ? item.plant.soilHumiditySettings1.scheduledOnTimes : [];\n        item.plant.soilHumiditySettings1.scheduledOnTimes.push(newSchedule);\n        dispatch({\n          type: 'HANDLE_HUMIDITY_1_SETTINGS_CHANGE',\n          payload: {\n            plant: item.plant,\n            value: item.plant.soilHumiditySettings1.scheduledOnTimes,\n            field: 'scheduledOnTimes'\n          }\n        });\n        return await updateHumiditySettings1({\n          variables: {\n            id: item === null || item === void 0 ? void 0 : item.id,\n            controllerId: item.plant.controllerId,\n            input: item.plant.soilHumiditySettings1\n          }\n        });\n\n      case 'add-humidity-2-schedule':\n        item.plant.soilHumiditySettings2.scheduledOnTimes = item.plant.soilHumiditySettings2.scheduledOnTimes ? item.plant.soilHumiditySettings2.scheduledOnTimes : [];\n        item.plant.soilHumiditySettings2.scheduledOnTimes.push(newSchedule);\n        dispatch({\n          type: 'HANDLE_HUMIDITY_2_SETTINGS_CHANGE',\n          payload: {\n            plant: item.plant,\n            value: item.plant.soilHumiditySettings2.scheduledOnTimes,\n            field: 'scheduledOnTimes'\n          }\n        });\n        return await updateHumiditySettings2({\n          variables: {\n            id: item === null || item === void 0 ? void 0 : item.id,\n            controllerId: item.plant.controllerId,\n            input: item.plant.soilHumiditySettings2\n          }\n        });\n\n      default:\n        break;\n    }\n\n    closeModal();\n    setLoading(false); // }\n  };\n\n  const handleDaysAddition = day => {\n    const dayIndex = daysSelected.indexOf(day);\n    let newDaysSelectedArray = daysSelected;\n    dayIndex >= 0 ? newDaysSelectedArray.splice(dayIndex, 1) : newDaysSelectedArray.push(day);\n    setDaysSelected(newDaysSelectedArray);\n  }; // const weekDays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n  // const lightSchedule = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]],\n  //     startTime: '00:00',\n  //     endTime: '23:59',\n  //     enabled: true,\n  //     smartLight: false\n  // }\n  // const b = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]]\n  // }\n  // const onTimes = [a, b]\n  //set notification schedule\n  // [mon] tue wed thu ...\n  // 00:00 --- 07:15\n  // 15:15 ----- 23:59\n  // Add time Schedule (button)\n  // (when pressing the button you see this pop up)\n  // Add time Schedule\n  //start time: 00:00\n  //end time: 23:59\n  // repeat: (touch and you can see all days of the week to select/deselect) press ok, and original view is seeing the selected days\n  // also the smart option for when is no light and there should be light\n\n\n  return (// <Form style={{ height: '100px' }}>\n    __jsx(Form, null, __jsx(PlantsSensorContainer, null, __jsx(Heading, null, __jsx(Heading, null, intl.formatMessage({\n      id: 'addTimeScheduleId',\n      defaultMessage: 'addTimeScheduleId'\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"startTimeId\",\n      defaultMessage: \"startTimeId\"\n    }))), __jsx(ListDes, null, __jsx(TimePicker, {\n      onChange: e => startTimeChange(e),\n      value: startTime,\n      disableClock: true\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"endTimeId\",\n      defaultMessage: \"endTimeId\"\n    }))), __jsx(ListDes, null, __jsx(TimePicker, {\n      onChange: e => endTimeChange(e),\n      value: endTime,\n      disableClock: true\n    }))), __jsx(WeekContainer, null, Object.keys(WeekDays).map((day, i) => {\n      return __jsx(DayContainer, {\n        key: i + '-day-container',\n        style: {\n          backgroundColor: daysSelected.indexOf(day) >= 0 ? '#b99c9c' : 'transparent'\n        },\n        onClick: () => handleDaysAddition(day)\n      }, day.substring(0, 3));\n    })), __jsx(ButtonsContainer, null, __jsx(Button, {\n      onClick: handleSubmit,\n      type: \"submit\" // style={{ width: '100%', height: '44px', marginTop: '200px' }}\n      ,\n      loader: __jsx(Loader, null),\n      isDisabled: loading,\n      isLoading: loading\n    }, __jsx(FormattedMessage, {\n      id: \"addTimeFrameId\",\n      defaultMessage: \"addTimeFrameId\"\n    })), __jsx(Button, {\n      onClick: () => closeModal(),\n      style: {\n        marginLeft: '20px'\n      },\n      loader: __jsx(Loader, null),\n      isDisabled: loading,\n      isLoading: loading\n    }, __jsx(FormattedMessage, {\n      id: \"cancelTimeFrameId\",\n      defaultMessage: \"cancelTimeFrameId\"\n    })))))\n  );\n};\n\nexport default FormEnhancer(AddTimeSchedule);","map":null,"metadata":{},"sourceType":"module"}