{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/add-time-schedule/add-schedule-card.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ButtonsContainer, DayContainer, Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text, WeekContainer } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\nimport TimePicker from 'react-time-picker';\nimport { WeekDays } from 'utils/constant';\nimport Checkbox from 'components/checkbox/checkbox';\nimport { ADD_LIGHT_SCHEDULE } from 'graphql/query/plants.query'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required')\n  }),\n  handleSubmit: values => {// do submitting things\n  }\n});\n\nconst AddTimeSchedule = props => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: isSmartLightingOn,\n    1: isSmartLighting\n  } = useState(false);\n  const {\n    0: startTime,\n    1: startTimeChange\n  } = useState('00:00');\n  const {\n    0: endTime,\n    1: endTimeChange\n  } = useState('23:59');\n  const {\n    0: daysSelected,\n    1: setDaysSelected\n  } = useState([]);\n  const [updateSoilHumiditySettings1] = useMutation(ADD_LIGHT_SCHEDULE);\n  const intl = useIntl();\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      // const addressData = await addressMutation({\n      //   variables: { addressInput: JSON.stringify(addressValue) },\n      // });\n      setLoading(true);\n      dispatch({\n        type: 'ADD_OR_UPDATE_ADDRESS',\n        payload: addressValue\n      });\n      closeModal();\n      setLoading(false);\n    }\n  };\n\n  const handleAddScheduleInSettings = async (item, type, name) => {\n    if (type === 'edit') {\n      const modalComponent = name === 'address' ? UpdateAddress : UpdateContact;\n      handleModal(modalComponent, item);\n    } else {\n      switch (name) {\n        case 'payment':\n          dispatch({\n            type: 'DELETE_CARD',\n            payload: item.id\n          });\n          return await deletePaymentCardMutation({\n            variables: {\n              cardId: JSON.stringify(item.id)\n            }\n          });\n\n        case 'contact':\n          dispatch({\n            type: 'DELETE_CONTACT',\n            payload: item.id\n          });\n          return await deleteContactMutation({\n            variables: {\n              contactId: JSON.stringify(item.id)\n            }\n          });\n\n        case 'address':\n          dispatch({\n            type: 'DELETE_ADDRESS',\n            payload: item.id\n          });\n          return await deleteAddressMutation({\n            variables: {\n              addressId: JSON.stringify(item.id)\n            }\n          });\n\n        default:\n          return false;\n      }\n    }\n  };\n\n  const handleDaysAddition = day => {\n    const dayIndex = daysSelected.indexOf(day);\n    let newDaysSelectedArray = daysSelected;\n    dayIndex >= 0 ? newDaysSelectedArray.splice(dayIndex, 1) : newDaysSelectedArray.push(day);\n    setDaysSelected(newDaysSelectedArray);\n  }; // const weekDays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n  // const lightSchedule = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]],\n  //     startTime: '00:00',\n  //     endTime: '23:59',\n  //     enabled: true,\n  //     smartLight: false\n  // }\n  // const b = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]]\n  // }\n  // const onTimes = [a, b]\n  //set notification schedule\n  // [mon] tue wed thu ...\n  // 00:00 --- 07:15\n  // 15:15 ----- 23:59\n  // Add time Schedule (button)\n  // (when pressing the button you see this pop up)\n  // Add time Schedule\n  //start time: 00:00\n  //end time: 23:59\n  // repeat: (touch and you can see all days of the week to select/deselect) press ok, and original view is seeing the selected days\n  // also the smart option for when is no light and there should be light\n\n\n  return (// <Form style={{ height: '100px' }}>\n    __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 5\n      }\n    }, __jsx(PlantsSensorContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }\n    }, __jsx(Heading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }, __jsx(Heading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, intl.formatMessage({\n      id: 'addTimeScheduleId',\n      defaultMessage: 'addTimeScheduleId'\n    }))), __jsx(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, __jsx(ListTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"startTimeId\",\n      defaultMessage: \"startTimeId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    }))), __jsx(ListDes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, __jsx(TimePicker, {\n      onChange: () => startTimeChange(startTime),\n      value: startTime,\n      disableClock: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }))), __jsx(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, __jsx(ListTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"endTimeId\",\n      defaultMessage: \"endTimeId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }))), __jsx(ListDes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }\n    }, __jsx(TimePicker, {\n      onChange: () => endTimeChange(endTime),\n      value: endTime,\n      disableClock: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    }))), __jsx(WeekContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }\n    }, Object.keys(WeekDays).map((day, i) => {\n      return __jsx(DayContainer, {\n        key: i + '-day-container',\n        style: {\n          backgroundColor: daysSelected.indexOf(day) >= 0 ? '#b99c9c' : 'transparent'\n        },\n        onClick: () => handleDaysAddition(day),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }\n      }, day.substring(0, 3));\n    })), __jsx(Checkbox, {\n      checked: isSmartLightingOn,\n      onChange: () => isSmartLighting(!isSmartLightingOn) // inputRef={register({ required: true })}\n      ,\n      name: \"isSmartLightingOn\" // overrides={{\n      //   Label: {\n      //       style: ({ $theme }) => ({\n      //       color: $theme.colors.textNormal,\n      //       }),\n      //   },\n      // }}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"smartLightingId\",\n      defaultMessage: \"smartLightingId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    })), __jsx(ButtonsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, __jsx(Button, {\n      onClick: handleSubmit,\n      type: \"submit\" // style={{ width: '100%', height: '44px', marginTop: '200px' }}\n      ,\n      loader: __jsx(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 19\n        }\n      }),\n      isDisabled: loading,\n      isLoading: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addTimeFrameId\",\n      defaultMessage: \"addTimeFrameId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    })), __jsx(Button, {\n      onClick: () => closeModal(),\n      style: {\n        marginLeft: '20px'\n      },\n      loader: __jsx(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 19\n        }\n      }),\n      isDisabled: loading,\n      isLoading: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"cancelTimeFrameId\",\n      defaultMessage: \"cancelTimeFrameId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }\n    })))))\n  );\n};\n\nexport default FormEnhancer(AddTimeSchedule);","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/add-time-schedule/add-schedule-card.tsx"],"names":["React","useContext","useState","Yup","withFormik","Form","closeModal","Button","useMutation","ButtonsContainer","DayContainer","Heading","ListDes","ListItem","ListTitle","PlantsSensorContainer","Text","WeekContainer","ProfileContext","FormattedMessage","useIntl","Loader","TimePicker","WeekDays","Checkbox","ADD_LIGHT_SCHEDULE","FormEnhancer","mapPropsToValues","props","id","item","name","info","validationSchema","object","shape","string","required","handleSubmit","values","AddTimeSchedule","isValid","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","addressValue","type","state","dispatch","loading","setLoading","isSmartLightingOn","isSmartLighting","startTime","startTimeChange","endTime","endTimeChange","daysSelected","setDaysSelected","updateSoilHumiditySettings1","intl","payload","handleAddScheduleInSettings","modalComponent","UpdateAddress","UpdateContact","handleModal","deletePaymentCardMutation","variables","cardId","JSON","stringify","deleteContactMutation","contactId","deleteAddressMutation","addressId","handleDaysAddition","day","dayIndex","indexOf","newDaysSelectedArray","splice","push","formatMessage","defaultMessage","Object","keys","map","i","backgroundColor","substring","marginLeft"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { ButtonsContainer, DayContainer, FieldWrapper, Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text, WeekContainer } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\n\nimport TimePicker from 'react-time-picker'\nimport { WeekDays } from 'utils/constant';\nimport Checkbox from 'components/checkbox/checkbox';\nimport { ADD_LIGHT_SCHEDULE } from 'graphql/query/plants.query';\n\n\n// Shape of form values\ninterface FormValues {\n  id?: number | null;\n  name?: string;\n  info?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n}\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik<MyFormProps, FormValues>({\n  \n  // Transform outer props into form values\n  mapPropsToValues: (props) => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || '',\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required'),\n  }),\n  handleSubmit: (values) => {\n    // do submitting things\n  },\n});\n\nconst AddTimeSchedule = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    \n    handleReset,\n    isSubmitting,\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info,\n  };\n  const { state, dispatch } = useContext(ProfileContext);\n  const [loading, setLoading] = useState(false);\n  const [isSmartLightingOn, isSmartLighting] = useState(false);\n  const [startTime, startTimeChange] = useState('00:00');\n  const [endTime, endTimeChange] = useState('23:59');\n  const [daysSelected,setDaysSelected] = useState([]);\n  const [updateSoilHumiditySettings1] = useMutation(ADD_LIGHT_SCHEDULE);\n  const intl = useIntl();\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      // const addressData = await addressMutation({\n      //   variables: { addressInput: JSON.stringify(addressValue) },\n      // });\n      \n      setLoading(true);\n      dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: addressValue });\n      closeModal();\n      setLoading(false);\n    }\n  };\n\n  const handleAddScheduleInSettings = async (item: any, type: string, name: string) => {\n    if (type === 'edit') {\n      const modalComponent = name === 'address' ? UpdateAddress : UpdateContact;\n      handleModal(modalComponent, item);\n    } else {\n      switch (name) {\n        case 'payment':\n          dispatch({ type: 'DELETE_CARD', payload: item.id });\n\n          return await deletePaymentCardMutation({\n            variables: { cardId: JSON.stringify(item.id) },\n          });\n        case 'contact':\n          dispatch({ type: 'DELETE_CONTACT', payload: item.id });\n\n          return await deleteContactMutation({\n            variables: { contactId: JSON.stringify(item.id) },\n          });\n        case 'address':\n          dispatch({ type: 'DELETE_ADDRESS', payload: item.id });\n\n          return await deleteAddressMutation({\n            variables: { addressId: JSON.stringify(item.id) },\n          });\n        default:\n          return false;\n      }\n    }\n  };\n\n  const handleDaysAddition = (day: WeekDays) => {\n    const dayIndex = daysSelected.indexOf(day);\n    let newDaysSelectedArray: any = daysSelected;\n\n    dayIndex >= 0 ? newDaysSelectedArray.splice(dayIndex, 1) : newDaysSelectedArray.push(day);\n\n    setDaysSelected(newDaysSelectedArray);\n  };\n\n    // const weekDays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n\n    // const lightSchedule = {\n    //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]],\n    //     startTime: '00:00',\n    //     endTime: '23:59',\n    //     enabled: true,\n    //     smartLight: false\n    // }\n\n    // const b = {\n    //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]]\n    // }\n    // const onTimes = [a, b]\n\n\n    //set notification schedule\n    // [mon] tue wed thu ...\n    // 00:00 --- 07:15\n    // 15:15 ----- 23:59\n    // Add time Schedule (button)\n\n    // (when pressing the button you see this pop up)\n    // Add time Schedule\n    //start time: 00:00\n    //end time: 23:59\n\n    // repeat: (touch and you can see all days of the week to select/deselect) press ok, and original view is seeing the selected days\n\n\n    // also the smart option for when is no light and there should be light\n  return (\n    // <Form style={{ height: '100px' }}>\n    <Form>\n      <PlantsSensorContainer>\n      <Heading>{<Heading>{intl.formatMessage({ id: 'addTimeScheduleId', defaultMessage: 'addTimeScheduleId' })}</Heading>}</Heading>\n      \n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id=\"startTimeId\"\n                defaultMessage=\"startTimeId\"\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <TimePicker\n              onChange={() => startTimeChange(startTime)}\n              value={startTime}\n              disableClock={true}\n            />\n          </ListDes>\n        </ListItem>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id=\"endTimeId\"\n                defaultMessage=\"endTimeId\"\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <TimePicker\n              onChange={() => endTimeChange(endTime)}\n              value={endTime}\n              disableClock={true}\n            />\n          </ListDes>\n        </ListItem>\n\n      <WeekContainer>\n        {Object.keys(WeekDays).map((day: WeekDays, i: number) => {\n            return (\n              <DayContainer\n                key={i + '-day-container'}\n                style={{ backgroundColor: daysSelected.indexOf(day) >= 0 ? '#b99c9c' : 'transparent' }}\n                onClick={() => handleDaysAddition(day)}\n              >\n                {day.substring(0,3)}\n              </DayContainer>\n            )\n          })\n        }\n      </WeekContainer>\n\n      <Checkbox\n        checked={isSmartLightingOn}\n        onChange={() => isSmartLighting(!isSmartLightingOn) }\n        // inputRef={register({ required: true })}\n        name='isSmartLightingOn'\n        // overrides={{\n        //   Label: {\n        //       style: ({ $theme }) => ({\n        //       color: $theme.colors.textNormal,\n        //       }),\n        //   },\n        // }}\n      >\n        <FormattedMessage id=\"smartLightingId\" defaultMessage=\"smartLightingId\" />\n      </Checkbox>\n      <ButtonsContainer>\n        <Button\n          onClick={handleSubmit}\n          type=\"submit\"\n          // style={{ width: '100%', height: '44px', marginTop: '200px' }}\n          loader={<Loader />}\n          isDisabled={loading}\n          isLoading={loading}\n        >\n          <FormattedMessage id=\"addTimeFrameId\" defaultMessage=\"addTimeFrameId\" />\n        </Button>\n        <Button\n          onClick={() => closeModal()}\n          style={{ marginLeft: '20px' }}\n          loader={<Loader />}\n          isDisabled={loading}\n          isLoading={loading}\n        >\n          <FormattedMessage id=\"cancelTimeFrameId\" defaultMessage=\"cancelTimeFrameId\" />\n        </Button>\n      </ButtonsContainer>\n\n      </PlantsSensorContainer>\n    </Form>\n  );\n};\n\nexport default FormEnhancer(AddTimeSchedule);\n"]},"metadata":{},"sourceType":"module"}