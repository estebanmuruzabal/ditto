{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'assets/styles/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL, isLocale } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nconst LanguageContext = React.createContext({}); // import { GoogleMap, useLoadScript, Marker } from \"@react-google-maps/api\";\n\nexport const LanguageProvider = ({\n  children,\n  messages\n}) => {\n  const [locale, setLocale] = React.useState('es');\n  const OPEN_CAGE_KEY = process.env.OPEN_CAGE_KEY;\n  const [location, setLocation] = React.useState('');\n\n  const changeLanguage = newLocale => {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  }; // React.useEffect(() => {\n  //   setLocateBasedOnLocation()\n  // }, [locale, location]);\n  // const setLocateBasedOnLocation = () => {\n  //   const isUs = location.toLowerCase().includes('united states')\n  //   const isAr = location.toLowerCase().includes('argentina')\n  //   if (isUs && locale !== Locales.EN) {\n  //     changeLanguage(Locales.EN)\n  //   } else if (isAr && locale !== Locales.ES) {\n  //     changeLanguage(Locales.ES)\n  //   }\n  // }\n  // const { isLoaded } = useLoadScript({\n  //   googleMapsApiKey: 'AIzaSyBfOLWnTDHvAxu7eftvpbiGT54bcOZgwS0',\n  // });\n  // console.log('isLoaded',isLoaded)\n\n\n  React.useEffect(() => {// if (navigator.geolocation) {\n    //   navigator.permissions\n    //     .query({ name: \"geolocation\" })\n    //     .then(function (result) {\n    //       // console.log(result);\n    //       if (result.state === \"granted\") {\n    //         //If granted then you can directly call your function here\n    //         navigator.geolocation.getCurrentPosition(success, errors, options);\n    //       } else if (result.state === \"prompt\") {\n    //         //If prompt then the user will be asked to give permission\n    //         navigator.geolocation.getCurrentPosition(success, errors, options);\n    //       } else if (result.state === \"denied\") {\n    //         //If denied then you have to show instructions to enable location\n    //       }\n    //     });\n    // } else {\n    //   console.log(\"Geolocation is not supported by this browser.\");\n    // }\n  }, []);\n\n  function getLocationInfo(latitude, longitude) {\n    const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude},${longitude}&key=9224762c77b8486bb04d32f036690d2f`;\n    fetch(url).then(response => response.json()).then(data => {\n      if (data.status.code === 200) {\n        // console.log(\"results:\", data.results);\n        setLocation(data.results[0].formatted);\n      } else {\n        console.log(\"Reverse geolocation request failed.\");\n      }\n    }).catch(error => console.error(error));\n  }\n\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    var crd = pos.coords; // console.log(\"Your current position is:\");\n    // console.log(`Latitude : ${crd.latitude}`);\n    // console.log(`Longitude: ${crd.longitude}`);\n    // console.log(`More or less ${crd.accuracy} meters.`);\n\n    getLocationInfo(crd.latitude, crd.longitude);\n  }\n\n  function errors(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  React.useEffect(() => {\n    const localSetting = Cookie.get('locale');\n\n    if (localSetting && isLocale(localSetting)) {\n      document.documentElement.lang = localSetting;\n      setLocale(localSetting);\n    }\n  }, [locale]);\n  let isRtl = isRTL(locale);\n  return __jsx(LanguageContext.Provider, {\n    value: {\n      locale,\n      changeLanguage,\n      isRtl,\n      location\n    }\n  }, __jsx(IntlProvider, {\n    locale: locale,\n    messages: messages[locale]\n  }, __jsx(InjectRTL, {\n    lang: locale,\n    dir: isRtl ? 'rtl' : 'ltr'\n  }, __jsx(StyleSheetManager, {\n    stylisPlugins: []\n  }, children))));\n};\nexport const useLocale = () => React.useContext(LanguageContext);","map":null,"metadata":{},"sourceType":"module"}