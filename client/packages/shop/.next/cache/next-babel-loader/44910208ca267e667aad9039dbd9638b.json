{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/components/upload/upload.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { FormattedMessage } from 'react-intl';\nimport { Text, TextHighlighted, Container, ThumbsContainer, Thumb, ThumbInner, Img } from './upload.style';\nimport { UploadIcon } from 'assets/icons/UploadIcon';\n\nvar Uploader = function Uploader(_ref) {\n  _s();\n\n  var onChange = _ref.onChange,\n      imageURL = _ref.imageURL,\n      intlUploadText = _ref.intlUploadText;\n\n  var _useState = useState(imageURL ? [{\n    name: 'demo',\n    preview: imageURL\n  }] : []),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useDropzone = useDropzone({\n    accept: 'image/*',\n    multiple: false,\n    onDrop: useCallback(function (acceptedFiles) {\n      setFiles(acceptedFiles.map(function (file) {\n        return Object.assign(file, {\n          preview: URL.createObjectURL(file)\n        });\n      }));\n      onChange(acceptedFiles);\n    }, [onChange])\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps;\n\n  var thumbs = files.map(function (file) {\n    return __jsx(Thumb, {\n      key: file.name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }, __jsx(ThumbInner, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, __jsx(Img, {\n      src: file.preview,\n      alt: file.name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    })));\n  });\n  useEffect(function () {\n    return function () {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach(function (file) {\n        return URL.revokeObjectURL(file.preview);\n      });\n    };\n  }, [files]);\n  return __jsx(\"section\", {\n    className: \"container uploader\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(Container, _extends({}, getRootProps(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), __jsx(\"input\", _extends({}, getInputProps(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })), __jsx(UploadIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, intlUploadText ? __jsx(FormattedMessage, {\n    id: intlUploadText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }) : __jsx(React.Fragment, null, __jsx(TextHighlighted, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, \"Drag/Upload\"), \" your file here\"))), thumbs && __jsx(ThumbsContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 18\n    }\n  }, thumbs));\n};\n\n_s(Uploader, \"Glw9pO4ZHoTu2G3/u1JqIOu9mgY=\", false, function () {\n  return [useDropzone];\n});\n\n_c = Uploader;\nexport default Uploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"Uploader\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/components/upload/upload.tsx"],"names":["React","useEffect","useState","useCallback","useDropzone","FormattedMessage","Text","TextHighlighted","Container","ThumbsContainer","Thumb","ThumbInner","Img","UploadIcon","Uploader","onChange","imageURL","intlUploadText","name","preview","files","setFiles","accept","multiple","onDrop","acceptedFiles","map","file","Object","assign","URL","createObjectURL","getRootProps","getInputProps","thumbs","forEach","revokeObjectURL"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { FormattedMessage } from 'react-intl';\nimport {\n  Text,\n  TextHighlighted,\n  Container,\n  ThumbsContainer,\n  Thumb,\n  ThumbInner,\n  Img,\n} from './upload.style';\nimport { UploadIcon } from 'assets/icons/UploadIcon';\n\nconst Uploader = ({ onChange, imageURL, intlUploadText }: any) => {\n  const [files, setFiles] = useState(\n    imageURL ? [{ name: 'demo', preview: imageURL }] : []\n  );\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    multiple: false,\n    onDrop: useCallback(\n      (acceptedFiles) => {\n        setFiles(\n          acceptedFiles.map((file) =>\n            Object.assign(file, {\n              preview: URL.createObjectURL(file),\n            })\n          )\n        );\n        onChange(acceptedFiles);\n      },\n      [onChange]\n    ),\n  });\n\n  const thumbs = files.map((file) => (\n    <Thumb key={file.name}>\n      <ThumbInner>\n        <Img src={file.preview} alt={file.name} />\n      </ThumbInner>\n    </Thumb>\n  ));\n\n  useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\n    },\n    [files]\n  );\n\n  return (\n    <section className=\"container uploader\">\n      <Container {...getRootProps()}>\n        <input {...getInputProps()} />\n        <UploadIcon />\n        <Text>\n          {intlUploadText ? (\n            <FormattedMessage id={intlUploadText} />\n          ) : (\n            <>\n              <TextHighlighted>Drag/Upload</TextHighlighted> your file here\n            </>\n          )}\n        </Text>\n      </Container>\n      {thumbs && <ThumbsContainer>{thumbs}</ThumbsContainer>}\n    </section>\n  );\n};\n\nexport default Uploader;\n"]},"metadata":{},"sourceType":"module"}