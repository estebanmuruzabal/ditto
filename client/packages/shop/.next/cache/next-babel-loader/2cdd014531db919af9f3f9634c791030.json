{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { fourRelaysOptions, manualModeOptions, DistanceMode, distanceModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, CardButtons, ActionButton, Text, Status, Type, Row, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { CheckMark } from 'assets/icons/CheckMark';\n\nvar DistanceSensor = function DistanceSensor(_ref) {\n  var _setting$logs;\n\n  var plant = _ref.plant,\n      settingType = _ref.settingType,\n      handleSettingsChange = _ref.handleSettingsChange,\n      onDeleteSchedule = _ref.onDeleteSchedule,\n      data = _ref.data,\n      openTab = _ref.openTab,\n      setOpenTab = _ref.setOpenTab,\n      handleDeleteSensor = _ref.handleDeleteSensor,\n      errorId = _ref.errorId;\n  var setting = plant.sensors.find(function (sensor) {\n    return sensor.settingType === settingType;\n  });\n  var intl = useIntl();\n\n  var _useState = useState(''),\n      daySelected = _useState[0],\n      setDay = _useState[1];\n\n  var _useState2 = useState(false),\n      editIsOn = _useState2[0],\n      setEditIsOn = _useState2[1];\n\n  var selectedMode = distanceModeOptions.find(function (option) {\n    return option.value === setting.mode;\n  });\n  var selectedManualState = manualModeOptions.find(function (option) {\n    return option.value === setting.relayOneWorking;\n  });\n  var relayOneSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayOneIdRelated;\n  });\n  var relayTwoSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayTwoIdRelated;\n  });\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '179.88px',\n        textAlign: 'left'\n      });\n    }\n  }; // const tabIsOpen = openTab === settingType;\n\n  var tabIsOpen = true;\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-time-schedule-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  return __jsx(PlantsSensorContainer, {\n    style: {\n      height: tabIsOpen ? '100%' : '82px'\n    },\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setOpenTab(tabIsOpen ? '' : settingType);\n    }\n  }, __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Type, {\n    bold: true\n  }, getSettingTypeText(setting === null || setting === void 0 ? void 0 : setting.settingType))), __jsx(ListDes, {\n    style: {\n      marginLeft: '-10px'\n    }\n  }, __jsx(CardButtons, {\n    className: \"button-wrapper\"\n  }, editIsOn ? __jsx(ActionButton, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setEditIsOn(!editIsOn);\n    },\n    className: \"edit-btn\"\n  }, __jsx(CheckMark, null)) : __jsx(ActionButton, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setEditIsOn(!editIsOn);\n    },\n    className: \"edit-btn\"\n  }, __jsx(PencilIcon, null)), __jsx(ActionButton, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      handleDeleteSensor(plant, settingType);\n    },\n    className: \"delete-btn\"\n  }, __jsx(CloseIcon, null))))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.NONE && !!openTab && __jsx(ListItem, null, __jsx(Status, null, __jsx(FormattedMessage, {\n    id: \"modoRequiredWarningText\",\n    defaultMessage: \"modoRequiredWarningText\"\n  }))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"distanceId\",\n    defaultMessage: \"distanceId\"\n  }))), __jsx(ListDes, null, __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.reading) > 0 && (setting === null || setting === void 0 ? void 0 : setting.reading) < 100 ? (setting === null || setting === void 0 ? void 0 : setting.reading) + 'cm.' : '-', \" \"))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"plantName\",\n    defaultMessage: \"plantName\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: setting.name,\n    placeholder: intl.formatMessage({\n      id: 'plantNameRequiredNameId',\n      defaultMessage: 'plantNameRequiredNameId'\n    }),\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'name', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\" // intlInputLabelId=\"profileEmailField\"\n\n  }) : __jsx(Text, {\n    bold: true\n  }, setting === null || setting === void 0 ? void 0 : setting.name))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"distanceModeId\",\n    defaultMessage: \"distanceModeId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'mode', e.value, settingType);\n    },\n    value: selectedMode // placeholder={'asdsad'}\n    ,\n    options: distanceModeOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(Text, {\n    bold: true\n  }, selectedMode.value.length > 1 ? selectedMode.label : '-'))), (setting === null || setting === void 0 ? void 0 : setting.mode) !== DistanceMode.NONE && __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"notifyChangesId\",\n    defaultMessage: \"notifyChangesId\"\n  }))), __jsx(ListDes, null, __jsx(Switch, {\n    disabled: (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MIN_WARNING || (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MAX_WARNING ? true : false,\n    checked: setting.whatsappWarningsOn || (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MIN_WARNING || (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MAX_WARNING,\n    labelPosition: 'right' // className,\n    ,\n    onUpdate: function onUpdate() {\n      return handleSettingsChange(plant, 'whatsappWarningsOn', !setting.whatsappWarningsOn, settingType);\n    }\n  }))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MIN_WARNING && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"minDistanceId\",\n    defaultMessage: \"minDistanceId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"minWarning\",\n    value: setting.minWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'minWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\")) : __jsx(Text, {\n    bold: true\n  }, setting.minWarning)), errorId === 'minWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  }))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MAX_WARNING && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"maxDistanceId\",\n    defaultMessage: \"maxDistanceId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"maxWarning\",\n    value: setting.maxWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'maxWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\")) : __jsx(Text, {\n    bold: true\n  }, setting.maxWarning), errorId === 'maxWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  })))), ((setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MIN_WARNING || (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MAX_WARNING) && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"timeWithoutNotice\",\n    defaultMessage: \"timeWithoutNotice\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"relayTwoAutomatedStartedTime\",\n    value: setting.relayTwoAutomatedStartedTime,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayTwoAutomatedStartedTime', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"mins\")) : __jsx(Text, {\n    bold: true\n  }, setting.relayTwoAutomatedStartedTime))), [DistanceMode.WHEN_FULL_ACTION_CUSTOM, DistanceMode.WHEN_FULL_ACTION_AUTOMATED].indexOf(setting.mode) >= 0 && __jsx(React.Fragment, null, (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.WHEN_FULL_ACTION_AUTOMATED && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"minDistanceId\",\n    defaultMessage: \"minDistanceId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"minWarning\",\n    value: setting.minWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'minWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\")) : __jsx(Text, {\n    bold: true\n  }, setting.minWarning)), errorId === 'minWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"maxDistanceId\",\n    defaultMessage: \"maxDistanceId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"maxWarning\",\n    value: setting.maxWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'maxWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\")) : __jsx(Text, {\n    bold: true\n  }, setting.maxWarning), errorId === 'maxWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  })))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.WHEN_FULL_ACTION_CUSTOM && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"runingMinMaxWarningTimeId\",\n    defaultMessage: \"runingMinMaxWarningTimeId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"relayOneAutomatedTimeToRun\",\n    value: setting.relayOneAutomatedTimeToRun,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneAutomatedTimeToRun', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"mins.\")) : __jsx(Text, {\n    bold: true\n  }, setting.relayOneAutomatedTimeToRun))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"asociateRelayTwoId\",\n    defaultMessage: \"asociateRelayTwoId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayTwoIdRelated', e.value, settingType);\n    },\n    value: relayTwoSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated) : '-')))), [DistanceMode.WHEN_EMPTY_ACTION_CUSTOM, DistanceMode.WHEN_EMPTY_ACTION_AUTOMATED].indexOf(setting.mode) >= 0 && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"minDistanceId\",\n    defaultMessage: \"minDistanceId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"minWarning\",\n    value: setting.minWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'minWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\")) : __jsx(Text, {\n    bold: true\n  }, setting.minWarning)), errorId === 'minWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  }))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.WHEN_EMPTY_ACTION_AUTOMATED && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"maxDistanceId\",\n    defaultMessage: \"maxDistanceId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"maxWarning\",\n    value: setting.maxWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'maxWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\")) : __jsx(Text, {\n    bold: true\n  }, setting.maxWarning), errorId === 'maxWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  })))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.WHEN_EMPTY_ACTION_CUSTOM && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"runingMinMaxWarningTimeId\",\n    defaultMessage: \"runingMinMaxWarningTimeId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"relayOneAutomatedTimeToRun\",\n    value: setting.relayOneAutomatedTimeToRun,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneAutomatedTimeToRun', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"mins.\")) : __jsx(Text, {\n    bold: true\n  }, setting.relayOneAutomatedTimeToRun))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"asociateRelayOneId\",\n    defaultMessage: \"asociateRelayOneId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType);\n    },\n    value: relayOneSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated) : '-')))), (setting === null || setting === void 0 ? void 0 : (_setting$logs = setting.logs) === null || _setting$logs === void 0 ? void 0 : _setting$logs.length) > 0 && __jsx(HumidityLogsGraph, {\n    data: setting.logs\n  }));\n};\n\nexport default DistanceSensor;","map":null,"metadata":{},"sourceType":"module"}