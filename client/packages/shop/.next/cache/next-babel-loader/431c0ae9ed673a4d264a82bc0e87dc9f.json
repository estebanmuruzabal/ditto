{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/components/upload/upload.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { FormattedMessage } from 'react-intl';\nimport { Text, TextHighlighted, Container, ThumbsContainer, Thumb, ThumbInner, Img } from './upload.style';\nimport { UploadIcon } from 'assets/icons/UploadIcon';\n\nconst Uploader = ({\n  onChange,\n  imageURL,\n  intlUploadText\n}) => {\n  const {\n    0: files,\n    1: setFiles\n  } = useState(imageURL ? [{\n    name: 'demo',\n    preview: imageURL\n  }] : []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    accept: 'image/*',\n    multiple: false,\n    onDrop: useCallback(acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n      onChange(acceptedFiles);\n    }, [onChange])\n  });\n  const thumbs = files.map(file => __jsx(Thumb, {\n    key: file.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, __jsx(ThumbInner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(Img, {\n    src: file.preview,\n    alt: file.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }))));\n  useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  return __jsx(\"section\", {\n    className: \"container uploader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(Container, _extends({}, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), __jsx(\"input\", _extends({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })), __jsx(UploadIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, intlUploadText ? __jsx(FormattedMessage, {\n    id: intlUploadText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }) : __jsx(React.Fragment, null, __jsx(TextHighlighted, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, \"Drag/Upload\"), \" your file here\"))), thumbs && __jsx(ThumbsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 18\n    }\n  }, thumbs));\n};\n\nexport default Uploader;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/components/upload/upload.tsx"],"names":["React","useEffect","useState","useCallback","useDropzone","FormattedMessage","Text","TextHighlighted","Container","ThumbsContainer","Thumb","ThumbInner","Img","UploadIcon","Uploader","onChange","imageURL","intlUploadText","files","setFiles","name","preview","getRootProps","getInputProps","accept","multiple","onDrop","acceptedFiles","map","file","Object","assign","URL","createObjectURL","thumbs","forEach","revokeObjectURL"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { FormattedMessage } from 'react-intl';\nimport {\n  Text,\n  TextHighlighted,\n  Container,\n  ThumbsContainer,\n  Thumb,\n  ThumbInner,\n  Img,\n} from './upload.style';\nimport { UploadIcon } from 'assets/icons/UploadIcon';\n\nconst Uploader = ({ onChange, imageURL, intlUploadText }: any) => {\n  const [files, setFiles] = useState(\n    imageURL ? [{ name: 'demo', preview: imageURL }] : []\n  );\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    multiple: false,\n    onDrop: useCallback(\n      (acceptedFiles) => {\n        setFiles(\n          acceptedFiles.map((file) =>\n            Object.assign(file, {\n              preview: URL.createObjectURL(file),\n            })\n          )\n        );\n        onChange(acceptedFiles);\n      },\n      [onChange]\n    ),\n  });\n\n  const thumbs = files.map((file) => (\n    <Thumb key={file.name}>\n      <ThumbInner>\n        <Img src={file.preview} alt={file.name} />\n      </ThumbInner>\n    </Thumb>\n  ));\n\n  useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\n    },\n    [files]\n  );\n\n  return (\n    <section className=\"container uploader\">\n      <Container {...getRootProps()}>\n        <input {...getInputProps()} />\n        <UploadIcon />\n        <Text>\n          {intlUploadText ? (\n            <FormattedMessage id={intlUploadText} />\n          ) : (\n            <>\n              <TextHighlighted>Drag/Upload</TextHighlighted> your file here\n            </>\n          )}\n        </Text>\n      </Container>\n      {thumbs && <ThumbsContainer>{thumbs}</ThumbsContainer>}\n    </section>\n  );\n};\n\nexport default Uploader;\n"]},"metadata":{},"sourceType":"module"}