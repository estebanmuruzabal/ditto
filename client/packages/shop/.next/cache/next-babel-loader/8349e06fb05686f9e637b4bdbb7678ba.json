{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Collapse, { Panel } from 'rc-collapse';\nimport { useIntl } from 'react-intl';\nimport { OrderListHeader, TrackID, Status, OrderMeta, Meta, CardWrapper, OrderDetail, DeliveryInfo, DeliveryAddress, Address, Contact, CostCalculation, PriceRow, Price, Text, OrderTable, LinkPickUp } from './order-card.style';\nimport { CURRENCY } from 'utils/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { DELIVERY_METHOD } from 'graphql/query/delivery';\nconst components = {\n  table: OrderTable\n};\n\nconst OrderCard = ({\n  onClick,\n  className,\n  columns,\n  progressData,\n  orders\n}) => {\n  var _deliverData$delivery;\n\n  //   const displayDetail = className === 'active' ? '100%' : '0';\n  const addAllClasses = ['accordion'];\n  const {\n    data: deliverData,\n    error: deliveryError,\n    loading: deliveryLoading,\n    refetch: deliveryRefetch\n  } = useQuery(DELIVERY_METHOD);\n  const intl = useIntl();\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  const getDeliverySchedule = details => {\n    if (!details) return '';\n    const word = 'Horario: ';\n    const index = details.indexOf(word); // 8\n\n    const length = word.length; // 7\n\n    return details.slice(index + length);\n  };\n\n  console.log(orders);\n  const deliveryMethods = deliverData === null || deliverData === void 0 ? void 0 : (_deliverData$delivery = deliverData.deliveryMethods) === null || _deliverData$delivery === void 0 ? void 0 : _deliverData$delivery.items;\n  return __jsx(React.Fragment, null, __jsx(Collapse, {\n    accordion: true,\n    className: addAllClasses.join(' '),\n    defaultActiveKey: \"active\",\n    expandIcon: () => {}\n  }, orders.map(order => {\n    const orderDeliveryMethod = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(method => method.id === (order === null || order === void 0 ? void 0 : order.delivery_method_id))[0];\n    const deliveryDateAndTime = `${order === null || order === void 0 ? void 0 : order.delivery_date} ${getDeliverySchedule(orderDeliveryMethod === null || orderDeliveryMethod === void 0 ? void 0 : orderDeliveryMethod.details)}`;\n    return __jsx(Panel, {\n      header: __jsx(CardWrapper, {\n        onClick: onClick\n      }, __jsx(OrderListHeader, null, __jsx(TrackID, null, intl.formatMessage({\n        id: 'order',\n        defaultMessage: 'Order'\n      }), \" \", __jsx(\"span\", null, \"  #\", order === null || order === void 0 ? void 0 : order.id.slice((order === null || order === void 0 ? void 0 : order.id.length) - 4, order === null || order === void 0 ? void 0 : order.id.length))), __jsx(Status, null, order.status)), __jsx(OrderMeta, null, __jsx(Meta, null, intl.formatMessage({\n        id: 'deliveryMethodTitle',\n        defaultMessage: 'Delivery Method:'\n      }), \" \", __jsx(\"span\", null, orderDeliveryMethod === null || orderDeliveryMethod === void 0 ? void 0 : orderDeliveryMethod.name)), (orderDeliveryMethod === null || orderDeliveryMethod === void 0 ? void 0 : orderDeliveryMethod.isPickUp) ? __jsx(React.Fragment, null, __jsx(Meta, null, intl.formatMessage({\n        id: 'deliveryTime',\n        defaultMessage: 'Delivery Time'\n      }), __jsx(\"span\", null, capitalizeFirstLetter(deliveryDateAndTime))), __jsx(Meta, null, intl.formatMessage({\n        id: 'deliveryLocationText',\n        defaultMessage: 'Delivery Location:'\n      }), __jsx(\"span\", null, (orderDeliveryMethod === null || orderDeliveryMethod === void 0 ? void 0 : orderDeliveryMethod.pickUpAddress.includes('http')) ? __jsx(LinkPickUp, {\n        href: orderDeliveryMethod === null || orderDeliveryMethod === void 0 ? void 0 : orderDeliveryMethod.pickUpAddress,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\"\n      }, \"Click/toque aqu\\xED\") : __jsx(Text, null, orderDeliveryMethod === null || orderDeliveryMethod === void 0 ? void 0 : orderDeliveryMethod.pickUpAddress)))) : __jsx(React.Fragment, null, __jsx(Meta, null, intl.formatMessage({\n        id: 'deliveryDateTitle',\n        defaultMessage: 'Delivery Date:'\n      }), __jsx(\"span\", null, capitalizeFirstLetter(deliveryDateAndTime))), __jsx(Meta, null, intl.formatMessage({\n        id: 'deliveryAddress',\n        defaultMessage: 'Delivery Address:'\n      }), \" \", __jsx(\"span\", null, order === null || order === void 0 ? void 0 : order.delivery_address))), __jsx(Meta, {\n        className: \"price\"\n      }, intl.formatMessage({\n        id: 'totalPrice',\n        defaultMessage: 'Total Price:'\n      }), __jsx(\"span\", null, CURRENCY, order.total)))),\n      headerClass: \"accordion-title\",\n      key: order.id\n    }, __jsx(OrderDetail, null, __jsx(DeliveryInfo, null, __jsx(DeliveryAddress, null, __jsx(\"h3\", null, intl.formatMessage({\n      id: 'productInfoDetailed',\n      defaultMessage: 'Purchased products details can be checked on a Desktop browser'\n    }))), __jsx(DeliveryAddress, null, __jsx(\"h3\", null, intl.formatMessage({\n      id: 'contactNumber',\n      defaultMessage: 'Contact Number'\n    })), __jsx(Contact, null, order.contact_number)), __jsx(DeliveryAddress, null, __jsx(\"h3\", null, intl.formatMessage({\n      id: 'deliveryAddress',\n      defaultMessage: 'Delivery Address'\n    })), __jsx(Address, null, order.delivery_address)), __jsx(CostCalculation, null, __jsx(PriceRow, null, \"Subtotal\", __jsx(Price, null, CURRENCY, order.sub_total)), __jsx(PriceRow, null, intl.formatMessage({\n      id: 'discount',\n      defaultMessage: 'Discount'\n    }), __jsx(Price, null, CURRENCY, order.discount || '0')), __jsx(PriceRow, {\n      className: \"grandTotal\"\n    }, \"Total\", __jsx(Price, null, CURRENCY, order.total))))));\n  })));\n};\n\nexport default OrderCard;","map":null,"metadata":{},"sourceType":"module"}