{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { usePrevious, useMeasure } from 'utils/hooks';\nimport { useSpring, animated } from 'react-spring';\nimport { Frame, Title, Content, Header } from './horizontal-menu.style';\nimport * as Icons from 'assets/icons/category-icons';\nimport { useMedia } from 'utils/use-media';\nimport Checkbox from 'components/checkbox/checkbox';\nconst Tree = React.memo(({\n  children,\n  name,\n  icon,\n  isOpen,\n  onClick,\n  depth,\n  defaultOpen = false\n}) => {\n  const previous = usePrevious(isOpen);\n  const [bind, {\n    height: viewHeight\n  }] = useMeasure();\n  const isMobile = useMedia('(max-width: 580px)');\n  const {\n    height,\n    opacity,\n    transform\n  } = useSpring({\n    from: {\n      height: 0,\n      opacity: 0,\n      transform: 'translate3d(20px,0,0)'\n    },\n    to: {\n      height: isOpen ? viewHeight : 0,\n      opacity: isOpen ? 1 : 0,\n      transform: `translate3d(${isOpen ? 0 : 20}px,0,0)`\n    }\n  });\n  const Icon = icon ? Icons[icon] : depth === 'child' ? Icons['Minus'] : null;\n  return __jsx(Frame, {\n    depth: depth,\n    isOpen: isOpen\n  }, depth === 'child' && __jsx(Checkbox, {\n    keyName: `${name}-id`,\n    isChecked: isOpen,\n    labelText: `${name}`,\n    id: `deliveryMethod-${name}`,\n    onChange: e => {\n      e.stopPropagation();\n      onClick();\n    }\n  }), __jsx(Header, {\n    open: isOpen,\n    depth: depth,\n    className: depth,\n    isMobile: true\n  }, depth !== 'child' && __jsx(Title, {\n    isMobile: true,\n    onClick: onClick\n  }, name)), __jsx(Content, {\n    style: {\n      opacity,\n      height: isOpen && previous === isOpen ? 'auto' : height\n    }\n  }, __jsx(animated.div, _extends({\n    style: {\n      transform,\n      display: depth === 'child' ? 'block' : 'flex',\n      flexDirection: depth === 'child' ? 'column' : 'column'\n    }\n  }, bind, {\n    children: children\n  }))));\n});\nexport const HorizontalMenu = ({\n  data,\n  className,\n  onClick,\n  active\n}) => {\n  const handler = children => {\n    return children === null || children === void 0 ? void 0 : children.map(subOption => {\n      if (subOption.parent_id) return;\n\n      if (!subOption.children) {\n        return __jsx(Tree, {\n          key: subOption.name,\n          name: subOption.name,\n          icon: subOption.icon,\n          depth: \"child\",\n          onClick: () => onClick(subOption.slug),\n          isOpen: active === subOption.slug\n        });\n      }\n\n      return __jsx(Tree, {\n        key: subOption.name,\n        name: subOption.name,\n        icon: subOption.icon,\n        depth: \"parent\",\n        onClick: () => onClick(subOption.slug) // onClick={() => subOption.children ? null : onClick(subOption.slug)}\n        ,\n        isOpen: active === subOption.slug || subOption.children.some(item => item.slug === active)\n      }, handler(subOption.children));\n    });\n  };\n\n  return __jsx(React.Fragment, null, handler(data));\n};","map":null,"metadata":{},"sourceType":"module"}