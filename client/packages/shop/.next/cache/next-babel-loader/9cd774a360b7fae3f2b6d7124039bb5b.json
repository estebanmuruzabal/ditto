{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ButtonsContainer, DayContainer, Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text, WeekContainer } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\nimport TimePicker from 'react-time-picker';\nimport { SettingsNames, WeekDays } from 'utils/constant';\nimport { UPDATE_SETTING } from 'graphql/query/plants.query'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required')\n  }),\n  handleSubmit: values => {// do submitting things\n  }\n});\n\nconst AddTimeSchedule = props => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: isSmartLightingOn,\n    1: isSmartLighting\n  } = useState(false);\n  const {\n    0: startTime,\n    1: startTimeChange\n  } = useState('00:00');\n  const {\n    0: endTime,\n    1: endTimeChange\n  } = useState('23:59');\n  const {\n    0: daysSelected,\n    1: setDaysSelected\n  } = useState([]);\n  const [updateSetting] = useMutation(UPDATE_SETTING);\n  const intl = useIntl();\n\n  const handleSettingsChange = (plant, field, value, settingName) => {\n    dispatch({\n      type: settingName,\n      payload: {\n        plant,\n        value,\n        field\n      }\n    });\n    dispatchSettingSave(plant, field, value, settingName);\n  };\n\n  const dispatchSettingSave = (plant, fieldName, fieldValue, settingName) => {\n    var _item$data, _item$data$getUser;\n\n    updateSetting({\n      variables: {\n        id: (_item$data = item.data) === null || _item$data === void 0 ? void 0 : (_item$data$getUser = _item$data.getUser) === null || _item$data$getUser === void 0 ? void 0 : _item$data$getUser.id,\n        controllerId: plant.controllerId,\n        input: _objectSpread(_objectSpread({\n          [fieldName]: fieldValue\n        }, plant[settingName]), {}, {\n          settingName: settingName\n        })\n      }\n    });\n  };\n\n  const handleSubmit = async () => {\n    const newSchedule = {\n      daysToRepeat: daysSelected,\n      startTime,\n      endTime,\n      enabled: true,\n      smartLight: isSmartLightingOn\n    };\n    setLoading(true); // if (isValid) {\n\n    switch (item.settingName) {\n      // si veo que no hay diferencias, sacamos el switch!!\n      case SettingsNames.LIGHT_SETTING:\n        item.plant[item.settingName].scheduledOnTimes = item.plant[item.settingName].scheduledOnTimes ? item.plant[item.settingName].scheduledOnTimes : [];\n        item.plant[item.settingName].scheduledOnTimes.push(newSchedule);\n        handleSettingsChange(item.plant, 'scheduledOnTimes', item.plant[item.settingName].scheduledOnTimes, item.settingName);\n        break;\n\n      case SettingsNames.SOIL_HUMIDITY_SETTING_1:\n        item.plant[item.settingName].scheduledOnTimes = item.plant[item.settingName].scheduledOnTimes ? item.plant[item.settingName].scheduledOnTimes : [];\n        item.plant[item.settingName].scheduledOnTimes.push(newSchedule);\n        handleSettingsChange(item.plant, 'scheduledOnTimes', item.plant[item.settingName].scheduledOnTimes, item.settingName);\n        break;\n\n      case SettingsNames.SOIL_HUMIDITY_SETTING_2:\n        item.plant[item.settingName].scheduledOnTimes = item.plant[item.settingName].scheduledOnTimes ? item.plant[item.settingName].scheduledOnTimes : [];\n        item.plant[item.settingName].scheduledOnTimes.push(newSchedule);\n        handleSettingsChange(item.plant, 'scheduledOnTimes', item.plant[item.settingName].scheduledOnTimes, item.settingName);\n        break;\n\n      default:\n        console.log('defaulted aca!!');\n        break;\n    }\n\n    closeModal();\n    setLoading(false); // }\n  };\n\n  const handleDaysAddition = day => {\n    const dayIndex = daysSelected.indexOf(day);\n    let newDaysSelectedArray = daysSelected;\n    dayIndex >= 0 ? newDaysSelectedArray.splice(dayIndex, 1) : newDaysSelectedArray.push(day);\n    setDaysSelected(newDaysSelectedArray);\n  };\n\n  return __jsx(Form, null, __jsx(PlantsSensorContainer, null, __jsx(Heading, null, __jsx(Heading, null, intl.formatMessage({\n    id: 'addTimeScheduleId',\n    defaultMessage: 'addTimeScheduleId'\n  }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"startTimeId\",\n    defaultMessage: \"startTimeId\"\n  }))), __jsx(ListDes, null, __jsx(TimePicker, {\n    onChange: e => startTimeChange(e),\n    value: startTime,\n    disableClock: true\n  }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"endTimeId\",\n    defaultMessage: \"endTimeId\"\n  }))), __jsx(ListDes, null, __jsx(TimePicker, {\n    onChange: e => endTimeChange(e),\n    value: endTime,\n    disableClock: true\n  }))), __jsx(WeekContainer, null, Object.keys(WeekDays).map((day, i) => {\n    return __jsx(DayContainer, {\n      key: i + '-day-container',\n      style: {\n        backgroundColor: daysSelected.indexOf(day) >= 0 ? '#b99c9c' : 'transparent'\n      },\n      onClick: () => handleDaysAddition(day)\n    }, day.substring(0, 3));\n  })), __jsx(ButtonsContainer, null, __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\" // style={{ width: '100%', height: '44px', marginTop: '200px' }}\n    ,\n    loader: __jsx(Loader, null),\n    isDisabled: loading,\n    isLoading: loading\n  }, __jsx(FormattedMessage, {\n    id: \"addTimeFrameId\",\n    defaultMessage: \"addTimeFrameId\"\n  })), __jsx(Button, {\n    onClick: () => closeModal(),\n    style: {\n      marginLeft: '20px'\n    },\n    loader: __jsx(Loader, null),\n    isDisabled: loading,\n    isLoading: loading\n  }, __jsx(FormattedMessage, {\n    id: \"cancelTimeFrameId\",\n    defaultMessage: \"cancelTimeFrameId\"\n  })))));\n};\n\nexport default FormEnhancer(AddTimeSchedule);","map":null,"metadata":{},"sourceType":"module"}