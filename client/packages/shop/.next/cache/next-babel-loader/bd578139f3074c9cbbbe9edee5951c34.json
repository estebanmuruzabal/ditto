{"ast":null,"code":"// import { useMemo } from 'react';\n// import {\n//   ApolloClient,\n//   HttpLink,\n//   ApolloLink,\n//   InMemoryCache,\n//   concat,\n// } from '@apollo/client';\n// let apolloClient;\n// const httpLink = new HttpLink({\n//   uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log('graphQLErrors', graphQLErrors);\n//     console.log('networkError', networkError);\n//   },\n// });\n// const authMiddleware = new ApolloLink((operation, forward) => {\n//   // add the authorization to the headers\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   operation.setContext({\n//     headers: {\n//       'x-access-token': token ? token : '',\n//     },\n//   });\n//   return forward(operation);\n// });\n// const client = new ApolloClient({\n//   link: authMiddleware.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n// console.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\n// function createApolloClient() {\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   return new ApolloClient({\n//     ssrMode: typeof window === 'undefined',\n//     link: new HttpLink({\n//       uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n//       credentials: 'same-origin', // Additional fetch() options like `credentials`\n//       headers: {\n//         'x-access-token': token ? token : '',\n//       }, // Additional fetch() options like `headers`\n//       onError: ({ networkError, graphQLErrors }) => {\n//         console.log('graphQLErrors', graphQLErrors);\n//         console.log('networkError', networkError);\n//       },\n//     }),\n//     cache: new InMemoryCache(),\n//   });\n// }\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? client;\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === 'undefined') return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n//   return _apolloClient;\n// }\n// export function useApollo(initialState) {\n//   const store = useMemo(() => initializeApollo(initialState), [initialState]);\n//   return store;\n// }\n// import { useMemo } from 'react';\n// import {ApolloClient, ApolloLink, HttpLink, InMemoryCache} from 'apollo-boost';\n// const httpLink = new HttpLink({\n//   uri: 'http://localhost:7000/api', // Server URL (must be absolute)\n//   credentials: 'same-origin', // Additional fetch() options like `credentials`\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log('graphQLErrors', graphQLErrors);\n//     console.log('networkError', networkError);\n//   },\n// });\n// const authLink = new ApolloLink((operation, forward) => {\n//   // Retrieve the authorization token from local storage.\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   // Use the setContext method to set the HTTP headers.\n//   operation.setContext({\n//     headers: {\n//       'x-access-token': token ? token : ''\n//     }\n//   });\n//   // Call the next link in the middleware chain.\n//   return forward(operation);\n// });\n// let apolloClient;\n// function createApolloClient() {\n//   return new ApolloClient({\n//     ssrMode: typeof window === 'undefined',\n//     link: authLink.concat(httpLink),\n//     cache: new InMemoryCache(),\n//   });\n// }\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? createApolloClient();\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === 'undefined') return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n//   return _apolloClient;\n// }\n// export function useApollo(initialState) {\n//   const store = useMemo(() => initializeApollo(initialState), [initialState]);\n//   return store;\n// }","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/utils/apollo.js"],"names":[],"mappingssourcesContent":["// import { useMemo } from 'react';\n\n// import {\n//   ApolloClient,\n//   HttpLink,\n//   ApolloLink,\n//   InMemoryCache,\n//   concat,\n// } from '@apollo/client';\n\n// let apolloClient;\n\n// const httpLink = new HttpLink({\n//   uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log('graphQLErrors', graphQLErrors);\n//     console.log('networkError', networkError);\n//   },\n// });\n\n// const authMiddleware = new ApolloLink((operation, forward) => {\n//   // add the authorization to the headers\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   operation.setContext({\n//     headers: {\n//       'x-access-token': token ? token : '',\n//     },\n//   });\n\n//   return forward(operation);\n// });\n\n// const client = new ApolloClient({\n//   link: authMiddleware.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n\n// console.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\n// function createApolloClient() {\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   return new ApolloClient({\n//     ssrMode: typeof window === 'undefined',\n//     link: new HttpLink({\n//       uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n//       credentials: 'same-origin', // Additional fetch() options like `credentials`\n//       headers: {\n//         'x-access-token': token ? token : '',\n//       }, // Additional fetch() options like `headers`\n//       onError: ({ networkError, graphQLErrors }) => {\n//         console.log('graphQLErrors', graphQLErrors);\n//         console.log('networkError', networkError);\n//       },\n//     }),\n//     cache: new InMemoryCache(),\n//   });\n// }\n\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? client;\n\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === 'undefined') return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n\n//   return _apolloClient;\n// }\n\n// export function useApollo(initialState) {\n//   const store = useMemo(() => initializeApollo(initialState), [initialState]);\n//   return store;\n// }\n\n\n\n// import { useMemo } from 'react';\n// import {ApolloClient, ApolloLink, HttpLink, InMemoryCache} from 'apollo-boost';\n// const httpLink = new HttpLink({\n//   uri: 'http://localhost:7000/api', // Server URL (must be absolute)\n//   credentials: 'same-origin', // Additional fetch() options like `credentials`\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log('graphQLErrors', graphQLErrors);\n//     console.log('networkError', networkError);\n//   },\n// });\n// const authLink = new ApolloLink((operation, forward) => {\n//   // Retrieve the authorization token from local storage.\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   // Use the setContext method to set the HTTP headers.\n//   operation.setContext({\n//     headers: {\n//       'x-access-token': token ? token : ''\n//     }\n//   });\n\n//   // Call the next link in the middleware chain.\n//   return forward(operation);\n// });\n\n// let apolloClient;\n// function createApolloClient() {\n//   return new ApolloClient({\n//     ssrMode: typeof window === 'undefined',\n//     link: authLink.concat(httpLink),\n//     cache: new InMemoryCache(),\n//   });\n// }\n\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? createApolloClient();\n\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === 'undefined') return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n\n//   return _apolloClient;\n// }\n\n// export function useApollo(initialState) {\n//   const store = useMemo(() => initializeApollo(initialState), [initialState]);\n//   return store;\n// }\n\n\n\n"]},"metadata":{},"sourceType":"script"}