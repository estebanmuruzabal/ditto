{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Col } from 'react-styled-flexboxgrid';\nimport { openModal } from '@redq/reuse-modal';\nimport RadioCard from 'components/radio-card/radio-card';\nimport { WorkContext } from 'contexts/work/work.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { DELETE_ADDRESS, SETPRIMARY_ADDRESS } from 'graphql/mutation/address';\nimport { UPDATE_USER, UPDATE_USER_WORK_INFO } from 'graphql/mutation/user';\nimport { CHANGE_PASSWORD } from 'graphql/mutation/changePassword';\nimport { DELETE_CARD } from 'graphql/mutation/card';\nimport { DELETE_PHONENUMBER, SETPRIMARY_PHONENUMBER } from 'graphql/mutation/phone';\nimport { SettingsForm, SettingsFormContent, HeadingSection, Title, Row, ButtonGroup } from './work.style';\nimport RadioGroupThree from 'components/radio-group/radio-group-three';\nimport { UPDATE_ME } from 'graphql/mutation/me';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label } from 'components/forms/label';\nimport Switch from 'components/switch/switch';\nimport moment from 'moment';\n\nconst WorkContent = ({\n  deviceType\n}) => {\n  var _state$workInfo, _state$workInfo2, _state$workInfo3, _state$workInfo4, _state$workInfo5, _state$workInfo7, _state$workInfo7$rate, _state$workInfo8, _state$workInfo9, _state$workInfo9$tota, _state$tasks;\n\n  const {\n    state,\n    dispatch\n  } = useContext(WorkContext);\n  const {\n    0: userinfoMsg,\n    1: setUserinfoMsg\n  } = useState('');\n  const {\n    0: isChambeanding,\n    1: setChamba\n  } = useState(false);\n  const {\n    0: passwordChangeMsg,\n    1: setPasswordChangeMsg\n  } = useState('');\n  const {\n    authState: {\n      isAuthenticated\n    },\n    authDispatch\n  } = React.useContext(AuthContext);\n  const [updateMeMutation] = useMutation(UPDATE_ME);\n  const [deletePaymentCardMutation] = useMutation(DELETE_CARD);\n  const [updateUserMutation] = useMutation(UPDATE_USER);\n  const [updateUserInfoMutation] = useMutation(UPDATE_USER_WORK_INFO);\n  const [changePasswordMutation] = useMutation(CHANGE_PASSWORD);\n  const [deletePhoneNumberMutation] = useMutation(DELETE_PHONENUMBER);\n  const [setprimaryPhoneNumberMutation] = useMutation(SETPRIMARY_PHONENUMBER);\n  const [setprimaryAddressMutation] = useMutation(SETPRIMARY_ADDRESS);\n  const [deleteAddressMutation] = useMutation(DELETE_ADDRESS);\n  const intl = useIntl();\n  const {\n    delivery_address,\n    card,\n    name,\n    email,\n    id,\n    phones\n  } = state;\n  console.log(state); // const handleChange = (isWorking) => {\n  //   const { value, name } = e.target;\n  //   dispatch({\n  //     type: isWorking ? 'HANDLE_WORK_START_CHANGE' : 'HANDLE_WORK_STOP_CHANGE',\n  //     payload: { value, field: name },\n  //   });\n  // };\n\n  const updateUserWorkInfoMutation = async logDescription => {\n    const {\n      workInfo,\n      id\n    } = state;\n    const {\n      isWorking,\n      startedWorkTime,\n      stoppedWorkTime,\n      ratePerHour,\n      totalWorkingMinutesPerWeek,\n      totalSalaryToPayWeekly,\n      advancedSalaryPaid,\n      taskRelated\n    } = workInfo;\n    await updateUserInfoMutation({\n      variables: {\n        id,\n        isWorking,\n        startedWorkTime,\n        stoppedWorkTime,\n        ratePerHour,\n        logDescription,\n        totalWorkingMinutesPerWeek,\n        totalSalaryToPayWeekly,\n        advancedSalaryPaid,\n        taskRelated,\n        role: state.role\n      }\n    });\n    setUserinfoMsg('Update user work info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  const stopWorking = () => {\n    const user = state;\n    if (!user.workInfo) user.workInfo = {};\n    user.workInfo.isWorking = false;\n    user.workInfo.stoppedWorkTime = new Date().toLocaleString('en-US', {\n      timeZone: 'America/Argentina/Buenos_Aires'\n    });\n    const startedWorkTime = moment(new Date(user.workInfo.startedWorkTime));\n    const stoppedWorkTime = moment(new Date(user.workInfo.stoppedWorkTime));\n    const workedInMinutes = stoppedWorkTime.diff(startedWorkTime, 'minutes');\n    const ratePerMinute = user.workInfo.ratePerHour / 60;\n    user.workInfo.totalWorkingMinutesPerWeek += workedInMinutes;\n    user.workInfo.totalSalaryToPayWeekly = Number(user.workInfo.totalWorkingMinutesPerWeek) * Number(ratePerMinute) - Number(user.workInfo.advancedSalaryPaid); // user.logs.push({\n    //   logDescription: ,\n    //   timestamp: new Date().toLocaleString('en-US', { timeZone: 'America/Argentina/Buenos_Aires' })\n    // });\n\n    dispatch({\n      type: 'HANDLE_WORK_CHANGE',\n      payload: {\n        workInfo: user.workInfo,\n        logs: user.logs\n      }\n    });\n    updateUserWorkInfoMutation(`finished working.`);\n  };\n\n  const startWorking = () => {\n    const user = state;\n    if (!user.workInfo) user.workInfo = {};\n    user.workInfo.isWorking = true;\n    user.workInfo.startedWorkTime = new Date().toLocaleString('en-US', {\n      timeZone: 'America/Argentina/Buenos_Aires'\n    });\n    user.workInfo.stoppedWorkTime = null;\n    user.workInfo.ratePerHour = 300; // user.logs.push({\n    //   logDescription: ,\n    //   timestamp: new Date().toLocaleString('en-US', { timeZone: 'America/Argentina/Buenos_Aires' })\n    // })\n\n    dispatch({\n      type: 'HANDLE_WORK_CHANGE',\n      payload: {\n        workInfo: user.workInfo,\n        logs: user.logs\n      }\n    });\n    updateUserWorkInfoMutation(`started working.`);\n  };\n\n  const handleChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch({\n      type: 'HANDLE_ON_INPUT_CHANGE',\n      payload: {\n        value,\n        field: name\n      }\n    });\n  }; // Add or edit modal\n\n\n  const handleModal = (modalComponent, modalProps = {}, className = 'add-address-modal') => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  console.log(\"working info changed:\", state.workInfo);\n  const h = ((_state$workInfo = state.workInfo) === null || _state$workInfo === void 0 ? void 0 : _state$workInfo.totalWorkingMinutesPerWeek) / 60 | 0;\n  const m = ((_state$workInfo2 = state.workInfo) === null || _state$workInfo2 === void 0 ? void 0 : _state$workInfo2.totalWorkingMinutesPerWeek) % 60 | 0;\n  const subtotalSalario = Number((_state$workInfo3 = state.workInfo) === null || _state$workInfo3 === void 0 ? void 0 : _state$workInfo3.totalWorkingMinutesPerWeek) / 60 * Number((_state$workInfo4 = state.workInfo) === null || _state$workInfo4 === void 0 ? void 0 : _state$workInfo4.ratePerHour);\n  return __jsx(SettingsForm, null, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"workPageTitle\",\n    defaultMessage: \"Ditto Farm\"\n  }))), __jsx(Col, {\n    style: {\n      alignItems: 'flex-end',\n      marginBottom: '50px'\n    }\n  }, __jsx(Row, {\n    style: {\n      marginBottom: '15px'\n    }\n  }, __jsx(Switch, {\n    label: `Usted se encuentra: ${((_state$workInfo5 = state.workInfo) === null || _state$workInfo5 === void 0 ? void 0 : _state$workInfo5.isWorking) ? 'Chambeando' : 'Vagando'}`,\n    disabled: false,\n    labelPosition: 'right' // className,\n    ,\n    onUpdate: () => {\n      var _state$workInfo6;\n\n      return ((_state$workInfo6 = state.workInfo) === null || _state$workInfo6 === void 0 ? void 0 : _state$workInfo6.isWorking) ? stopWorking() : startWorking();\n    } // style\n\n  })), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"profileNameField\",\n    defaultMessage: \"Your Name\"\n  })), __jsx(Label, null, state.name)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"workedHours\",\n    defaultMessage: \"workedHours\"\n  })), __jsx(Label, null, `${h}:${Number(m) >= 9 ? m : '0' + m} hs`)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"salaryPerHour\",\n    defaultMessage: \"salaryPerHour\"\n  })), __jsx(Label, null, `$${((_state$workInfo7 = state.workInfo) === null || _state$workInfo7 === void 0 ? void 0 : (_state$workInfo7$rate = _state$workInfo7.ratePerHour) === null || _state$workInfo7$rate === void 0 ? void 0 : _state$workInfo7$rate.toFixed(2)) || '-'}`)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"subtotalSalary\",\n    defaultMessage: \"Salary Subtotal\"\n  })), __jsx(Label, null, `$${subtotalSalario}`)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"advancedSalaryPaid\",\n    defaultMessage: \"advancedSalaryPaid\"\n  })), __jsx(Label, null, `$${(_state$workInfo8 = state.workInfo) === null || _state$workInfo8 === void 0 ? void 0 : _state$workInfo8.advancedSalaryPaid}`)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"totalSalaryToPayWeekly\",\n    defaultMessage: \"totalSalaryToPayWeekly\"\n  })), __jsx(Label, null, `$${((_state$workInfo9 = state.workInfo) === null || _state$workInfo9 === void 0 ? void 0 : (_state$workInfo9$tota = _state$workInfo9.totalSalaryToPayWeekly) === null || _state$workInfo9$tota === void 0 ? void 0 : _state$workInfo9$tota.toFixed(2)) || '-'}`)), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"todoTasks\",\n    defaultMessage: \"todoTasks\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroupThree, {\n    items: state === null || state === void 0 ? void 0 : state.tasks,\n    component: (task, index) => __jsx(RadioCard, {\n      id: index,\n      key: index,\n      title: task.description,\n      content: task.description,\n      checked: task.isDone,\n      onChange: e => handleChange(e),\n      name: \"contact\" // onEdit={() => handleEditDelete(item, index, 'edit', 'contact')}\n      // onDelete={() =>\n      //   handleEditDelete(item, index, 'delete', 'contact')\n      // }\n\n    })\n  }))))), __jsx(Row, null, state === null || state === void 0 ? void 0 : (_state$tasks = state.tasks) === null || _state$tasks === void 0 ? void 0 : _state$tasks.map(task => {\n    return __jsx(Row, null, __jsx(Label, null, \"-\", task.description), __jsx(Label, null, task.startDate), __jsx(Label, null, task.finishDate), __jsx(Label, null, task.isDone));\n  })))));\n};\n\nexport default WorkContent;","map":null,"metadata":{},"sourceType":"module"}