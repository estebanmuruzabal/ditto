{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport { FormattedMessage } from 'react-intl';\nimport Select from 'react-select';\nimport { SettingsNames, WeekDays, fourRelaysOptions, manualModeOptions, lightModeOptions, LightSensorModes } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';\n\nvar LightSensor = function LightSensor(_ref) {\n  var _setting$relayOneIdRe, _setting$relayOneIdRe2, _setting$scheduledOnT;\n\n  var plant = _ref.plant,\n      settingName = _ref.settingName,\n      handleSettingsChange = _ref.handleSettingsChange,\n      onDeleteSchedule = _ref.onDeleteSchedule,\n      data = _ref.data,\n      openTab = _ref.openTab,\n      setOpenTab = _ref.setOpenTab;\n  var setting = plant[settingName];\n\n  var _useState = useState(''),\n      daySelected = _useState[0],\n      setDay = _useState[1];\n\n  var selectedMode = lightModeOptions.find(function (option) {\n    return option.value === setting.mode;\n  });\n  var selectedManualState = manualModeOptions.find(function (option) {\n    return option.value === setting.relayOneWorking;\n  });\n  var relayOneSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayOneIdRelated;\n  });\n  var relayTwoSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayTwoIdRelated;\n  });\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '197px',\n        textAlign: 'left'\n      });\n    }\n  };\n  var tabIsOpen = openTab === settingName;\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-time-schedule-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  return __jsx(PlantsSensorContainer, {\n    style: {\n      height: tabIsOpen ? '100%' : '66px'\n    },\n    onClick: function onClick() {\n      return setOpenTab(tabIsOpen ? '' : settingName);\n    }\n  }, __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"lightId\",\n    defaultMessage: \"lightId\"\n  }))), __jsx(ListDes, {\n    style: {\n      marginLeft: '10px'\n    }\n  }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.light, \" % \", (plant === null || plant === void 0 ? void 0 : plant.light) < 40 ? '🌙' : '☀️'))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"manualModeStateId\",\n    defaultMessage: \"manualModeStateId\"\n  }))), __jsx(ListDes, {\n    style: {\n      marginLeft: '10px'\n    }\n  }, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: setting.relayOneWorking ? 'manualModeStateOnId' : 'manualModeStateOffId',\n    defaultMessage: \"noDefaultOnOffMsg\"\n  })))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"lightModeId\",\n    defaultMessage: \"lightModeId\"\n  }))), __jsx(ListDes, null, __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'mode', e.value, SettingsNames.LIGHT_SETTING);\n    },\n    value: selectedMode,\n    options: lightModeOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }))), ((setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.MANUAL || (setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.SCHEDULE || (setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.SMART_SCHEDULE) && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: ((_setting$relayOneIdRe = setting.relayOneIdRelated) === null || _setting$relayOneIdRe === void 0 ? void 0 : _setting$relayOneIdRe.length) ? 'asociatedRelayId' : 'asociateRelayId',\n    defaultMessage: ((_setting$relayOneIdRe2 = setting.relayOneIdRelated) === null || _setting$relayOneIdRe2 === void 0 ? void 0 : _setting$relayOneIdRe2.length) ? 'asociatedRelayId' : 'asociateRelayId'\n  }))), __jsx(ListDes, null, __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneIdRelated', e.value, SettingsNames.LIGHT_SETTING);\n    },\n    value: relayOneSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }))), setting.mode === LightSensorModes.MANUAL && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"manualModeStateId\",\n    defaultMessage: \"manualModeStateId\"\n  }))), __jsx(ListDes, null, __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneWorking', e.value, SettingsNames.LIGHT_SETTING);\n    },\n    value: selectedManualState,\n    options: manualModeOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  })))), (setting.mode === LightSensorModes.SCHEDULE || setting.mode === LightSensorModes.SMART_SCHEDULE) && __jsx(React.Fragment, null, __jsx(WeekContainer, null, Object.keys(WeekDays).map(function (day, i) {\n    return __jsx(DayContainer, {\n      key: i + '-day-container',\n      style: {\n        backgroundColor: daySelected === day ? '#E6E6E6' : 'transparent'\n      },\n      onClick: function onClick() {\n        return setDay(day);\n      }\n    }, day.substring(0, 3));\n  })), setting === null || setting === void 0 ? void 0 : (_setting$scheduledOnT = setting.scheduledOnTimes) === null || _setting$scheduledOnT === void 0 ? void 0 : _setting$scheduledOnT.map(function (schedule, i) {\n    return __jsx(WeekContainer, {\n      key: i + '-days-to-repeat-2'\n    }, schedule.daysToRepeat.includes(daySelected) ? __jsx(ScheduleTime, null, __jsx(TextSpaced, null, __jsx(FormattedMessage, {\n      id: \"startTimeId\",\n      defaultMessage: \"startTimeId\"\n    })), \" \", __jsx(TextSpaced, null, schedule.startTime), __jsx(TextSpaced, null, __jsx(FormattedMessage, {\n      id: \"endTimeId\",\n      defaultMessage: \"endTimeId\"\n    })), \" \", __jsx(TextSpaced, null, schedule.endTime), __jsx(CardButtons, {\n      className: \"button-wrapper\"\n    }, __jsx(ActionButton, {\n      onClick: function onClick() {\n        var _data$getUser;\n\n        return handleModal(AddTimeSchedule, {\n          settingName: SettingsNames.LIGHT_SETTING,\n          plant: plant,\n          id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id\n        });\n      },\n      className: \"edit-btn\"\n    }, __jsx(PencilIcon, null)), __jsx(ActionButton, {\n      onClick: function onClick() {\n        return onDeleteSchedule(plant, SettingsNames.LIGHT_SETTING, i);\n      },\n      className: \"delete-btn\"\n    }, __jsx(CloseIcon, null)))) : __jsx(ScheduleTime, {\n      style: {\n        border: '0px',\n        height: '42px'\n      }\n    }));\n  }), __jsx(Button, {\n    size: \"small\",\n    variant: \"outlined\",\n    type: \"button\",\n    className: \"add-button\",\n    onClick: function onClick() {\n      var _data$getUser2;\n\n      return handleModal(AddTimeSchedule, {\n        settingName: SettingsNames.LIGHT_SETTING,\n        plant: plant,\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id\n      });\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addTimeScheduleId\",\n    defaultMessage: \"addTimeScheduleId\"\n  })), (setting === null || setting === void 0 ? void 0 : setting.logs.length) > 0 && __jsx(HumidityLogsGraph, {\n    data: setting.logs\n  })));\n};\n\nexport default LightSensor;","map":null,"metadata":{},"sourceType":"module"}