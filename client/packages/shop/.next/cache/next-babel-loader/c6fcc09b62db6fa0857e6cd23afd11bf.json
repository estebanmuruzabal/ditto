{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/ditto-market/ditto-market.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useRef, useEffect, useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantsPageContainer, PlantPageWrapper } from './ditto-market.style';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context'; // import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\n// import { GeolocateControl } from \"mapbox-gl\";\n\nimport Map, { GeolocateControl } from 'react-map-gl';\n\nvar DittoMarket = function DittoMarket(_ref) {\n  _s();\n\n  var deviceType = _ref.deviceType,\n      userRefetch = _ref.userRefetch;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useContext2 = useContext(AuthContext),\n      authDispatch = _useContext2.authDispatch;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      _useQuery$data = _useQuery.data,\n      data = _useQuery$data === void 0 ? {} : _useQuery$data;\n\n  var geoControlRef = useRef();\n  useEffect(function () {\n    var _geoControlRef$curren;\n\n    // Activate as soon as the control is loaded\n    (_geoControlRef$curren = geoControlRef.current) === null || _geoControlRef$curren === void 0 ? void 0 : _geoControlRef$curren.trigger();\n  }, [geoControlRef.current]);\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n  return __jsx(PlantPageWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(Map, {\n    mapboxAccessToken: \"pk.eyJ1IjoiZXN0ZWJhbm11cnV6YWJhbCIsImEiOiJjbG4ybGZzYmcwMWQwMmlvMDVrbHhheno3In0.EZPhoOcmHwM3BFhGkrQ2-A\",\n    initialViewState: {\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    },\n    mapStyle: \"mapbox://styles/mapbox/streets-v9\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(GeolocateControl, {\n    ref: geoControlRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(DittoMarket, \"QVJ257bk+ISD8KGHwvcu95Awq/s=\", false, function () {\n  return [useQuery];\n});\n\n_c = DittoMarket;\nexport default DittoMarket;\n\nvar _c;\n\n$RefreshReg$(_c, \"DittoMarket\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/ditto-market/ditto-market.tsx"],"names":["React","useRef","useEffect","useContext","useQuery","ErrorMessage","PlantsPageContainer","PlantPageWrapper","GET_LOGGED_IN_USER","ProfileContext","AuthContext","Map","GeolocateControl","DittoMarket","deviceType","userRefetch","state","dispatch","authDispatch","notifyOnNetworkStatusChange","fetchPolicy","loading","error","data","geoControlRef","current","trigger","message","width","longitude","latitude","zoom"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,UAA3B,QAA4C,OAA5C;AAEA,SAAsBC,QAAtB,QAAsC,qBAAtC;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SACEC,mBADF,EAEEC,gBAFF,QAGO,sBAHP;AAKA,SAASC,kBAAT,QAAgE,8BAAhE;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,WAAT,QAA4B,4BAA5B,C,CACA;AACA;;AACA,OAAOC,GAAP,IAAaC,gBAAb,QAAoC,cAApC;;AAaA,IAAMC,WAAuC,GAAG,SAA1CA,WAA0C,OAAiC;AAAA;;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,oBACnDZ,UAAU,CAACM,cAAD,CADyC;AAAA,MACvEO,KADuE,eACvEA,KADuE;AAAA,MAChEC,QADgE,eAChEA,QADgE;;AAAA,qBAExDd,UAAU,CAAMO,WAAN,CAF8C;AAAA,MAExEQ,YAFwE,gBAExEA,YAFwE;;AAAA,kBAIzCd,QAAQ,CAACI,kBAAD,EAAqB;AACjEW,IAAAA,2BAA2B,EAAE,IADoC;AAEjEC,IAAAA,WAAW,EAAE,cAFoD,CAGjE;;AAHiE,GAArB,CAJiC;AAAA,MAIvEC,OAJuE,aAIvEA,OAJuE;AAAA,MAI9DC,KAJ8D,aAI9DA,KAJ8D;AAAA,iCAIvDC,IAJuD;AAAA,MAIvDA,IAJuD,+BAIhD,EAJgD;;AAS/E,MAAMC,aAAa,GAAGvB,MAAM,EAA5B;AAEAC,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd;AACA,6BAAAsB,aAAa,CAACC,OAAd,gFAAuBC,OAAvB;AACD,GAHQ,EAGN,CAACF,aAAa,CAACC,OAAf,CAHM,CAAT;;AAKA,MAAIJ,OAAJ,EAAa;AACX,WAAO,MAAC,YAAD;AAAc,MAAA,OAAO,EAAE,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAAA;;AAED,MAAIC,KAAJ,EAAW;AACT,WACE,MAAC,YAAD;AAAc,MAAA,OAAO,EAAEA,KAAK,CAACK,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAAA;AAED,SACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAqB,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AACE,IAAA,iBAAiB,EAAC,uGADpB;AAEE,IAAA,gBAAgB,EAAE;AAChBC,MAAAA,SAAS,EAAE,CAAC,GADI;AAEhBC,MAAAA,QAAQ,EAAE,EAFM;AAGhBC,MAAAA,IAAI,EAAE;AAHU,KAFpB;AAOE,IAAA,QAAQ,EAAC,mCAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,MAAC,gBAAD;AAAkB,IAAA,GAAG,EAAEP,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF,CADF,CADF;AAiBD,CA3CD;;GAAMX,W;UAIkCT,Q;;;KAJlCS,W;AA6CN,eAAeA,WAAf","sourcesContent":["import * as React from 'react';\nimport {useRef, useEffect, useContext} from 'react';\nimport Link from 'next/link';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport ErrorMessage from 'components/error-message/error-message';\n\nimport {\n  PlantsPageContainer,\n  PlantPageWrapper,\n} from './ditto-market.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER, GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\n// import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\n// import { GeolocateControl } from \"mapbox-gl\";\nimport Map, {GeolocateControl} from 'react-map-gl';\ntype DittoMarketProps = {\n  data?: any;\n  userRefetch: any;\n  index?: Number;\n  Router?: any;\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst DittoMarket: React.FC<DittoMarketProps> = ({ deviceType, userRefetch }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const {authDispatch} = useContext<any>(AuthContext);\n\n  const { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    // pollInterval: 5000,\n  });\n  const geoControlRef = useRef<mapboxgl.GeolocateControl>();\n\n  useEffect(() => {\n    // Activate as soon as the control is loaded\n    geoControlRef.current?.trigger();\n  }, [geoControlRef.current]);\n\n  if (loading) {\n    return <ErrorMessage message={'Cargando...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  return (\n    <PlantPageWrapper>\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <Map\n          mapboxAccessToken=\"pk.eyJ1IjoiZXN0ZWJhbm11cnV6YWJhbCIsImEiOiJjbG4ybGZzYmcwMWQwMmlvMDVrbHhheno3In0.EZPhoOcmHwM3BFhGkrQ2-A\"\n          initialViewState={{\n            longitude: -100,\n            latitude: 40,\n            zoom: 3.5\n          }}\n          mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n        >\n          <GeolocateControl ref={geoControlRef} />\n        </Map>\n      </PlantsPageContainer>\n    </PlantPageWrapper>\n  );\n};\n\nexport default DittoMarket;\n"]},"metadata":{},"sourceType":"module"}