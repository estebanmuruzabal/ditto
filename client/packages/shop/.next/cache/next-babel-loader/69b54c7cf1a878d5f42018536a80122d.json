{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/address-card/address-card-two.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_ADDRESS, UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './address-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    const ID = props.item.id;\n    const addressItem = props.item.item;\n    return {\n      id: ID || null,\n      addressId: addressItem.id || null,\n      title: addressItem.title || '',\n      address: addressItem.address || '',\n      instructions: addressItem.instructions || '',\n      location: addressItem.location || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    title: Yup.string().required('Required!'),\n    address: Yup.string().required('Required'),\n    location: Yup.string().required('Required')\n  }),\n  handleSubmit: values => {// do submitting things\n  }\n});\n\nconst UpdateAddressTwo = props => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting\n  } = props;\n  const ID = item.id;\n  let newAddressid = null;\n  const addressItem = item.item;\n  const addressValue = {\n    id: ID,\n    addressId: addressItem.id,\n    title: values.title,\n    address: values.address,\n    location: values.location,\n    instructions: values.instructions,\n    is_primary: true\n  };\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const intl = useIntl();\n  const [updateAddressMutation] = useMutation(UPDATE_ADDRESS);\n  const [addAddressMutation] = useMutation(ADD_ADDRESS);\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      const {\n        id,\n        addressId,\n        title,\n        address,\n        location,\n        instructions\n      } = addressValue;\n\n      if (Object.keys(addressItem).length === 0) {\n        const {\n          data\n        } = await addAddressMutation({\n          variables: {\n            id,\n            title,\n            address,\n            location,\n            instructions\n          }\n        });\n        newAddressid = data.addDeliveryAddress.id;\n        addressValue.id = data.addDeliveryAddress.id;\n        dispatch({\n          type: 'ADD_ADDRESS',\n          payload: addressValue\n        });\n        closeModal();\n      } else {\n        const updateAddressData = await updateAddressMutation({\n          variables: {\n            id,\n            addressId,\n            title,\n            address,\n            location,\n            instructions\n          }\n        });\n        dispatch({\n          type: 'UPDATE_ADDRESS',\n          payload: {\n            value: addressValue,\n            id: addressItem.id\n          }\n        });\n        closeModal();\n      }\n    }\n  };\n\n  return __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, intl.formatMessage({\n    id: (addressItem === null || addressItem === void 0 ? void 0 : addressItem.id) ? 'editAddressId' : 'addNewAddressId',\n    defaultMessage: 'Address name'\n  })), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"title\",\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'addressRefId',\n      defaultMessage: 'Address name'\n    }),\n    error: touched.title && errors.title,\n    value: values.title,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"address\",\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'addressId',\n      defaultMessage: 'Address'\n    }),\n    error: touched.address && errors.address,\n    value: values.address,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"location\",\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'locationId',\n      defaultMessage: 'Localidad'\n    }),\n    error: touched.location && errors.location,\n    value: values.location,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    onChange: e => setPlantName(e.target.value),\n    placeholder: intl.formatMessage({\n      id: 'plantNamePlaceholderId',\n      defaultMessage: 'Balcony plants'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }), __jsx(TextField, {\n    id: \"instructions\",\n    as: \"textarea\",\n    placeholder: intl.formatMessage({\n      id: 'instructionsId',\n      defaultMessage: 'Delivery instructions'\n    }),\n    error: touched.instructions && errors.instructions,\n    value: values.instructions,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    style: {\n      width: '100%',\n      height: '44px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedAddressId\",\n    defaultMessage: \"Save Address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default FormEnhancer(UpdateAddressTwo);","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/address-card/address-card-two.tsx"],"names":["React","useContext","Yup","withFormik","Form","closeModal","TextField","Button","useMutation","ADD_ADDRESS","UPDATE_ADDRESS","FieldWrapper","Heading","ProfileContext","FormattedMessage","useIntl","FormEnhancer","mapPropsToValues","props","ID","item","id","addressItem","addressId","title","address","instructions","location","validationSchema","object","shape","string","required","handleSubmit","values","UpdateAddressTwo","isValid","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","newAddressid","addressValue","is_primary","state","dispatch","intl","updateAddressMutation","addAddressMutation","Object","keys","length","data","variables","addDeliveryAddress","type","payload","updateAddressData","value","formatMessage","defaultMessage","name","e","setPlantName","target","width","height"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_ADDRESS, UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './address-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n// Shape of form values\ninterface FormValues {\n  id: any | null;\n  addressId: any | null,\n  title: string;\n  address: string;\n  location?: string;\n  instructions?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n  id?: any | null;\n}\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: (props) => {\n    const ID = props.item.id;\n    const addressItem = props.item.item;\n    return {\n      id: ID || null,\n      addressId: addressItem.id || null,\n      title: addressItem.title || '',\n      address: addressItem.address || '',\n      instructions: addressItem.instructions || '',\n      location: addressItem.location || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    title: Yup.string().required('Required!'),\n    address: Yup.string().required('Required'),\n    location: Yup.string().required('Required'),\n  }),\n  handleSubmit: (values) => {\n    // do submitting things\n  },\n});\n\nconst UpdateAddressTwo = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n\n    handleReset,\n    isSubmitting,\n  } = props;\n  const ID = item.id;\n  let newAddressid = null;\n  const addressItem = item.item;\n  const addressValue = {\n    id: ID,\n    addressId: addressItem.id, \n    title: values.title,\n    address: values.address,\n    location: values.location,\n    instructions: values.instructions,\n    is_primary: true\n  };\n  const { state, dispatch } = useContext(ProfileContext);\n  const intl = useIntl();\n\n  const [updateAddressMutation] = useMutation(UPDATE_ADDRESS);\n  const [addAddressMutation] = useMutation(ADD_ADDRESS);\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      const {id, addressId, title, address, location, instructions} = addressValue;\n      if (Object.keys(addressItem).length === 0) {\n        const {data}  = await addAddressMutation({\n          variables: { \n            id,\n            title,\n            address, \n            location,\n            instructions\n           },\n        });\n        newAddressid = data.addDeliveryAddress.id;\n        addressValue.id = data.addDeliveryAddress.id;\n        dispatch({\n          type: 'ADD_ADDRESS',\n          payload: addressValue \n        });\n        closeModal();\n      }else{\n        const updateAddressData = await updateAddressMutation({\n          variables: { \n            id,\n            addressId,\n            title,\n            address, \n            location,\n            instructions\n           }\n        });\n        dispatch({\n          type: 'UPDATE_ADDRESS',\n          payload: { value: addressValue, id: addressItem.id }\n\n        });\n        closeModal();\n      }\n    }\n  };\n  return (\n    <Form>\n      <Heading>{intl.formatMessage({ id: addressItem?.id ? 'editAddressId' : 'addNewAddressId', defaultMessage: 'Address name' })}</Heading>\n      <FieldWrapper>\n        <TextField\n          id=\"title\"\n          type=\"text\"\n          placeholder={intl.formatMessage({ id: 'addressRefId', defaultMessage: 'Address name' })}\n          error={touched.title && errors.title}\n          value={values.title}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n      <FieldWrapper>\n        <TextField\n          id=\"address\"\n          type=\"text\"\n          placeholder={intl.formatMessage({ id: 'addressId', defaultMessage: 'Address' })}\n          error={touched.address && errors.address}\n          value={values.address}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n      <FieldWrapper>\n        <TextField\n          id=\"location\"\n          type=\"text\"\n          placeholder={intl.formatMessage({ id: 'locationId', defaultMessage: 'Localidad' })}\n          error={touched.location && errors.location}\n          value={values.location}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n      <FieldWrapper>\n      <Input\n              type='text'\n              name='name'\n              value={name}\n              onChange={(e) => setPlantName(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'plantNamePlaceholderId', defaultMessage: 'Balcony plants' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n        <TextField\n          id=\"instructions\"\n          as=\"textarea\"\n          placeholder={intl.formatMessage({ id: 'instructionsId', defaultMessage: 'Delivery instructions' })}\n          error={touched.instructions && errors.instructions}\n          value={values.instructions}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n\n      <Button\n        onClick={handleSubmit}\n        type=\"submit\"\n        style={{ width: '100%', height: '44px' }}\n      >\n        <FormattedMessage id=\"savedAddressId\" defaultMessage=\"Save Address\" />\n      </Button>\n    </Form>\n  );\n};\n\nexport default FormEnhancer(UpdateAddressTwo);\n"]},"metadata":{},"sourceType":"module"}