{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { closeModal } from '@redq/reuse-modal';\nimport { useIntl } from 'react-intl';\nimport { getCookie, setCookie } from 'utils/session';\nvar googleApiKey = process.env.GOOGLE_API_KEY;\nexport default function LocationModal(_ref) {\n  var isPickUp = _ref.isPickUp;\n\n  // Your existing state variables and functions here\n  var _useState = useState(\"\"),\n      address = _useState[0],\n      setAddress = _useState[1];\n\n  var intl = useIntl(); // Handle place selection\n  // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: \"YOUR_API_KEY\"\n  // })\n  // const handleSelect = async (address) => {\n  //   console.log('address',address)\n  //   setAddress(address);\n  //   const results = await geocodeByAddress(address);\n  //   const latLng = await getLatLng(results[0]);\n  // };\n\n  var handleZipCode = function handleZipCode() {\n    setCookie('zip_code', address);\n    closeModal();\n  };\n\n  var handleSelect = function handleSelect(address) {// geocodeByAddress(address)\n    //   .then(results => getLatLng(results[0]))\n    //   .then(latLng => {\n    //     console.log('Success', latLng)\n    //     setAddress(address)\n    //   })\n    //   .catch(error => console.error('Error', error));\n  }; // const handleSelect = address => {\n  //   geocodeByAddress(address)\n  //     .then(results => getLatLng(results[0]))\n  //     .then(latLng => {\n  //       console.log('Success', latLng)\n  //       setDeliveryAddress(address)\n  //     })\n  //     .catch(error => console.error('Error', error));\n  // };\n  // const isPointInPolygon = (latitude, longitude, polygon) => {\n  //   if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n  //     throw new TypeError('Invalid latitude or longitude. Numbers are expected')\n  //   } else if (!polygon || !Array.isArray(polygon)) {\n  //     throw new TypeError('Invalid polygon. Array with locations expected')\n  //   } else if (polygon.length === 0) {\n  //     throw new TypeError('Invalid polygon. Non-empty Array expected')\n  //   }\n  //   const x = latitude; const y = longitude\n  //   let inside = false\n  //   for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n  //     const xi = polygon[i][0]; const yi = polygon[i][1]\n  //     const xj = polygon[j][0]; const yj = polygon[j][1]\n  //     const intersect = ((yi > y) !== (yj > y)) &&\n  //             (x < (xj - xi) * (y - yi) / (yj - yi) + xi)\n  //     if (intersect) inside = !inside\n  //   }\n  //   return inside\n  // };\n  // const dogsBeachPolygon = [\n  //   { latitude: 32.7502030, longitude: -117.2432460},\n  //   { latitude: 32.7489451, longitude: -117.2523153},\n  //   { latitude: 32.7541973, longitude: -117.2525931},\n  //   { latitude: 32.7542674, longitude: -117.2460937},\n  // ]\n  // console.log('isInside:', isPointInPolygon(32.7449888, -117.2263579, dogsBeachPolygon))\n  // const fetchCurrentPosition = () => {\n  //   navigator.geolocation.getCurrentPosition(\n  //     function(position) {\n  //       var pos = new google.maps.LatLng(\n  //         position.coords.latitude,\n  //         position.coords.longitude\n  //       );\n  //       console.log(position.coords);\n  //       google.maps.geometry.poly.containsLocation(pos, refPoly.current.polygon)\n  //         ? setShowBtn(true)\n  //         : setShowBtn(false);\n  //     },\n  //     function(error) {\n  //       console.log(error);\n  //     }\n  //   );\n  // };\n\n\n  useEffect(function () {\n    if (!getCookie('first_visit')) {\n      setCookie('first_visit', true);\n    }\n  }, []);\n  console.log('addresss', address);\n  var containerStyle = {\n    width: '100%',\n    height: '400px'\n  };\n  var center = {\n    lat: 37.437041393899676,\n    lng: -4.191635586788259\n  };\n  return __jsx(React.Fragment, null) //   <LoadScript googleMapsApiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}>\n  //   <GoogleMap\n  //     mapContainerStyle={containerStyle}\n  //     center={center}\n  //     zoom={10}\n  //   >\n  //     <Marker position={center} />\n  //   </GoogleMap>\n  // </LoadScript>\n  //     {/* <SubHeading>\n  //       <FormattedMessage\n  //         id=\"locationModalSubHeading\"\n  //         defaultMessage=\"You have to select your location for deliver service perpous\"\n  //       />\n  //     </SubHeading> */}\n  //     {/* <PlacesAutocomplete\n  //       value={address}\n  //       onChange={(e) => setAddress(e)}\n  //       onSelect={handleSelect}\n  //       searchOptions={{\n  //         types: [],\n  //         componentRestrictions: { country: \"us\" },\n  //       }}\n  //     >\n  //       {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n  //         <div>\n  //           <input\n  //             {...getInputProps({\n  //               placeholder: \"Enter address\",\n  //               className: \"location-search-input\",\n  //               style: {\n  //                 display: 'block',\n  //                 width: '220px',\n  //                 padding:'0px 8px',\n  //                 appearance: 'none',\n  //                 fontFamily: `'Lato', sans-serif`,\n  //                 fontSize: 'base',\n  //                 lineHeight: 'inherit',\n  //                 border: '1px solid',\n  //                 borderColor: '#f1f1f1',\n  //                 borderRadius: '3px',\n  //                 backgroundColor: 'white',\n  //                 color: 'text.bold',\n  //                 height: '48px',\n  //                 transition: 'all 0.25s ease',\n  //                 // mb: 3,\n  //                 '&:focus': {\n  //                   borderColor: '#009E7F',\n  //                 },\n  //               },\n  //             })}\n  //           />\n  //           <div className=\"autocomplete-dropdown-container\">\n  //             {loading && <div>Loading...</div>}\n  //             {suggestions.map((suggestion) => {\n  //               const style = suggestion.active\n  //                 ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n  //                 : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n  //               return (\n  //                 <div {...getSuggestionItemProps(suggestion, { style })}>\n  //                   {suggestion.description}\n  //                 </div>\n  //               );\n  //             })}\n  //           </div>\n  //         </div>\n  //       )}\n  //     </PlacesAutocomplete> */}\n  //     <Button\n  //       fullwidth\n  //       radius={100}\n  //       onClick={handleZipCode}\n  //     >\n  //       <FormattedMessage id='continueBtn' defaultMessage='Continue' />\n  //     </Button>\n  //   </Container>\n  //   <OfferSection>\n  //     <GiftBox />\n  //     <Offer>\n  //       <FormattedMessage\n  //         id=\"locationModalFooter\"\n  //         defaultMessage=\"Free Delivery For 1st Order\"\n  //         values={{ number: 1 }}\n  //       />\n  //     </Offer>\n  //   </OfferSection>\n  // </Wrapper>\n  ;\n}","map":null,"metadata":{},"sourceType":"module"}