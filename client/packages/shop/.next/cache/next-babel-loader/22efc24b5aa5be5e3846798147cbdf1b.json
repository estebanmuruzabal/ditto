{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport localForage from 'localforage';\n\nconst isObjectLiked = value => value.constructor.name === 'Array' || value.constructor.name === 'Object';\n\nconst rehydrate = (value, defaultValue) => {\n  if (!value) return defaultValue; // if (value === 'false') str = false;\n  // if (value === 'true') str = true;\n  // if (!isObjectLiked(value)) {\n  //   return value;\n  // }\n\n  try {\n    const parse = JSON.parse(value);\n    return parse;\n  } catch (err) {\n    return defaultValue;\n  }\n};\n\nconst hydrate = value => {\n  if (!isObjectLiked(value)) {\n    return value;\n  }\n\n  return JSON.stringify(value);\n};\n\nconst createMigration = (opts, data) => {\n  return new Promise((resolve, reject) => {\n    const key = `${opts.key}-version`;\n    localForage.getItem(key, (err, version) => {\n      if (version !== opts.version) {\n        data = opts.migrate(data);\n        localForage.setItem(opts.key, rehydrate(data), err => {\n          if (err) return reject(err);\n          localForage.setItem(key, opts.version, err => {\n            if (err) return reject(err);\n            return resolve(data);\n          });\n        });\n      } else {\n        resolve(data);\n      }\n    });\n  });\n};\n\nconst config = {\n  key: '@session',\n  version: 1,\n  migrate: state => {\n    return _objectSpread({}, state);\n  }\n};\nexport const useStorage = (state, setState) => {\n  const {\n    0: rehydrated,\n    1: setRehydrated\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  useEffect(() => {\n    async function init() {\n      await localForage.getItem(config.key, (err, value) => {\n        if (err) {\n          setRehydrated(true);\n          return setError(err);\n        } // Migrate persisted data\n\n\n        const restoredValue = rehydrate(value);\n\n        if (typeof config.migrate === 'function') {\n          createMigration(config, restoredValue).then(data => setState(data)).then(() => setRehydrated(true));\n        } else {\n          setState(restoredValue);\n          setRehydrated(true);\n        }\n      });\n    }\n\n    init();\n  }, []);\n  useEffect(() => {\n    // if (isNil(state) || isEmpty(state)) {\n    //   localForage.removeItem(config.key);\n    // }\n    localForage.setItem(config.key, hydrate(state));\n  }, [state]);\n  return {\n    rehydrated,\n    error\n  };\n};","map":null,"metadata":{},"sourceType":"module"}