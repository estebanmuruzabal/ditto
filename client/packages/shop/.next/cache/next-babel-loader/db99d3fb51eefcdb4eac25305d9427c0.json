{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Link from 'next/link';\nimport { useMutation } from '@apollo/react-hooks'; // import us from 'react-phone-input-2/lang/es.json'\n\nimport ar from 'react-phone-input-2/lang/es.json';\nimport { Input } from 'components/forms/input';\nimport { Button, Wrapper, Container, Heading, HelperText, Offer, LinkButton, SubrequirementContainer, Dot, Requirement } from './authentication-form.style';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { SIGNUP_MUTATION } from 'graphql/mutation/signup';\nimport PhoneInput from 'react-phone-input-2';\nimport { currentLng } from 'utils/constant';\nexport default function SignOutModal() {\n  const intl = useIntl();\n  const {\n    authState,\n    authDispatch\n  } = useContext(AuthContext);\n\n  const toggleSignInForm = () => {\n    authDispatch({\n      type: 'SIGNIN'\n    });\n  };\n\n  const toggleOtpForm = () => {\n    authDispatch({\n      type: 'OTP_VERIFICATION'\n    });\n  }; //signup\n\n\n  const [phone, setPhone] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [name, setName] = React.useState('');\n  const [email, setEmail] = React.useState('');\n  const [repeatPassword, setRepeatPassword] = React.useState('');\n  const [errorMessage, setErrorMessage] = React.useState(null);\n  const [signupMeMutation, {\n    loading,\n    error\n  }] = useMutation(SIGNUP_MUTATION, {\n    onCompleted: data => {\n      if (false) {\n        localStorage.setItem('phone_number', `${phone}`);\n        toggleOtpForm();\n      }\n\n      setErrorMessage(null);\n    },\n    onError: error => {\n      setPassword('');\n      setRepeatPassword('');\n      if ((error === null || error === void 0 ? void 0 : error.toString()) && (error === null || error === void 0 ? void 0 : error.toString().includes('User already registered'))) setErrorMessage(intl.formatMessage({\n        id: 'userAlreadyRegistered',\n        defaultMessage: 'User already registered'\n      }));else if ((error === null || error === void 0 ? void 0 : error.toString()) && (error === null || error === void 0 ? void 0 : error.toString().includes('Incorrect length'))) setErrorMessage(intl.formatMessage({\n        id: 'atLeast6Char',\n        defaultMessage: 'MÃ­nimo 6 caracteres'\n      }));else setErrorMessage(error === null || error === void 0 ? void 0 : error.toString());\n    }\n  });\n\n  const handlePhoneChange = (value, data, event, formattedValue) => {\n    setPhone(value);\n  };\n\n  const hasMinLength = () => {\n    return password.length >= 6;\n  };\n\n  const passwordsAreEqual = () => {\n    return password === repeatPassword;\n  }; // private hasSecurity() {\n  //   let securityChecks = 0;\n  //   // @ts-ignore\n  //   securityChecks += this.hasLowerCase() + this.hasUpperCase() + this.hasDigit() + this.hasSpecialChar();\n  //   return securityChecks >= 3;\n  // }\n  // private hasLowerCase() {\n  //   return !!this.state.password.match(new RegExp('[a-z]'));\n  // }\n  // private hasUpperCase() {\n  //   return !!this.state.password.match(new RegExp('[A-Z]'));\n  // }\n  // private hasDigit() {\n  //   return !!this.state.password.match(new RegExp('[0-9]'));\n  // }\n  // private hasSpecialChar() {\n  //   return !!this.state.password.match(/[\\~\\`\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\+\\=\\_\\-\\{\\}\\[\\]\\\\|\\:\\;\\\"\\'\\?\\/\\<\\>\\,\\.]/);\n  // }\n\n\n  const upperCaseEverything = str => {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      // You do not need to check if i is larger than splitStr length, as your for does that for you\n      // Assign it back to the array\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    } // Directly return the joined string\n\n\n    return splitStr.join(' ');\n  };\n\n  const setErrorFor5Sec = messageId => {\n    const error = intl.formatMessage({\n      id: messageId,\n      defaultMessage: 'Please check the form'\n    });\n    setErrorMessage(error);\n    setTimeout(() => setErrorMessage(null), 1500);\n    return null;\n  };\n\n  return __jsx(Wrapper, null, __jsx(Container, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"signUpBtnText\",\n    defaultMessage: \"Sign Up\"\n  })), __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: async e => {\n      e.preventDefault(); // if (!passwordsAreEqual()) { setErrorFor5Sec('passShouldBeEqual');return; }\n\n      await signupMeMutation({\n        variables: {\n          phone,\n          password,\n          name\n        }\n      });\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    width: \"100%\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    placeholder: intl.formatMessage({\n      id: 'namePlaceholder',\n      defaultMessage: 'Complete name'\n    }),\n    oninvalid: \"this.setCustomValidity('Please Enter valid email')\",\n    oninput: \"setCustomValidity('')\",\n    height: \"48px\",\n    backgroundColor: \"#F7F7F7\",\n    mb: \"10px\",\n    required: true\n  }), __jsx(Input, {\n    type: \"email\",\n    name: \"email\",\n    width: \"100%\",\n    placeholder: intl.formatMessage({\n      id: 'emailSignUpPlaceholder',\n      defaultMessage: 'Email address'\n    }),\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    backgroundColor: \"#F7F7F7\",\n    marginBottom: \"10px\",\n    required: true // intlInputLabelId=\"profileEmailField\"\n\n  }), __jsx(PhoneInput, {\n    inputProps: {\n      name: 'Numero de telefono',\n      required: true,\n      autoFocus: false\n    },\n    containerStyle: {\n      textAlign: \"left\"\n    },\n    inputStyle: {\n      backgroundColor: \"#F7F7F7\",\n      height: \"48px\",\n      marginBottom: \"10px\",\n      width: \"100%\"\n    },\n    onlyCountries: [currentLng],\n    localization: ar,\n    country: currentLng,\n    masks: {\n      ar: '(...) ...-....'\n    },\n    value: phone,\n    onChange: handlePhoneChange\n  }), __jsx(Input, {\n    type: \"text\",\n    name: \"password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    placeholder: intl.formatMessage({\n      id: 'passwordPlaceholderRegister',\n      defaultMessage: 'Password (min 6 characters)'\n    }),\n    height: \"48px\",\n    width: \"100%\",\n    backgroundColor: \"#F7F7F7\",\n    mb: \"10px\",\n    required: true\n  }), __jsx(Input, {\n    type: \"text\",\n    name: \"password\",\n    width: \"100%\",\n    value: repeatPassword,\n    onChange: e => setRepeatPassword(e.target.value),\n    placeholder: intl.formatMessage({\n      id: 'passwordRepeatPlaceholder',\n      defaultMessage: 'Password (min 6 characters)'\n    }),\n    height: \"48px\",\n    backgroundColor: \"#F7F7F7\",\n    mb: \"10px\",\n    required: true\n  }), !hasMinLength && __jsx(SubrequirementContainer, null, __jsx(Dot, null), __jsx(Requirement, null, intl.formatMessage({\n    id: 'atLeast6Char',\n    defaultMessage: 'At least 6 characters'\n  }))), !passwordsAreEqual && __jsx(SubrequirementContainer, null, __jsx(Dot, null), __jsx(Requirement, null, intl.formatMessage({\n    id: 'passShouldBeEqual',\n    defaultMessage: 'Passwords does not match'\n  }))), __jsx(HelperText, {\n    style: {\n      padding: '20px 0 30px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"tramsText\",\n    defaultMessage: \"By signing up, you agree to Ditto's\"\n  }), \"\\xA0\", __jsx(Link, {\n    href: \"/terms\"\n  }, __jsx(\"a\", null, __jsx(FormattedMessage, {\n    id: \"termsConditionText\",\n    defaultMessage: \"Terms & Conditions\"\n  })))), __jsx(Button, {\n    variant: \"primary\",\n    size: \"big\",\n    width: \"100%\",\n    type: \"submit\"\n  }, loading ? __jsx(FormattedMessage, {\n    id: \"loadingBtn\",\n    defaultMessage: \"Continue\"\n  }) : __jsx(FormattedMessage, {\n    id: \"registerBtn\",\n    defaultMessage: \"Continue\"\n  }))), (error || errorMessage) && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\",\n      color: \"red\"\n    }\n  }, errorMessage), __jsx(Offer, {\n    style: {\n      padding: '20px 0'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"alreadyHaveAccount\",\n    defaultMessage: \"Already have an account?\"\n  }), ' ', __jsx(LinkButton, {\n    onClick: toggleSignInForm\n  }, __jsx(FormattedMessage, {\n    id: \"loginBtnText\",\n    defaultMessage: \"Login\"\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}