{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport Sticky from 'react-stickynode';\nimport { useAppState } from 'contexts/app/app.provider';\nimport Header from './header/header';\nimport { LayoutWrapper } from './layout.style';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport ErrorMessage from 'components/error-message/error-message';\nconst MobileHeader = dynamic(() => import('./header/mobile-header'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./header/mobile-header')],\n    modules: ['./header/mobile-header']\n  }\n});\n\nconst Layout = ({\n  className,\n  children,\n  // deviceType: { mobile, tablet, desktop },\n  token\n}) => {\n  const isSticky = useAppState('isSticky');\n  const {\n    pathname,\n    query\n  } = useRouter();\n  const type = pathname === '/restaurant' ? 'restaurant' : query.type;\n  const newTypeArry = [];\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(GET_TYPE, {\n    variables: {\n      searchText: ''\n    }\n  });\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Loading...'\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message\n    });\n  }\n\n  ;\n\n  const isHomeHandler = (typedata, type) => {\n    if (typedata) {\n      typedata.types.items.map((item, index) => {\n        newTypeArry.push(item.slug);\n      });\n\n      if (newTypeArry.includes(`${type}`)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return;\n    }\n  };\n\n  return __jsx(LayoutWrapper, {\n    className: `layoutWrapper ${className}`\n  }, __jsx(Sticky, {\n    enabled: isSticky,\n    innerZ: 1001\n  }, __jsx(MobileHeader, {\n    className: `${isSticky ? 'sticky' : 'unSticky'} ${isHomeHandler(data, type) ? 'home' : ''} desktop`\n  }), __jsx(Header, {\n    className: `${isSticky && isHomeHandler(data, type) ? 'sticky' : 'unSticky'} ${isHomeHandler(data, type) ? 'home' : ''}`\n  })), children);\n};\n\nexport default Layout;","map":null,"metadata":{},"sourceType":"module"}