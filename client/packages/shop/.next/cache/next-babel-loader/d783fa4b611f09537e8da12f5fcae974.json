{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightSensor.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage } from 'react-intl';\nimport Select from 'react-select';\nimport { SensorsTypes, WeekDays, fourRelaysOptions, manualModeOptions, lightModeOptions, LightSensorModes } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, ButtonText, Type } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';\nimport { getSettingTypeText } from 'utils/sensorUtils';\nimport { CheckMark } from 'assets/icons/CheckMark';\n\nconst LightSensor = ({\n  plant,\n  settingType,\n  handleSettingsChange,\n  onDeleteSchedule,\n  data,\n  openTab,\n  setOpenTab,\n  handleDeleteSensor\n}) => {\n  var _setting$relayOneIdRe, _setting$relayOneIdRe2, _setting$scheduledOnT, _setting$logs;\n\n  const setting = plant.sensors.find(sensor => sensor.settingType === settingType);\n  const {\n    0: daySelected,\n    1: setDay\n  } = useState('');\n  const {\n    0: editIsOn,\n    1: setEditIsOn\n  } = useState(false);\n  const selectedMode = lightModeOptions.find(option => option.value === setting.mode);\n  const selectedManualState = manualModeOptions.find(option => option.value === setting.relayOneWorking);\n  const relayOneSelected = fourRelaysOptions.find(option => option.value === setting.relayOneIdRelated);\n  const relayTwoSelected = fourRelaysOptions.find(option => option.value === setting.relayTwoIdRelated);\n  const selectStyle = {\n    control: styles => _objectSpread(_objectSpread({}, styles), {}, {\n      width: '160px',\n      textAlign: 'left'\n    })\n  };\n  const tabIsOpen = openTab === settingType;\n\n  const handleModal = (modalComponent, modalProps = {}, className = 'add-time-schedule-modal') => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  return __jsx(PlantsSensorContainer, {\n    style: {\n      height: tabIsOpen ? '100%' : '66px'\n    },\n    onClick: () => setOpenTab(tabIsOpen ? '' : settingType),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, __jsx(Type, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, getSettingTypeText(setting === null || setting === void 0 ? void 0 : setting.settingType))), __jsx(ListDes, {\n    style: {\n      marginLeft: '-10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, __jsx(CardButtons, {\n    className: \"button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, editIsOn ? __jsx(ActionButton, {\n    onClick: () => setEditIsOn(!editIsOn),\n    className: \"edit-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 29\n    }\n  }, __jsx(CheckMark, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }\n  })) : __jsx(ActionButton, {\n    onClick: () => setEditIsOn(!editIsOn),\n    className: \"edit-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, __jsx(PencilIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }\n  })), __jsx(ActionButton, {\n    onClick: () => handleDeleteSensor(plant, settingType),\n    className: \"delete-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }\n  }, __jsx(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 29\n    }\n  }))))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"lightId\",\n    defaultMessage: \"lightId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, plant === null || plant === void 0 ? void 0 : plant.light, \" % \", (plant === null || plant === void 0 ? void 0 : plant.light) < 40 ? '🌙' : '☀️'))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"manualModeStateId\",\n    defaultMessage: \"manualModeStateId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: setting.relayOneWorking ? 'manualModeStateOnId' : 'manualModeStateOffId',\n    defaultMessage: \"noDefaultOnOffMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  })))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"lightModeId\",\n    defaultMessage: \"lightModeId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, __jsx(Select, {\n    onChange: e => handleSettingsChange(e, plant, 'mode', e.value, SensorsTypes.LIGHT_SETTING),\n    value: selectedMode,\n    options: lightModeOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }))), ((setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.MANUAL || (setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.SCHEDULE || (setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.SMART_SCHEDULE) && __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: ((_setting$relayOneIdRe = setting.relayOneIdRelated) === null || _setting$relayOneIdRe === void 0 ? void 0 : _setting$relayOneIdRe.length) ? 'asociatedRelayId' : 'asociateRelayId',\n    defaultMessage: ((_setting$relayOneIdRe2 = setting.relayOneIdRelated) === null || _setting$relayOneIdRe2 === void 0 ? void 0 : _setting$relayOneIdRe2.length) ? 'asociatedRelayId' : 'asociateRelayId',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 19\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, __jsx(Select, {\n    onChange: e => handleSettingsChange(e, plant, 'relayOneIdRelated', e.value, SensorsTypes.LIGHT_SETTING),\n    value: relayOneSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }))), setting.mode === LightSensorModes.MANUAL && __jsx(React.Fragment, null, __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"manualModeStateId\",\n    defaultMessage: \"manualModeStateId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, __jsx(Select, {\n    onChange: e => handleSettingsChange(e, plant, 'relayOneWorking', e.value, SensorsTypes.LIGHT_SETTING),\n    value: selectedManualState,\n    options: manualModeOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 19\n    }\n  })))), (setting.mode === LightSensorModes.SCHEDULE || setting.mode === LightSensorModes.SMART_SCHEDULE) && __jsx(React.Fragment, null, __jsx(WeekContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, Object.keys(WeekDays).map((day, i) => {\n    return __jsx(DayContainer, {\n      key: i + '-day-container',\n      style: {\n        backgroundColor: daySelected === day ? '#c2b0b0' : 'transparent'\n      },\n      onClick: () => setDay(day),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    }, day.substring(0, 3));\n  })), setting === null || setting === void 0 ? void 0 : (_setting$scheduledOnT = setting.scheduledOnTimes) === null || _setting$scheduledOnT === void 0 ? void 0 : _setting$scheduledOnT.map((schedule, i) => {\n    return __jsx(WeekContainer, {\n      key: i + '-days-to-repeat-2',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 19\n      }\n    }, schedule.daysToRepeat.includes(daySelected) ? __jsx(ScheduleTime, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 23\n      }\n    }, __jsx(TextSpaced, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"startTimeId\",\n      defaultMessage: \"startTimeId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 37\n      }\n    })), \" \", __jsx(TextSpaced, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 117\n      }\n    }, schedule.startTime), __jsx(TextSpaced, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"endTimeId\",\n      defaultMessage: \"endTimeId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 37\n      }\n    })), \" \", __jsx(TextSpaced, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 113\n      }\n    }, schedule.endTime), __jsx(CardButtons, {\n      className: \"button-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }, __jsx(ActionButton, {\n      onClick: () => {\n        var _data$getUser;\n\n        return handleModal(AddTimeSchedule, {\n          settingType: SensorsTypes.LIGHT_SETTING,\n          plant,\n          id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id\n        });\n      },\n      className: \"edit-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 27\n      }\n    }, __jsx(PencilIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 29\n      }\n    })), __jsx(ActionButton, {\n      onClick: () => onDeleteSchedule(plant, SensorsTypes.LIGHT_SETTING, i),\n      className: \"delete-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 27\n      }\n    }, __jsx(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 29\n      }\n    })))) : __jsx(ScheduleTime, {\n      style: {\n        border: '0px',\n        height: '42px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 25\n      }\n    }));\n  }), __jsx(Button, {\n    size: \"small\",\n    variant: \"outlined\",\n    type: \"button\",\n    className: \"add-button\",\n    onClick: () => {\n      var _data$getUser2;\n\n      return handleModal(AddTimeSchedule, {\n        settingType: SensorsTypes.LIGHT_SETTING,\n        plant,\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addTimeScheduleId\",\n    defaultMessage: \"addTimeScheduleId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  })), __jsx(Switch, {\n    disabled: false,\n    checked: setting.whatsappWarningsOn,\n    labelPosition: 'right' // className,\n    ,\n    onUpdate: () => handleSettingsChange(plant, 'whatsappWarningsOn', !setting.whatsappWarningsOn, SensorsTypes.LIGHT_SETTING) // style\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }), (setting === null || setting === void 0 ? void 0 : (_setting$logs = setting.logs) === null || _setting$logs === void 0 ? void 0 : _setting$logs.length) > 0 && __jsx(HumidityLogsGraph, {\n    data: setting.logs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 21\n    }\n  })), __jsx(Button, {\n    className: \"delete-setting-btn\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: () => handleDeleteSensor(plant, settingType),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }, __jsx(ButtonText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"deleteSettingId\",\n    defaultMessage: \"deleteSettingId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default LightSensor;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightSensor.tsx"],"names":["React","useState","CloseIcon","PencilIcon","Button","Switch","FormattedMessage","Select","SensorsTypes","WeekDays","fourRelaysOptions","manualModeOptions","lightModeOptions","LightSensorModes","HumidityLogsGraph","PlantsSensorContainer","ListItem","ListTitle","ListDes","WeekContainer","DayContainer","ScheduleTime","TextSpaced","CardButtons","ActionButton","Text","ButtonText","Type","openModal","AddTimeSchedule","getSettingTypeText","CheckMark","LightSensor","plant","settingType","handleSettingsChange","onDeleteSchedule","data","openTab","setOpenTab","handleDeleteSensor","setting","sensors","find","sensor","daySelected","setDay","editIsOn","setEditIsOn","selectedMode","option","value","mode","selectedManualState","relayOneWorking","relayOneSelected","relayOneIdRelated","relayTwoSelected","relayTwoIdRelated","selectStyle","control","styles","width","textAlign","tabIsOpen","handleModal","modalComponent","modalProps","className","show","config","height","enableResizing","disableDragging","closeOnClickOutside","component","componentProps","item","justifyContent","marginLeft","light","e","LIGHT_SETTING","MANUAL","SCHEDULE","SMART_SCHEDULE","length","Object","keys","map","day","i","backgroundColor","substring","scheduledOnTimes","schedule","daysToRepeat","includes","startTime","endTime","id","getUser","border","whatsappWarningsOn","logs"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions, lightModeOptions, LightSensorModes } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, ButtonText, Type } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { getSettingTypeText } from 'utils/sensorUtils';\nimport { CheckMark } from 'assets/icons/CheckMark';\n\ninterface Props {\n  data?: any;\n  plant: any;\n  settingType: SensorsTypes;\n  openTab: string;\n  setOpenTab: (settingType: string) => void;\n  handleSettingsChange: (e: any, plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => void;\n  onDeleteSchedule: (plant: any, settingType: SensorsTypes, position: number) => void;\n  handleDeleteSensor: (plant: any, settingType: string) => void;\n}\n\nconst LightSensor: React.FC<Props> = ({ plant, settingType, handleSettingsChange, onDeleteSchedule, data, openTab, setOpenTab, handleDeleteSensor }) => {\n    const setting = plant.sensors.find((sensor: ISetting) => sensor.settingType === settingType);\n    const [daySelected, setDay] = useState('');\n    const [editIsOn, setEditIsOn] = useState(false);\n\n    const selectedMode = lightModeOptions.find((option) => option.value === setting.mode);\n    const selectedManualState = manualModeOptions.find((option) => option.value === setting.relayOneWorking);\n    const relayOneSelected = fourRelaysOptions.find((option) => option.value === setting.relayOneIdRelated);\n    const relayTwoSelected = fourRelaysOptions.find((option) => option.value === setting.relayTwoIdRelated);\n    const selectStyle = { control: styles => ({ ...styles, width: '160px', textAlign: 'left' }) };\n    const tabIsOpen = openTab === settingType;\n\n    const handleModal = (\n        modalComponent: any,\n        modalProps = {},\n        className: string = 'add-time-schedule-modal'\n        ) => {\n        openModal({\n            show: true,\n            config: {\n            width: 360,\n            height: 'auto',\n            enableResizing: false,\n            disableDragging: true,\n            className: className,\n            },\n            closeOnClickOutside: true,\n            component: modalComponent,\n            componentProps: { item: modalProps },\n        });\n    };\n\n    return (\n        <PlantsSensorContainer style={{ height: tabIsOpen ? '100%' : '66px' }} onClick={() => setOpenTab(tabIsOpen ? '' : settingType)}>\n            <ListItem style={{ justifyContent: 'flex-start' }}>\n                <ListTitle>\n                    <Type bold>{getSettingTypeText(setting?.settingType)}</Type>\n                </ListTitle>\n                <ListDes style={{ marginLeft: '-10px' }}>\n                    <CardButtons className='button-wrapper'>\n                        { editIsOn ? (\n                            <ActionButton onClick={() => setEditIsOn(!editIsOn)} className='edit-btn'>\n                                <CheckMark />\n                            </ActionButton>\n                        ) : (\n                            <ActionButton onClick={() => setEditIsOn(!editIsOn)} className='edit-btn'>\n                                <PencilIcon />\n                            </ActionButton>\n                        )}\n                        <ActionButton onClick={() => handleDeleteSensor(plant, settingType)} className='delete-btn'>\n                            <CloseIcon />\n                        </ActionButton>\n                    </CardButtons>\n                </ListDes>\n            \n            </ListItem>\n\n          <ListItem style={{ justifyContent: 'flex-start' }}>\n            <ListTitle>\n              <Text>\n                <FormattedMessage\n                  id=\"lightId\"\n                  defaultMessage=\"lightId\"\n                />\n              </Text>\n            </ListTitle>\n            <ListDes>\n              <Text>{plant?.light} % {plant?.light < 40 ? '🌙' : '☀️'}</Text>\n            </ListDes>\n          </ListItem>\n  \n          <ListItem style={{ justifyContent: 'flex-start' }}>\n            <ListTitle>\n              <Text bold>\n                <FormattedMessage\n                  id=\"manualModeStateId\"\n                  defaultMessage=\"manualModeStateId\"\n                />\n              </Text>\n            </ListTitle>\n            <ListDes>\n              <Text> \n                <FormattedMessage\n                  id={setting.relayOneWorking ? 'manualModeStateOnId' : 'manualModeStateOffId'}\n                  defaultMessage='noDefaultOnOffMsg'\n                />\n              </Text>\n            </ListDes>\n          </ListItem>\n  \n          <ListItem style={{ justifyContent: 'flex-start' }}>\n            <ListTitle>\n              <Text bold>\n                <FormattedMessage\n                  id=\"lightModeId\"\n                  defaultMessage=\"lightModeId\"\n                />\n              </Text>\n            </ListTitle>\n            <ListDes>\n              <Select \n                onChange={(e: any) => handleSettingsChange(e, plant, 'mode', e.value, SensorsTypes.LIGHT_SETTING)}\n                value={selectedMode}\n                options={lightModeOptions}\n                styles={selectStyle}\n                menuPosition={'fixed'}\n              />\n            </ListDes>\n          </ListItem>\n  \n          { (setting?.mode === LightSensorModes.MANUAL || setting?.mode === LightSensorModes.SCHEDULE || setting?.mode === LightSensorModes.SMART_SCHEDULE) && (\n            <ListItem>\n              <ListTitle>\n                <Text bold>\n                  <FormattedMessage\n                    id={setting.relayOneIdRelated?.length ? 'asociatedRelayId': 'asociateRelayId'}\n                    defaultMessage={setting.relayOneIdRelated?.length ? 'asociatedRelayId': 'asociateRelayId'}\n                  />\n                </Text>\n              </ListTitle>\n              <ListDes>\n                <Select \n                  onChange={(e: any) => handleSettingsChange(e, plant, 'relayOneIdRelated', e.value, SensorsTypes.LIGHT_SETTING)}\n                  value={relayOneSelected}\n                  options={fourRelaysOptions}\n                  styles={selectStyle}\n                  menuPosition={'fixed'}\n                />\n              </ListDes>\n            </ListItem>\n          )}\n          \n          { setting.mode === LightSensorModes.MANUAL && (\n            <>\n              <ListItem>\n                <ListTitle>\n                  <Text bold>\n                    <FormattedMessage\n                      id='manualModeStateId'\n                      defaultMessage='manualModeStateId'\n                    />\n                  </Text>\n                </ListTitle>\n                <ListDes>\n                  <Select \n                    onChange={(e: any) => handleSettingsChange(e, plant, 'relayOneWorking', e.value, SensorsTypes.LIGHT_SETTING)}\n                    value={selectedManualState}\n                    options={manualModeOptions}\n                    styles={selectStyle}\n                    menuPosition={'fixed'}\n                  />\n                </ListDes>\n              </ListItem>\n            </>\n          )}\n  \n          { (setting.mode === LightSensorModes.SCHEDULE || setting.mode === LightSensorModes.SMART_SCHEDULE) && (\n            <>\n              <WeekContainer>\n              {Object.keys(WeekDays).map((day, i: number) => {\n                 return (\n                    <DayContainer\n                      key={i + '-day-container'}\n                      style={{ backgroundColor: daySelected === day ? '#c2b0b0' : 'transparent' }}\n                      onClick={() => setDay(day)}\n                    >\n                      {day.substring(0,3)}\n                    </DayContainer>\n                  )\n                })\n              }\n              </WeekContainer>\n  \n              { setting?.scheduledOnTimes?.map((schedule: any, i: number) => {\n                return (\n                  <WeekContainer key={i + '-days-to-repeat-2'}>\n                    { schedule.daysToRepeat.includes(daySelected) ? (\n                      <ScheduleTime>\n                        <TextSpaced><FormattedMessage id='startTimeId' defaultMessage='startTimeId' /></TextSpaced> <TextSpaced>{schedule.startTime}</TextSpaced>\n                        <TextSpaced><FormattedMessage id='endTimeId' defaultMessage='endTimeId' /></TextSpaced> <TextSpaced>{schedule.endTime}</TextSpaced>\n                        <CardButtons className='button-wrapper'>\n                          <ActionButton onClick={() => handleModal( AddTimeSchedule, { settingType: SensorsTypes.LIGHT_SETTING, plant, id: data?.getUser?.id } )} className='edit-btn'>\n                            <PencilIcon />\n                          </ActionButton>\n  \n                          <ActionButton onClick={() => onDeleteSchedule(plant, SensorsTypes.LIGHT_SETTING, i)} className='delete-btn'>\n                            <CloseIcon />\n                          </ActionButton>\n                        </CardButtons>\n                      </ScheduleTime>\n                    ) : <ScheduleTime style={{ border: '0px', height: '42px' }}></ScheduleTime>}\n                  </WeekContainer>\n                )\n              }\n              )}\n              <Button\n                size='small'\n                variant='outlined'\n                type='button'\n                className='add-button'\n                onClick={() => handleModal(\n                    AddTimeSchedule, \n                    {\n                        settingType: SensorsTypes.LIGHT_SETTING,\n                        plant,\n                        id: data?.getUser?.id\n                    }\n                  )\n                }\n              >\n                <FormattedMessage\n                  id='addTimeScheduleId'\n                  defaultMessage='addTimeScheduleId' \n                />\n              </Button>\n              <Switch \n                    disabled={false}\n                    checked={setting.whatsappWarningsOn}\n                    labelPosition={'right'}\n                    // className,\n                    onUpdate={() => handleSettingsChange(plant, 'whatsappWarningsOn', !setting.whatsappWarningsOn, SensorsTypes.LIGHT_SETTING)}\n                    // style\n                />\n              { setting?.logs?.length > 0 && (\n                    <HumidityLogsGraph\n                        data={setting.logs}\n                    />\n                )}\n            </>\n          )}\n\n            <Button className=\"delete-setting-btn\" variant=\"secondary\" borderRadius={100} onClick={() => handleDeleteSensor(plant, settingType)}>\n                <ButtonText>\n                    <FormattedMessage id=\"deleteSettingId\" defaultMessage=\"deleteSettingId\" />\n                </ButtonText>\n            </Button>\n        </PlantsSensorContainer>\n      )\n};\n\nexport default LightSensor;\n"]},"metadata":{},"sourceType":"module"}