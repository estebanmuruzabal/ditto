{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, SensorsTypes, timezones } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantsPageContainer, OrderDetails, BlockTitle, Text, ListItem, ListTitle, ListDes, ButtonText, PlantPageWrapper, Column1, Row1, DashboardContainer, SensorsWrapper } from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, DELETE_SETTING, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\nimport Select from 'react-select';\nimport Plug from './sensors/Plug';\nimport DistanceSensor from './sensors/DistanceSensor';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { hasDittoBotUpdatedInLastMinute, getLastNumOfSensor, getSensorWithoutNumber } from 'utils/ditto-bot';\nimport moment from 'moment';\n\nvar YourPlants = function YourPlants(_ref) {\n  _s();\n\n  var deviceType = _ref.deviceType,\n      userRefetch = _ref.userRefetch;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useContext2 = useContext(AuthContext),\n      authDispatch = _useContext2.authDispatch;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      _useQuery$data = _useQuery.data,\n      data = _useQuery$data === void 0 ? {} : _useQuery$data; // const { loading1, error1, data1 = {} } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n  //   notifyOnNetworkStatusChange: true,\n  //   fetchPolicy: \"network-only\",\n  //   // pollInterval: 5000,\n  // });\n  // const router = useRouter();\n\n\n  var intl = useIntl();\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setPlantName = _useState[1];\n\n  var _useState2 = useState(''),\n      openTab = _useState2[0],\n      setOpenTab = _useState2[1];\n\n  var _useState3 = useState(''),\n      errorId = _useState3[0],\n      setErrorId = _useState3[1];\n\n  var _useState4 = useState(''),\n      plantId = _useState4[0],\n      setControllerID = _useState4[1];\n\n  var _useState5 = useState(''),\n      userinfoMsg = _useState5[0],\n      setUserinfoMsg = _useState5[1];\n\n  var _useState6 = useState(''),\n      sensorSelected = _useState6[0],\n      setSensor = _useState6[1];\n\n  var _useState7 = useState(''),\n      timezoneSelected = _useState7[0],\n      setTimezone = _useState7[1];\n\n  var _useMutation = useMutation(ADD_PLANT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addPlant = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_SETTING),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateSetting = _useMutation4[0];\n\n  var _useMutation5 = useMutation(DELETE_SETTING),\n      _useMutation6 = _slicedToArray(_useMutation5, 1),\n      deleteSetting = _useMutation6[0];\n\n  var plants = state.plants;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n\n  var shouldNotAssignRelay = function shouldNotAssignRelay(plant, field, value) {\n    var relayOneIdRelated = 'relayOneIdRelated';\n    var relayTwoIdRelated = 'relayTwoIdRelated';\n    if (field !== relayOneIdRelated && field !== relayTwoIdRelated) return false;\n    plant.sensors.map(function (module) {\n      if ((module[relayOneIdRelated] === value || module[relayTwoIdRelated] === value) && value !== '') {\n        var texto1 = intl.formatMessage({\n          id: 'relayAlreadyAssinged',\n          defaultMessage: 'Relay already assigned in '\n        });\n        var texto2 = intl.formatMessage({\n          id: 'relayAlreadyAssinged2',\n          defaultMessage: 'desigagned  '\n        });\n        var b = confirm(texto1 + module.name + texto2);\n        console.log('asdasd', b);\n        if (b) return false;\n        return false;\n      }\n    });\n    return false;\n  };\n\n  var defaultSettingValuesIfModeChanges = function defaultSettingValuesIfModeChanges(plant, field, value, settingType) {\n    var mode = 'mode';\n    if (field !== mode) return plant;\n    var settingIndex = plant.sensors.findIndex(function (module) {\n      return module.settingType === settingType;\n    });\n    plant.sensors[settingIndex] = getDefaultSetting(settingType, plant.sensors[settingIndex].name, value === CommonMode.NONE ? [] : plant.sensors[settingIndex].logs);\n    return module;\n  };\n\n  var isClean = function isClean(plant, field, value) {\n    // min max checks\n    var minWarning = 'minWarning';\n    var maxWarning = 'maxWarning';\n    if (field !== minWarning && field !== maxWarning) return true;\n\n    if (Number(value) < 0 || Number(value) > 100) {\n      setErrorId(field);\n      setTimeout(function () {\n        setErrorId('');\n      }, 2000);\n      return false;\n    }\n\n    setErrorId(''); // add more checks\n\n    return true;\n  };\n\n  var handleSettingsChange = function handleSettingsChange(plant, field, value, settingType) {\n    // if we want to stop user to reuse plugs, uncomment line bellow\n    var a = shouldNotAssignRelay(plant, field, value);\n    if (a) return;\n    plant = defaultSettingValuesIfModeChanges(plant, field, value, settingType);\n    dispatch({\n      type: settingType,\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    isClean(plant, field, value) && dispatchSettingSave(plant, field, value, settingType);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var handleAddDittoBotClick = function handleAddDittoBotClick() {\n    var _data$getUser;\n\n    addPlant({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n        name: name,\n        plantId: Number(plantId)\n      }\n    });\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  var handleUpdateDittoControllerName = function handleUpdateDittoControllerName(plant, name) {\n    setTimeout(function () {\n      var _data$getUser2;\n\n      addPlant({\n        variables: {\n          id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n          name: name,\n          plantId: plant.plantId\n        }\n      });\n    }, 2000);\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  var handleDeleteSensor = function handleDeleteSensor(plantSelected, settingType) {\n    var _data$getUser3;\n\n    deleteSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser3 = data.getUser) === null || _data$getUser3 === void 0 ? void 0 : _data$getUser3.id,\n        plantId: plantSelected.plantId,\n        settingName: settingType\n      }\n    });\n    var plantIndex = plants.findIndex(function (plant) {\n      return plant.plantId === plantSelected.plantId;\n    });\n    var settingIndex = plants[plantIndex].sensors.findIndex(function (module) {\n      return module.settingType === settingType;\n    });\n    dispatch({\n      type: 'DELETE_MODULE',\n      payload: {\n        plantIndex: plantIndex,\n        settingIndex: settingIndex\n      }\n    });\n    setUserinfoMsg('deleted setting successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  var onDeleteSchedule = function onDeleteSchedule(plant, settingType, scheduleIndex) {\n    var _plant$sensors$settin, _data$getUser4;\n\n    var settingIndex = plant.sensors.findIndex(function (module) {\n      return module.settingType === settingType;\n    });\n    (_plant$sensors$settin = plant.sensors[settingIndex]) === null || _plant$sensors$settin === void 0 ? void 0 : _plant$sensors$settin.scheduledOnTimes.splice(scheduleIndex, 1);\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser4 = data.getUser) === null || _data$getUser4 === void 0 ? void 0 : _data$getUser4.id,\n        plantId: plant.plantId,\n        input: _objectSpread(_objectSpread({}, plant.sensors[settingIndex]), {}, {\n          settingType: settingType\n        })\n      }\n    });\n    setUserinfoMsg('deleted schedule successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  var getDefaultSetting = function getDefaultSetting(settingTypeName, name, logs) {\n    return {\n      name: name || '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: logs || [],\n      scheduledOnTimes: [],\n      settingType: settingTypeName\n    };\n  };\n\n  var dispatchSettingSave = function dispatchSettingSave(plant, fieldName, fieldValue, settingType) {\n    var _data$getUser5;\n\n    console.log('plant:');\n    var settingIndex = plant.sensors.findIndex(function (module) {\n      return module.settingType === settingType;\n    });\n    plant.sensors[settingIndex][fieldName] = fieldValue;\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser5 = data.getUser) === null || _data$getUser5 === void 0 ? void 0 : _data$getUser5.id,\n        plantId: plant.plantId,\n        input: plant.sensors[settingIndex]\n      }\n    });\n  };\n\n  var getSensorCompleteName = function getSensorCompleteName(plant, settingType) {\n    var _plant$sensors;\n\n    var sensorNewNumber = 1;\n    plant === null || plant === void 0 ? void 0 : (_plant$sensors = plant.sensors) === null || _plant$sensors === void 0 ? void 0 : _plant$sensors.map(function (module) {\n      var lastSensorNum = getLastNumOfSensor(module.settingType);\n      var rawSensorTypeName = getSensorWithoutNumber(module === null || module === void 0 ? void 0 : module.settingType);\n\n      if (!isNaN(lastSensorNum) && rawSensorTypeName === settingType) {\n        sensorNewNumber = lastSensorNum + 1;\n      }\n    });\n    return \"\".concat(settingType, \"_\").concat(sensorNewNumber);\n  };\n\n  var dispatchNewSettingSave = function dispatchNewSettingSave(plant, settingType, plantIndex) {\n    var _data$getUser6;\n\n    var completeSensorTypeName = getSensorCompleteName(plant, settingType);\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser6 = data.getUser) === null || _data$getUser6 === void 0 ? void 0 : _data$getUser6.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(completeSensorTypeName)\n      }\n    });\n    dispatch({\n      type: 'ADD_MODULE',\n      payload: {\n        plantIndex: plantIndex,\n        setting: getDefaultSetting(completeSensorTypeName)\n      }\n    });\n  };\n\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '120px',\n        textAlign: 'left'\n      });\n    }\n  };\n  var sensorsOptions = [{\n    value: SensorsTypes.DISTANCE,\n    label: intl.formatMessage({\n      id: 'distanceId',\n      defaultMessage: 'distanceId'\n    })\n  }, {\n    value: SensorsTypes.SOIL_HUMIDITY,\n    label: intl.formatMessage({\n      id: 'moistHumidityId',\n      defaultMessage: 'moistHumidityId'\n    })\n  }, {\n    value: SensorsTypes.HUMIDITY_TEMPETURE,\n    label: intl.formatMessage({\n      id: 'airHumidityAndTempetureId',\n      defaultMessage: 'airHumidityAndTempetureId'\n    })\n  }, {\n    value: SensorsTypes.LIGHT,\n    label: intl.formatMessage({\n      id: 'lightSensorId',\n      defaultMessage: 'lightSensorId'\n    })\n  }, {\n    value: SensorsTypes.PLUG,\n    label: intl.formatMessage({\n      id: 'intelligentPlugId',\n      defaultMessage: 'intelligentPlugId'\n    })\n  }];\n  var timezonesList = timezones.map(function (timezone) {\n    return {\n      value: timezone,\n      label: timezone\n    };\n  });\n  return __jsx(PlantPageWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 5\n    }\n  }, __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/profile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: \"home-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"backProfileBtn\",\n    defaultMessage: \"Back to Profile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }\n  }))), __jsx(OrderDetails, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }\n  }, __jsx(BlockTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"dittoBotsIds\",\n    defaultMessage: \"dittoBotsIds\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }\n  })), (plants === null || plants === void 0 ? void 0 : plants.length) < 1 && __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 36\n    }\n  }, intl.formatMessage({\n    id: 'noDittoBotsTextId',\n    defaultMessage: 'noDittoBotsTextId'\n  })), plants === null || plants === void 0 ? void 0 : plants.map(function (plant, i) {\n    var _plant$timestamp;\n\n    var sensors = plant.sensors;\n    console.log('sensors', sensors);\n    return __jsx(DashboardContainer, {\n      key: i + '-orderList',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }\n    }, __jsx(Row1, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 19\n      }\n    }, __jsx(Column1, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    }, __jsx(ListItem, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"controllerNameId\",\n      defaultMessage: \"controllerNameId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 25\n      }\n    }, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      disabled: true,\n      value: plant === null || plant === void 0 ? void 0 : plant.name // we have to change the onChange because the is no one for the controller name actualy\n      ,\n      onChange: function onChange(e) {\n        return handleUpdateDittoControllerName(plant, e.target.value);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 27\n      }\n    }))), __jsx(ListItem, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"statusId\",\n      defaultMessage: \"statusId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 27\n      }\n    }, ((_plant$timestamp = plant.timestamp) === null || _plant$timestamp === void 0 ? void 0 : _plant$timestamp.length) > 0 ? moment(plant.timestamp).format('hh:mm A - DD MMM') : '', \" \", hasDittoBotUpdatedInLastMinute(plant.timestamp) ? '[ONLINE]' : '[OFFLINE]')), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addSensorId\",\n      defaultMessage: \"addSensorId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 25\n      }\n    }, __jsx(Select, {\n      onChange: function onChange(e) {\n        return dispatchNewSettingSave(plant, e.value, i);\n      },\n      value: sensorSelected // @ts-ignore\n      ,\n      options: sensorsOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 25\n      }\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 27\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 29\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"timezone\",\n      defaultMessage: \"timezone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 33\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 27\n      }\n    }, __jsx(Select, {\n      onChange: function onChange(e) {\n        return dispatchNewSettingSave(plant, e.value, i);\n      },\n      value: timezoneSelected // @ts-ignore\n      ,\n      options: timezonesList,\n      styles: selectStyle,\n      menuPosition: 'fixed',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 29\n      }\n    })))))), __jsx(SensorsWrapper, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 19\n      }\n    }, sensors === null || sensors === void 0 ? void 0 : sensors.map(function (module, index) {\n      switch (module === null || module === void 0 ? void 0 : module.settingType) {\n        case \"\".concat(SensorsTypes.SOIL_HUMIDITY, \"_1\"):\n        case \"\".concat(SensorsTypes.SOIL_HUMIDITY, \"_2\"):\n        case \"\".concat(SensorsTypes.SOIL_HUMIDITY, \"_3\"):\n          // check the number of same setting to send\n          return __jsx(SoilHumiditySensor, {\n            key: i + module.settingType,\n            data: data,\n            plant: plant,\n            errorId: errorId,\n            openTab: openTab,\n            handleDeleteSensor: handleDeleteSensor,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.LIGHT, \"_1\"):\n          return __jsx(LightSensor, {\n            key: i + module.settingType,\n            data: data,\n            errorId: errorId,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.DISTANCE, \"_1\"):\n          return __jsx(DistanceSensor, {\n            key: i + module.settingType,\n            data: data,\n            plant: plant,\n            errorId: errorId,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.PLUG, \"_1\"):\n          return __jsx(Plug, {\n            key: i + module.settingType,\n            data: data,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 29\n            }\n          });\n\n        default:\n          break;\n      }\n    })));\n  }), userinfoMsg && __jsx(SuccessMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"userInfoSuccess\",\n    defaultMessage: userinfoMsg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 17\n    }\n  })))), __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }\n  }, __jsx(BlockTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addController\",\n    defaultMessage: \"Your Plants\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 11\n    }\n  })), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantNameField\",\n    defaultMessage: \"Name of the plant\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    onChange: function onChange(e) {\n      return setPlantName(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'plantNamePlaceholderId',\n      defaultMessage: 'Balcony plants'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 13\n    }\n  }))), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantIdField\",\n    defaultMessage: \"ID of the controller\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"plantId\",\n    value: plantId,\n    onChange: function onChange(e) {\n      return setControllerID(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'serialNumberPlaceholderId',\n      defaultMessage: 'Look behind Ditto Bot'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 13\n    }\n  }))), __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: handleAddDittoBotClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 9\n    }\n  }, __jsx(ButtonText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addDittoBotButton\",\n    defaultMessage: \"Add plant\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 13\n    }\n  })))));\n};\n\n_s(YourPlants, \"l+xv3NyfJWAt4LDrqpTIhV73qwk=\", false, function () {\n  return [useQuery, useIntl, useMutation, useMutation, useMutation];\n});\n\n_c = YourPlants;\nexport default YourPlants;\n\nvar _c;\n\n$RefreshReg$(_c, \"YourPlants\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx"],"names":["React","useState","useContext","Link","useMutation","useQuery","CommonMode","SensorsTypes","timezones","ErrorMessage","PlantsPageContainer","OrderDetails","BlockTitle","Text","ListItem","ListTitle","ListDes","ButtonText","PlantPageWrapper","Column1","Row1","DashboardContainer","SensorsWrapper","FormattedMessage","useIntl","GET_LOGGED_IN_USER","Button","ADD_PLANT","DELETE_SETTING","UPDATE_SETTING","Input","ProfileContext","SuccessMsg","SoilHumiditySensor","LightSensor","Select","Plug","DistanceSensor","AuthContext","hasDittoBotUpdatedInLastMinute","getLastNumOfSensor","getSensorWithoutNumber","moment","YourPlants","deviceType","userRefetch","state","dispatch","authDispatch","notifyOnNetworkStatusChange","fetchPolicy","loading","error","data","intl","name","setPlantName","openTab","setOpenTab","errorId","setErrorId","plantId","setControllerID","userinfoMsg","setUserinfoMsg","sensorSelected","setSensor","timezoneSelected","setTimezone","addPlant","updateSetting","deleteSetting","plants","message","shouldNotAssignRelay","plant","field","value","relayOneIdRelated","relayTwoIdRelated","sensors","map","module","texto1","formatMessage","id","defaultMessage","texto2","b","confirm","console","log","defaultSettingValuesIfModeChanges","settingType","mode","settingIndex","findIndex","getDefaultSetting","NONE","logs","isClean","minWarning","maxWarning","Number","setTimeout","handleSettingsChange","a","type","payload","dispatchSettingSave","handleAddDittoBotClick","variables","getUser","handleUpdateDittoControllerName","handleDeleteSensor","plantSelected","settingName","plantIndex","onDeleteSchedule","scheduleIndex","scheduledOnTimes","splice","input","settingTypeName","whatsappWarningsOn","relayOneAutomatedTimeToRun","relayTwoAutomatedStartedTime","relayOneAutomatedStartedTime","relayOneWorking","relayTwoAutomatedTimeToRun","relayTwoWorking","fieldName","fieldValue","getSensorCompleteName","sensorNewNumber","lastSensorNum","rawSensorTypeName","isNaN","dispatchNewSettingSave","completeSensorTypeName","setting","selectStyle","control","styles","width","textAlign","sensorsOptions","DISTANCE","label","SOIL_HUMIDITY","HUMIDITY_TEMPETURE","LIGHT","PLUG","timezonesList","timezone","length","i","e","target","timestamp","format","justifyContent","index"],"mappings":"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","sourcesContent":["import React,  { useState, useEffect, useContext } from 'react';\nimport Link from 'next/link';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, RelaysIds, SensorsTypes, timezones } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\n\nimport {\n  PlantsPageContainer,\n  OrderDetails,\n  BlockTitle,\n  Text,\n  ListItem,\n  ListTitle,\n  ListDes,\n  ButtonText,\n  PlantPageWrapper,\n  PlantsWrapper,\n  PlantsSensorContainer,\n  Column1,\n  Row1,\n  CardButtons,\n  DashboardContainer,\n  SensorsWrapper\n} from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER, GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, DELETE_SETTING, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\nimport { ISetting } from 'utils/types';\nimport Select from 'react-select';\nimport Plug from './sensors/Plug';\nimport DistanceSensor from './sensors/DistanceSensor';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { hasDittoBotUpdatedInLastMinute, getLastNumOfSensor, getSensorWithoutNumber } from 'utils/ditto-bot';\nimport moment from 'moment';\n  \n\ntype YourPlantsProps = {\n  data?: any;\n  userRefetch: any;\n  index?: Number;\n  Router?: any;\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst YourPlants: React.FC<YourPlantsProps> = ({ deviceType, userRefetch }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const {authDispatch} = useContext<any>(AuthContext);\n\n  const { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    // pollInterval: 5000,\n  });\n\n  // const { loading1, error1, data1 = {} } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n  //   notifyOnNetworkStatusChange: true,\n  //   fetchPolicy: \"network-only\",\n  //   // pollInterval: 5000,\n  // });\n  \n  // const router = useRouter();\n  const intl = useIntl();\n  const [name, setPlantName] = useState('');\n  const [openTab, setOpenTab] = useState('');\n  const [errorId, setErrorId] = useState('');\n  const [plantId, setControllerID] = useState('');\n  const [userinfoMsg, setUserinfoMsg] = useState('');\n  const [sensorSelected, setSensor] = useState('');\n  const [timezoneSelected, setTimezone] = useState('');\n  const [addPlant] = useMutation(ADD_PLANT);\n  \n  const [updateSetting] = useMutation(UPDATE_SETTING);\n  const [deleteSetting] = useMutation(DELETE_SETTING);\n  const { plants } = state;\n\n  if (loading) {\n    return <ErrorMessage message={'Cargando...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  const shouldNotAssignRelay = (plant: any, field: string, value: string | boolean) => {\n    const relayOneIdRelated = 'relayOneIdRelated';\n    const relayTwoIdRelated = 'relayTwoIdRelated';\n\n    if (field !== relayOneIdRelated && field !== relayTwoIdRelated) return false;\n\n    plant.sensors.map((module) => {\n      if ((module[relayOneIdRelated] === value || module[relayTwoIdRelated] === value ) && value !== '') {\n        const texto1 = intl.formatMessage({ id: 'relayAlreadyAssinged', defaultMessage: 'Relay already assigned in ' });\n        const texto2 = intl.formatMessage({ id: 'relayAlreadyAssinged2', defaultMessage: 'desigagned  ' });\n        const b = confirm(texto1 + module.name + texto2);\n        console.log('asdasd', b)\n        if (b) return false;\n        return false;\n      }\n    })\n\n   return false;\n  };\n\n  const defaultSettingValuesIfModeChanges = (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => {\n    const mode = 'mode';\n    if (field !== mode) return plant;\n\n    const settingIndex = plant.sensors.findIndex((module: ISetting) => module.settingType === settingType);            \n    plant.sensors[settingIndex] = getDefaultSetting(settingType, plant.sensors[settingIndex].name, value === CommonMode.NONE ? [] : plant.sensors[settingIndex].logs);\n    \n   return module;\n  };\n\n  const isClean = (plant: any, field: string, value: string | boolean) => {\n    // min max checks\n    const minWarning = 'minWarning';\n    const maxWarning = 'maxWarning';\n\n    if (field !== minWarning && field !== maxWarning) return true;\n    if (Number(value) < 0 || Number(value) > 100) {\n      setErrorId(field);\n      setTimeout(() => {\n          setErrorId('')\n      }, 2000)\n      return false;\n    }\n    setErrorId(''); \n\n    // add more checks\n    return true;\n  };\n\n  const handleSettingsChange = (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => {\n    // if we want to stop user to reuse plugs, uncomment line bellow\n\n    const a = shouldNotAssignRelay(plant, field, value);\n    \n    if (a) return;\n    plant = defaultSettingValuesIfModeChanges(plant, field, value, settingType);\n\n    dispatch({ type: settingType, payload: { plant, value, field } });\n\n    isClean(plant, field, value) && dispatchSettingSave(plant, field, value, settingType);\n\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000)\n  };\n  \n  const handleAddDittoBotClick = () => {\n    addPlant({\n      variables: {\n        id: data?.getUser?.id,\n        name,\n        plantId: Number(plantId)\n      },\n    });\n\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const handleUpdateDittoControllerName = (plant, name: string) => {\n    setTimeout(function () {\n      addPlant({\n        variables: {\n          id: data?.getUser?.id,\n          name,\n          plantId: plant.plantId\n        },\n      });\n  \n    }, 2000)\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const handleDeleteSensor = (plantSelected: any, settingType: SensorsTypes) => {\n    deleteSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plantSelected.plantId,\n        settingName: settingType\n      },\n    });\n\n    const plantIndex = plants.findIndex((plant: any) => plant.plantId === plantSelected.plantId);            \n    const settingIndex = plants[plantIndex].sensors.findIndex((module: ISetting) => module.settingType === settingType);            \n\n    dispatch({ type: 'DELETE_MODULE', payload: {plantIndex, settingIndex }});\n\n    setUserinfoMsg('deleted setting successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const onDeleteSchedule = (plant: any, settingType: SensorsTypes, scheduleIndex: number) => {\n    const settingIndex = plant.sensors.findIndex((module: ISetting) => module.settingType === settingType);            \n    plant.sensors[settingIndex]?.scheduledOnTimes.splice(scheduleIndex, 1);\n    \n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: { ...plant.sensors[settingIndex], settingType: settingType }\n      },\n    });\n\n    setUserinfoMsg('deleted schedule successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const getDefaultSetting = (settingTypeName: string, name?: string, logs?: string) => { \n    return {\n      name: name || '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: logs || [],\n      scheduledOnTimes: [],\n      settingType: settingTypeName\n    }\n}\n    \n  const dispatchSettingSave = (plant: any, fieldName: string, fieldValue: string | boolean, settingType: SensorsTypes) => {\n    console.log('plant:', )\n    const settingIndex = plant.sensors.findIndex((module: ISetting) => module.settingType === settingType);\n    plant.sensors[settingIndex][fieldName] = fieldValue;\n\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: plant.sensors[settingIndex]\n      },\n    });\n  };\n  \n  const getSensorCompleteName = (plant, settingType: SensorsTypes) => {\n    let sensorNewNumber = 1;\n\n    plant?.sensors?.map((module: ISetting) => {\n      let lastSensorNum = getLastNumOfSensor(module.settingType);\n      const rawSensorTypeName = getSensorWithoutNumber(module?.settingType);\n\n      if (!isNaN(lastSensorNum) && rawSensorTypeName === settingType) {\n        sensorNewNumber = lastSensorNum + 1;\n      }\n    });\n\n    return `${settingType}_${sensorNewNumber}`;\n  };\n\n  const dispatchNewSettingSave = (plant: any, settingType: SensorsTypes, plantIndex: number) => {\n    const completeSensorTypeName = getSensorCompleteName(plant, settingType);\n\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(completeSensorTypeName)\n      },\n    });\n\n    dispatch({ type: 'ADD_MODULE', payload: {plantIndex, setting: getDefaultSetting(completeSensorTypeName) }});\n  };\n\n  const selectStyle = { control: styles => ({ ...styles, width: '120px', textAlign: 'left' }) };\n  const sensorsOptions = [\n    { value: SensorsTypes.DISTANCE, label: intl.formatMessage({ id: 'distanceId', defaultMessage: 'distanceId' }) },\n    { value: SensorsTypes.SOIL_HUMIDITY, label: intl.formatMessage({ id: 'moistHumidityId', defaultMessage: 'moistHumidityId' }) },\n    { value: SensorsTypes.HUMIDITY_TEMPETURE, label: intl.formatMessage({ id: 'airHumidityAndTempetureId', defaultMessage: 'airHumidityAndTempetureId' }) },\n    { value: SensorsTypes.LIGHT, label: intl.formatMessage({ id: 'lightSensorId', defaultMessage: 'lightSensorId' }) },\n    { value: SensorsTypes.PLUG, label: intl.formatMessage({ id: 'intelligentPlugId', defaultMessage: 'intelligentPlugId' }) },\n  ];\n\n  const timezonesList = timezones.map((timezone: string) => ({ value: timezone, label: timezone  }))\n\n  return (\n    <PlantPageWrapper>\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <Link href=\"/profile\">\n          <a className=\"home-btn\">\n            <FormattedMessage id=\"backProfileBtn\" defaultMessage=\"Back to Profile\" />\n          </a>\n        </Link>\n\n        <OrderDetails>\n          <BlockTitle>\n            <FormattedMessage\n              id=\"dittoBotsIds\"\n              defaultMessage=\"dittoBotsIds\"\n            />\n          </BlockTitle>\n\n          { plants?.length < 1 && (<Text>{intl.formatMessage({ id: 'noDittoBotsTextId', defaultMessage: 'noDittoBotsTextId' })}</Text>) }\n          { plants?.map((plant, i: number) => {\n            const { sensors } = plant;\n            console.log('sensors', sensors)\n              return (\n                <DashboardContainer key={i + '-orderList'}>\n                  <Row1>\n                    <Column1>\n                      <ListItem>\n                        <ListTitle>\n                          <Text bold>\n                            <FormattedMessage\n                              id=\"controllerNameId\"\n                              defaultMessage=\"controllerNameId\"\n                            />\n                          </Text>\n                        </ListTitle>\n                        <ListDes>\n                          <Input\n                            type='text'\n                            name='name'\n                            disabled={true}\n                            value={plant?.name}\n                            // we have to change the onChange because the is no one for the controller name actualy\n                            onChange={(e: any) => handleUpdateDittoControllerName(plant, e.target.value)}\n                            backgroundColor='#F7F7F7'\n                            width='197px'\n                            height='34.5px'\n                          />\n                        </ListDes>\n                      </ListItem>\n\n                      <ListItem>\n                        <ListTitle>\n                          <Text bold>\n                                                 {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}{/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                            <FormattedMessage\n                              id=\"statusId\"\n                              defaultMessage=\"statusId\"\n                            />\n                                                 {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}{/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                          </Text>\n                        </ListTitle>\n                        <ListDes>\n                          <Text>{plant.timestamp?.length > 0 ? moment(plant.timestamp).format('hh:mm A - DD MMM') : ''} {hasDittoBotUpdatedInLastMinute(plant.timestamp) ? '[ONLINE]' : '[OFFLINE]'}</Text>\n                        </ListDes>\n                      {/* <Reading> */}{/* <Reading> */}\n\n                      <ListItem style={{ justifyContent: 'flex-start' }}>\n                        <ListTitle>\n                        <Text bold>\n                            <FormattedMessage\n                            id=\"addSensorId\"\n                            defaultMessage=\"addSensorId\"\n                            />\n                        </Text>\n                        </ListTitle>\n                        <ListDes>\n                        <Select \n                            onChange={(e: any) => dispatchNewSettingSave(plant, e.value, i)}\n                            value={sensorSelected}\n                            // @ts-ignore\n                            options={sensorsOptions}\n                            styles={selectStyle}\n                            menuPosition={'fixed'}\n                        />\n                        </ListDes>\n                      </ListItem>\n\n                      <ListItem style={{ justifyContent: 'flex-start' }}>\n                          <ListTitle>\n                            <Text bold>\n                                <FormattedMessage\n                                id=\"timezone\"\n                                defaultMessage=\"timezone\"\n                                />\n                            </Text>\n                          </ListTitle>\n                          <ListDes>\n                            <Select \n                                onChange={(e: any) => dispatchNewSettingSave(plant, e.value, i)}\n                                value={timezoneSelected}\n                                // @ts-ignore\n                                options={timezonesList}\n                                styles={selectStyle}\n                                menuPosition={'fixed'}\n                            />\n                          </ListDes>\n                        </ListItem>\n                      </ListItem>\n\n\n                      {/* <ListItem style={{ justifyContent: 'flex-start' }}>\n                        <ListTitle>\n                        <Text bold>\n                            <FormattedMessage\n                            id=\"changePlantTypeId\"\n                            defaultMessage=\"changePlantTypeId\"\n                            />\n                        </Text>\n                        </ListTitle>\n                        <ListDes>\n                        <Select \n                            onChange={(e: any) => dispatchNewSettingSave(plant, e.value, i)}\n                            value={sensorSelected}\n                            // @ts-ignore\n                            options={sensorsOptions}\n                            styles={selectStyle}\n                            menuPosition={'fixed'}\n                        />\n                        </ListDes>\n                      </ListItem> */}\n\n                    </Column1>\n                  </Row1>\n                  <SensorsWrapper>\n                  { sensors?.map((module: ISetting, index: number) => {\n                      switch (module?.settingType) {\n                        case `${SensorsTypes.SOIL_HUMIDITY}_1`:\n                        case `${SensorsTypes.SOIL_HUMIDITY}_2`:\n                        case `${SensorsTypes.SOIL_HUMIDITY}_3`:\n                          // check the number of same setting to send\n                          return (\n                            <SoilHumiditySensor \n                              key={i + module.settingType}\n                              data={data}\n                              plant={plant}\n                              errorId={errorId}\n                              openTab={openTab}\n                              handleDeleteSensor={handleDeleteSensor}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.LIGHT}_1`:\n                          return (\n                            <LightSensor \n                              key={i + module.settingType}\n                              data={data}\n                              errorId={errorId}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.DISTANCE}_1`:\n                          return (\n                            <DistanceSensor\n                              key={i + module.settingType}\n                              data={data}\n                              plant={plant}\n                              errorId={errorId}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.PLUG}_1`:\n                          return (\n                            <Plug\n                              key={i + module.settingType}\n                              data={data}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                      \n                        default:\n                          break;\n                      }\n                    })}\n                  </SensorsWrapper>\n                   \n                </DashboardContainer>\n              )\n            })\n          }\n\n          {userinfoMsg && (\n              <SuccessMsg>\n                <FormattedMessage\n                  id='userInfoSuccess'\n                  defaultMessage={userinfoMsg}\n                />\n              </SuccessMsg>\n          )}\n\n        </OrderDetails>\n      </PlantsPageContainer>\n\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <BlockTitle>\n          <FormattedMessage\n            id=\"addController\"\n            defaultMessage=\"Your Plants\"\n          />\n        </BlockTitle>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantNameField'\n                defaultMessage='Name of the plant'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='text'\n              name='name'\n              value={name}\n              onChange={(e) => setPlantName(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'plantNamePlaceholderId', defaultMessage: 'Balcony plants' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantIdField'\n                defaultMessage='ID of the controller'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='number'\n              name='plantId'\n              value={plantId}\n              onChange={(e) => setControllerID(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'serialNumberPlaceholderId', defaultMessage: 'Look behind Ditto Bot' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <Button className=\"cart-button\" variant=\"secondary\" borderRadius={100} onClick={handleAddDittoBotClick}>\n          <ButtonText>\n            <FormattedMessage id={\"addDittoBotButton\"} defaultMessage=\"Add plant\" />\n          </ButtonText>\n        </Button>\n      </PlantsPageContainer>\n    </PlantPageWrapper>\n  );\n};\n\nexport default YourPlants;\n"]},"metadata":{},"sourceType":"module"}