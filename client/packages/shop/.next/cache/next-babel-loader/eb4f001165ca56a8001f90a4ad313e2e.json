{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/ditto-market/ditto-market.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantsPageContainer, PlantPageWrapper } from './ditto-market.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport ReactMapboxGl, { Layer } from 'react-mapbox-gl';\nimport { GeolocateControl } from \"mapbox-gl\";\n\nconst DittoMarket = ({\n  deviceType,\n  userRefetch\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    authDispatch\n  } = useContext(AuthContext);\n  const {\n    loading,\n    error,\n    data = {}\n  } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n  });\n  const {\n    0: viewport,\n    1: setViewport\n  } = useState({\n    height: \"100%\",\n    width: \"100%\"\n  });\n  const intl = useIntl();\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n  const Map = ReactMapboxGl({\n    accessToken: 'pk.eyJ1IjoiZXN0ZWJhbm11cnV6YWJhbCIsImEiOiJjbG4ybGZzYmcwMWQwMmlvMDVrbHhheno3In0.EZPhoOcmHwM3BFhGkrQ2-A'\n  });\n\n  const onMapLoad = map => {\n    map.addControl(new GeolocateControl());\n  };\n\n  return __jsx(PlantPageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: \"home-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"backProfileBtn\",\n    defaultMessage: \"Back to Profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }))), __jsx(Map, {\n    style: \"mapbox://styles/mapbox/streets-v9\",\n    onStyleLoad: onMapLoad,\n    animationOptions: {\n      animate: false\n    },\n    movingMethod: 'jumpTo',\n    containerStyle: {\n      height: '100vh',\n      width: '100vw'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(Layer, {\n    type: \"symbol\",\n    id: \"marker\",\n    layout: {\n      'icon-image': 'marker-15'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default DittoMarket;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/ditto-market/ditto-market.tsx"],"names":["React","useState","useContext","Link","useQuery","ErrorMessage","PlantsPageContainer","PlantPageWrapper","FormattedMessage","useIntl","GET_LOGGED_IN_USER","ProfileContext","AuthContext","ReactMapboxGl","Layer","GeolocateControl","DittoMarket","deviceType","userRefetch","state","dispatch","authDispatch","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","viewport","setViewport","height","width","intl","message","Map","accessToken","onMapLoad","map","addControl","animate"],"mappings":";;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAAsCC,UAAtC,QAAwD,OAAxD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAsBC,QAAtB,QAAsC,qBAAtC;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SACEC,mBADF,EAEEC,gBAFF,QAGO,sBAHP;AAIA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,YAA1C;AACA,SAASC,kBAAT,QAAgE,8BAAhE;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,OAAOC,aAAP,IAAwBC,KAAxB,QAA8C,iBAA9C;AACA,SAASC,gBAAT,QAAiC,WAAjC;;AAcA,MAAMC,WAAuC,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAiC;AAC/E,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBlB,UAAU,CAACS,cAAD,CAAtC;AACA,QAAM;AAACU,IAAAA;AAAD,MAAiBnB,UAAU,CAAMU,WAAN,CAAjC;AAEA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAI,GAAG;AAAzB,MAAgCpB,QAAQ,CAACM,kBAAD,EAAqB;AACjEe,IAAAA,2BAA2B,EAAE,IADoC;AAEjEC,IAAAA,WAAW,EAAE,cAFoD,CAGjE;;AAHiE,GAArB,CAA9C;AAMA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0B3B,QAAQ,CAAC;AACvC4B,IAAAA,MAAM,EAAE,MAD+B;AAEvCC,IAAAA,KAAK,EAAE;AAFgC,GAAD,CAAxC;AAKA,QAAMC,IAAI,GAAGtB,OAAO,EAApB;;AAEA,MAAIa,OAAJ,EAAa;AACX,WAAO,MAAC,YAAD;AAAc,MAAA,OAAO,EAAE,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAAA;;AAED,MAAIC,KAAJ,EAAW;AACT,WACE,MAAC,YAAD;AAAc,MAAA,OAAO,EAAEA,KAAK,CAACS,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAAA;AAED,QAAMC,GAAG,GAAGpB,aAAa,CAAC;AACxBqB,IAAAA,WAAW,EACT;AAFsB,GAAD,CAAzB;;AAKA,QAAMC,SAAS,GAAGC,GAAG,IAAI;AACvBA,IAAAA,GAAG,CAACC,UAAJ,CAAe,IAAItB,gBAAJ,EAAf;AACD,GAFD;;AAIA,SACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAqB,IAAA,KAAK,EAAE;AAAEe,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,gBAArB;AAAsC,IAAA,cAAc,EAAC,iBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EAME,MAAC,GAAD;AACE,IAAA,KAAK,EAAC,mCADR;AAEE,IAAA,WAAW,EAAEK,SAFf;AAGE,IAAA,gBAAgB,EAAE;AAACG,MAAAA,OAAO,EAAE;AAAV,KAHpB;AAIE,IAAA,YAAY,EAAE,QAJhB;AAKE,IAAA,cAAc,EAAE;AACdT,MAAAA,MAAM,EAAE,OADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,EAAE,EAAC,QAAxB;AAAiC,IAAA,MAAM,EAAE;AAAE,oBAAc;AAAhB,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CANF,CADF,CADF;AAyBD,CA7DD;;AA+DA,eAAed,WAAf","sourcesContent":["import React,  { useState, useEffect, useContext } from 'react';\nimport Link from 'next/link';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport ErrorMessage from 'components/error-message/error-message';\n\nimport {\n  PlantsPageContainer,\n  PlantPageWrapper,\n} from './ditto-market.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER, GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport { GeolocateControl } from \"mapbox-gl\";\n\ntype DittoMarketProps = {\n  data?: any;\n  userRefetch: any;\n  index?: Number;\n  Router?: any;\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst DittoMarket: React.FC<DittoMarketProps> = ({ deviceType, userRefetch }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const {authDispatch} = useContext<any>(AuthContext);\n\n  const { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    // pollInterval: 5000,\n  });\n\n  const [viewport, setViewport] = useState({\n    height: \"100%\",\n    width: \"100%\"\n  });\n\n  const intl = useIntl();\n\n  if (loading) {\n    return <ErrorMessage message={'Cargando...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  const Map = ReactMapboxGl({\n    accessToken:\n      'pk.eyJ1IjoiZXN0ZWJhbm11cnV6YWJhbCIsImEiOiJjbG4ybGZzYmcwMWQwMmlvMDVrbHhheno3In0.EZPhoOcmHwM3BFhGkrQ2-A'\n  });\n\n  const onMapLoad = map => {\n    map.addControl(new GeolocateControl());\n  };  \n  \n  return (\n    <PlantPageWrapper>\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <Link href=\"/profile\">\n          <a className=\"home-btn\">\n            <FormattedMessage id=\"backProfileBtn\" defaultMessage=\"Back to Profile\" />\n          </a>\n        </Link>\n        <Map\n          style=\"mapbox://styles/mapbox/streets-v9\"\n          onStyleLoad={onMapLoad}\n          animationOptions={{animate: false}}\n          movingMethod={'jumpTo'}\n          containerStyle={{\n            height: '100vh',\n            width: '100vw'\n          }}\n        >\n          <Layer type=\"symbol\" id=\"marker\" layout={{ 'icon-image': 'marker-15' }}>\n            {/* <Feature coordinates={[-0.481747846041145, 51.3233379650232]} /> */}\n          </Layer>\n        </Map>\n      </PlantsPageContainer>\n    </PlantPageWrapper>\n  );\n};\n\nexport default DittoMarket;\n"]},"metadata":{},"sourceType":"module"}