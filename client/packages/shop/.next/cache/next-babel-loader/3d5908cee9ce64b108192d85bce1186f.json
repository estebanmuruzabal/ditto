{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'assets/styles/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL, isLocale } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nimport { Locales } from 'utils/constant';\nvar LanguageContext = React.createContext({}); // import { GoogleMap, useLoadScript, Marker } from \"@react-google-maps/api\";\n\nexport var LanguageProvider = function LanguageProvider(_ref) {\n  var children = _ref.children,\n      messages = _ref.messages;\n\n  var _React$useState = React.useState('en'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      locale = _React$useState2[0],\n      setLocale = _React$useState2[1];\n\n  var OPEN_CAGE_KEY = process.env.OPEN_CAGE_KEY;\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      location = _React$useState4[0],\n      setLocation = _React$useState4[1];\n\n  var changeLanguage = function changeLanguage(newLocale) {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n\n  React.useEffect(function () {\n    setLocateBasedOnLocation();\n  }, [locale, location]);\n\n  var setLocateBasedOnLocation = function setLocateBasedOnLocation() {\n    var isUs = location.toLowerCase().includes('united states');\n    var isAr = location.toLowerCase().includes('argentina');\n\n    if (isUs && locale !== Locales.EN) {\n      changeLanguage(Locales.EN);\n    } else if (isAr && locale !== Locales.ES) {\n      changeLanguage(Locales.ES);\n    }\n  }; // const { isLoaded } = useLoadScript({\n  //   googleMapsApiKey: 'AIzaSyBfOLWnTDHvAxu7eftvpbiGT54bcOZgwS0',\n  // });\n  // console.log('isLoaded',isLoaded)\n\n\n  React.useEffect(function () {\n    if (navigator.geolocation) {\n      navigator.permissions.query({\n        name: \"geolocation\"\n      }).then(function (result) {\n        // console.log(result);\n        if (result.state === \"granted\") {\n          //If granted then you can directly call your function here\n          navigator.geolocation.getCurrentPosition(success, errors, options);\n        } else if (result.state === \"prompt\") {\n          //If prompt then the user will be asked to give permission\n          navigator.geolocation.getCurrentPosition(success, errors, options);\n        } else if (result.state === \"denied\") {//If denied then you have to show instructions to enable location\n        }\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  function getLocationInfo(latitude, longitude) {\n    var url = \"https://api.opencagedata.com/geocode/v1/json?q=\".concat(latitude, \",\").concat(longitude, \"&key=9224762c77b8486bb04d32f036690d2f\");\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      if (data.status.code === 200) {\n        // console.log(\"results:\", data.results);\n        setLocation(data.results[0].formatted);\n      } else {\n        console.log(\"Reverse geolocation request failed.\");\n      }\n    })[\"catch\"](function (error) {\n      return console.error(error);\n    });\n  }\n\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    var crd = pos.coords; // console.log(\"Your current position is:\");\n    // console.log(`Latitude : ${crd.latitude}`);\n    // console.log(`Longitude: ${crd.longitude}`);\n    // console.log(`More or less ${crd.accuracy} meters.`);\n\n    getLocationInfo(crd.latitude, crd.longitude);\n  }\n\n  function errors(err) {\n    console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n  }\n\n  React.useEffect(function () {\n    var localSetting = Cookie.get('locale');\n\n    if (localSetting && isLocale(localSetting)) {\n      document.documentElement.lang = localSetting;\n      setLocale(localSetting);\n    }\n  }, [locale]);\n  var isRtl = isRTL(locale);\n  return __jsx(LanguageContext.Provider, {\n    value: {\n      locale: locale,\n      changeLanguage: changeLanguage,\n      isRtl: isRtl,\n      location: location\n    }\n  }, __jsx(IntlProvider, {\n    locale: locale,\n    messages: messages[locale]\n  }, __jsx(InjectRTL, {\n    lang: locale,\n    dir: isRtl ? 'rtl' : 'ltr'\n  }, __jsx(StyleSheetManager, {\n    stylisPlugins: []\n  }, children))));\n};\nexport var useLocale = function useLocale() {\n  return React.useContext(LanguageContext);\n};","map":null,"metadata":{},"sourceType":"module"}