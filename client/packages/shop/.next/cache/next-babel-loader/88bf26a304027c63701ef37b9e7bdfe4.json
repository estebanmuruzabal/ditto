{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Col } from 'react-styled-flexboxgrid';\nimport { openModal } from '@redq/reuse-modal';\nimport RadioCard from 'components/radio-card/radio-card';\nimport { WorkContext } from 'contexts/work/work.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { DELETE_ADDRESS, SETPRIMARY_ADDRESS } from 'graphql/mutation/address';\nimport { UPDATE_USER_TODO_TASKS, UPDATE_USER_WORK_INFO } from 'graphql/mutation/user';\nimport { CHANGE_PASSWORD } from 'graphql/mutation/changePassword';\nimport { DELETE_CARD } from 'graphql/mutation/card';\nimport { DELETE_PHONENUMBER, SETPRIMARY_PHONENUMBER } from 'graphql/mutation/phone';\nimport { SettingsForm, SettingsFormContent, HeadingSection, Title, Row, ButtonGroup } from './work.style';\nimport RadioGroupThree from 'components/radio-group/radio-group-three';\nimport { UPDATE_ME } from 'graphql/mutation/me';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label } from 'components/forms/label';\nimport Switch from 'components/switch/switch';\nimport moment from 'moment';\nimport { timeZone } from 'utils/constant';\n\nconst WorkContent = ({\n  deviceType\n}) => {\n  var _state$workInfo, _state$workInfo2, _state$workInfo3, _state$workInfo4, _state$workInfo5, _state$workInfo6, _state$workInfo8, _state$workInfo8$rate, _state$workInfo9, _state$workInfo10, _state$workInfo10$tot;\n\n  const {\n    state,\n    dispatch\n  } = useContext(WorkContext);\n  const {\n    0: userinfoMsg,\n    1: setUserinfoMsg\n  } = useState('');\n  const {\n    0: isChambeanding,\n    1: setChamba\n  } = useState(false);\n  const {\n    0: passwordChangeMsg,\n    1: setPasswordChangeMsg\n  } = useState('');\n  const {\n    authState: {\n      isAuthenticated\n    },\n    authDispatch\n  } = React.useContext(AuthContext);\n  const [updateMeMutation] = useMutation(UPDATE_ME);\n  const [deletePaymentCardMutation] = useMutation(DELETE_CARD);\n  const [updateUserTodoMutation] = useMutation(UPDATE_USER_TODO_TASKS);\n  const [updateUserInfoMutation] = useMutation(UPDATE_USER_WORK_INFO);\n  const [changePasswordMutation] = useMutation(CHANGE_PASSWORD);\n  const [deletePhoneNumberMutation] = useMutation(DELETE_PHONENUMBER);\n  const [setprimaryPhoneNumberMutation] = useMutation(SETPRIMARY_PHONENUMBER);\n  const [setprimaryAddressMutation] = useMutation(SETPRIMARY_ADDRESS);\n  const [deleteAddressMutation] = useMutation(DELETE_ADDRESS);\n  const intl = useIntl();\n  const {\n    delivery_address,\n    card,\n    name,\n    email,\n    id,\n    phones\n  } = state;\n\n  const updateUserWorkInfoMutation = async logDescription => {\n    const {\n      workInfo,\n      id\n    } = state;\n    const {\n      isWorking,\n      startedWorkTime,\n      stoppedWorkTime,\n      ratePerHour,\n      totalWorkingMinutesPerWeek,\n      totalSalaryToPayWeekly,\n      advancedSalaryPaid,\n      taskRelated\n    } = workInfo;\n    await updateUserInfoMutation({\n      variables: {\n        id,\n        isWorking,\n        startedWorkTime,\n        stoppedWorkTime,\n        ratePerHour,\n        logDescription,\n        totalWorkingMinutesPerWeek,\n        totalSalaryToPayWeekly,\n        advancedSalaryPaid,\n        taskRelated,\n        role: state.role\n      }\n    });\n    setUserinfoMsg('Update user work info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  const stopWorking = () => {\n    const user = state;\n    if (!user.workInfo) user.workInfo = {};\n    user.workInfo.isWorking = false;\n    user.workInfo.stoppedWorkTime = new Date().toLocaleString('en-US', {\n      timeZone\n    });\n    const startedWorkTime = moment(new Date(user.workInfo.startedWorkTime));\n    const stoppedWorkTime = moment(new Date(user.workInfo.stoppedWorkTime));\n    const workedInMinutes = stoppedWorkTime.diff(startedWorkTime, 'minutes');\n    const ratePerMinute = user.workInfo.ratePerHour / 60;\n    user.workInfo.totalWorkingMinutesPerWeek += workedInMinutes;\n    user.workInfo.totalSalaryToPayWeekly = Number(user.workInfo.totalWorkingMinutesPerWeek) * Number(ratePerMinute) - Number(user.workInfo.advancedSalaryPaid); // user.logs.push({\n    //   logDescription: ,\n    //   timestamp: new Date().toLocaleString('en-US', { timeZone: })\n    // });\n\n    dispatch({\n      type: 'HANDLE_WORK_CHANGE',\n      payload: {\n        workInfo: user.workInfo,\n        logs: user.logs\n      }\n    });\n    updateUserWorkInfoMutation(`finished working.`);\n  };\n\n  const startWorking = () => {\n    const user = state;\n    if (!user.workInfo) user.workInfo = {};\n    user.workInfo.isWorking = true;\n    user.workInfo.startedWorkTime = new Date().toLocaleString('en-US', {\n      timeZone\n    });\n    user.workInfo.stoppedWorkTime = null;\n    user.workInfo.ratePerHour = 300; // user.logs.push({\n    //   logDescription: ,\n    //   timestamp: new Date().toLocaleString('en-US', { timeZone })\n    // })\n\n    dispatch({\n      type: 'HANDLE_WORK_CHANGE',\n      payload: {\n        workInfo: user.workInfo,\n        logs: user.logs\n      }\n    });\n    updateUserWorkInfoMutation(`started working.`);\n  };\n\n  const handleTaskChange = async (task, action) => {\n    const {\n      id,\n      tasks\n    } = state;\n    const completationTimes = task.isRepetitived ? (Number(task.completationTimes) + 1).toString() : task.completationTimes;\n    const taskIndex = tasks === null || tasks === void 0 ? void 0 : tasks.findIndex(t => t.taskId === task.taskId);\n    let taskUpdated;\n\n    switch (action) {\n      case 'stop':\n        const finishDate = new Date().toLocaleString('en-US', {\n          timeZone\n        });\n        const workedHours = getDurationTimeInHours(task.startDate, finishDate);\n        taskUpdated = {\n          id,\n          taskId: task.taskId,\n          description: task.description,\n          startDate: task.startDate,\n          finishDate,\n          plannedDate: task.plannedDate,\n          isRepetitived: task.isRepetitived,\n          completationTimes,\n          workedHours: workedHours,\n          isDone: true\n        };\n        break;\n\n      case 'start':\n        const startDate = new Date().toLocaleString('en-US', {\n          timeZone\n        });\n        taskUpdated = {\n          id,\n          taskId: task.taskId,\n          description: task.description,\n          startDate: startDate,\n          finishDate: task.finishDate,\n          plannedDate: task.plannedDate,\n          isRepetitived: task.isRepetitived,\n          completationTimes,\n          workedHours: task.workedHours,\n          isDone: task.isDone\n        };\n        break;\n\n      default:\n        taskUpdated = task;\n        break;\n    }\n\n    tasks[taskIndex] = taskUpdated;\n    dispatch({\n      type: 'HANDLE_TODO_TASKS',\n      payload: {\n        tasks\n      }\n    });\n    return await updateUserTodoMutation({\n      variables: _objectSpread({}, taskUpdated)\n    });\n  };\n\n  const getDurationTimeInHours = (start, finish) => {\n    const startDate = moment(new Date(start));\n    const finishDate = moment(new Date(finish));\n    const duration = moment.duration(finishDate.diff(startDate));\n    const hours = duration.asHours();\n    const minutes = duration.asHours();\n    return `${parseInt(duration.asHours().toString())}:${parseInt(duration.asMinutes().toString()) % 60}`;\n  }; // Add or edit modal\n\n\n  const handleModal = (modalComponent, modalProps = {}, className = 'add-address-modal') => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  const h = ((_state$workInfo = state.workInfo) === null || _state$workInfo === void 0 ? void 0 : _state$workInfo.totalWorkingMinutesPerWeek) / 60 | 0;\n  const m = ((_state$workInfo2 = state.workInfo) === null || _state$workInfo2 === void 0 ? void 0 : _state$workInfo2.totalWorkingMinutesPerWeek) % 60 | 0;\n  const subtotalSalario = Number((_state$workInfo3 = state.workInfo) === null || _state$workInfo3 === void 0 ? void 0 : _state$workInfo3.totalWorkingMinutesPerWeek) / 60 * Number((_state$workInfo4 = state.workInfo) === null || _state$workInfo4 === void 0 ? void 0 : _state$workInfo4.ratePerHour);\n  const pendingTasks = state === null || state === void 0 ? void 0 : state.tasks.filter(task => task.startDate.length === 0 && task.finishDate.length === 0 && task.isDone === false || task.isRepetitived);\n  const inProgressTasks = state === null || state === void 0 ? void 0 : state.tasks.filter(task => task.startDate.length > 1 && task.finishDate.length === 0);\n  return __jsx(SettingsForm, null, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"workPageTitle\",\n    defaultMessage: \"Ditto Farm\"\n  }))), __jsx(Col, {\n    style: {\n      alignItems: 'flex-end',\n      marginBottom: '50px'\n    }\n  }, __jsx(Row, {\n    style: {\n      marginBottom: '15px'\n    }\n  }, __jsx(Switch, {\n    label: `Usted se encuentra: ${((_state$workInfo5 = state.workInfo) === null || _state$workInfo5 === void 0 ? void 0 : _state$workInfo5.isWorking) ? 'Chambeando' : 'Vagando'}`,\n    disabled: false,\n    checked: (_state$workInfo6 = state.workInfo) === null || _state$workInfo6 === void 0 ? void 0 : _state$workInfo6.isWorking,\n    labelPosition: 'right' // className,\n    ,\n    onUpdate: () => {\n      var _state$workInfo7;\n\n      return ((_state$workInfo7 = state.workInfo) === null || _state$workInfo7 === void 0 ? void 0 : _state$workInfo7.isWorking) ? stopWorking() : startWorking();\n    } // style\n\n  })), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"profileNameField\",\n    defaultMessage: \"Your Name\"\n  })), __jsx(Label, null, state.name)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"workedHours\",\n    defaultMessage: \"workedHours\"\n  })), __jsx(Label, null, `${h}:${Number(m) >= 9 ? m : '0' + m} hs`)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"salaryPerHour\",\n    defaultMessage: \"salaryPerHour\"\n  })), __jsx(Label, null, `$${((_state$workInfo8 = state.workInfo) === null || _state$workInfo8 === void 0 ? void 0 : (_state$workInfo8$rate = _state$workInfo8.ratePerHour) === null || _state$workInfo8$rate === void 0 ? void 0 : _state$workInfo8$rate.toFixed(2)) || '-'}`)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"subtotalSalary\",\n    defaultMessage: \"Salary Subtotal\"\n  })), __jsx(Label, null, `$${subtotalSalario}`)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"advancedSalaryPaid\",\n    defaultMessage: \"advancedSalaryPaid\"\n  })), __jsx(Label, null, `$${(_state$workInfo9 = state.workInfo) === null || _state$workInfo9 === void 0 ? void 0 : _state$workInfo9.advancedSalaryPaid}`)), __jsx(Row, null, __jsx(Label, {\n    style: {\n      marginRight: '15px',\n      minWidth: '200px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"totalSalaryToPayWeekly\",\n    defaultMessage: \"totalSalaryToPayWeekly\"\n  })), __jsx(Label, null, `$${((_state$workInfo10 = state.workInfo) === null || _state$workInfo10 === void 0 ? void 0 : (_state$workInfo10$tot = _state$workInfo10.totalSalaryToPayWeekly) === null || _state$workInfo10$tot === void 0 ? void 0 : _state$workInfo10$tot.toFixed(2)) || '-'}`)), (inProgressTasks === null || inProgressTasks === void 0 ? void 0 : inProgressTasks.length) > 0 && __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"inProgressTasks\",\n    defaultMessage: \"inProgressTasks\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroupThree, {\n    items: inProgressTasks,\n    component: (task, index) => __jsx(RadioCard, {\n      id: index,\n      key: index,\n      title: task.description,\n      content: `Comenzaste: ${moment(new Date(task.startDate)).format('HH:mm A - DD MMM')}.`,\n      checked: task.isDone,\n      onChange: () => handleTaskChange(task, 'nothing'),\n      name: \"contact\",\n      hasEdit: false,\n      onDelete: () => handleTaskChange(task, 'stop')\n    })\n  }))))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"pendingTasks\",\n    defaultMessage: \"pendingTasks\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroupThree, {\n    items: pendingTasks,\n    component: (task, index) => {\n      var _task$plannedDate, _task$plannedDate2;\n\n      const plannedDateDay = moment(task.plannedDate, 'MM/D/YYYY').day();\n      const plannedDate = moment(task.plannedDate, 'MM/D/YYYY');\n      const today = moment(new Date(), 'MM/D/YYYY');\n      const todayDay = moment(new Date(), 'MM/D/YYYY').day();\n      let message = null;\n\n      if (((_task$plannedDate = task.plannedDate) === null || _task$plannedDate === void 0 ? void 0 : _task$plannedDate.length) > 1 && task.isRepetitived && plannedDateDay === todayDay) {\n        message = `Tarea repetitiva: ${moment(new Date(task.plannedDate)).format('HH:mm A - ddd')}`;\n      } else if (((_task$plannedDate2 = task.plannedDate) === null || _task$plannedDate2 === void 0 ? void 0 : _task$plannedDate2.length) > 1 && !task.isRepetitived && plannedDate.isSame(today, 'date')) {\n        message = `Tarea unica, fecha: ${moment(new Date(task.plannedDate)).format('HH:mm A - DD MMM')}`;\n      }\n\n      return __jsx(RadioCard, {\n        id: index,\n        key: index,\n        disabled: !!!message,\n        title: task.description,\n        content: message,\n        checked: task.isDone,\n        onChange: () => handleTaskChange(task, 'contact'),\n        name: \"contact\",\n        onEdit: () => handleTaskChange(task, 'start'),\n        hasDelete: false\n      });\n    }\n  }))))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"doneTasks\",\n    defaultMessage: \"doneTasks\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroupThree, {\n    items: state === null || state === void 0 ? void 0 : state.tasks.filter(task => task.isDone === true),\n    component: (task, index) => __jsx(RadioCard, {\n      id: index,\n      key: index,\n      title: task.description,\n      content: `Comenzaste: ${moment(new Date(task.startDate)).format('HH:mm A - DD MMM')}. /nTerminaste: ${moment(new Date(task.finishDate)).format('HH:mm A - DD MMM')}. Tardaste: ${task.workedHours}hs`,\n      checked: task.isDone,\n      onChange: () => handleTaskChange(task, 'nothing'),\n      name: \"contact\",\n      hasDelete: false,\n      hasEdit: false\n    })\n  }))))))));\n};\n\nexport default WorkContent;","map":null,"metadata":{},"sourceType":"module"}