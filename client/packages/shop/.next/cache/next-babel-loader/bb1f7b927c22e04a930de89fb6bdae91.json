{"ast":null,"code":"import { useMemo } from 'react'; //import { ApolloClient } from 'apollo-client';\n//import { InMemoryCache } from 'apollo-cache-inmemory';\n//import { HttpLink, createHttpLink } from 'apollo-link-http';\n//import { setContext } from 'apollo-link-context';\n\nimport { ApolloClient, HttpLink, ApolloLink, InMemoryCache, concat } from '@apollo/client';\nvar apolloClient;\nvar httpLink = new HttpLink({\n  uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n  onError: function onError(_ref) {\n    var networkError = _ref.networkError,\n        graphQLErrors = _ref.graphQLErrors;\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\nvar authMiddleware = new ApolloLink(function (operation, forward) {\n  // add the authorization to the headers\n  var token = null;\n\n  if (true) {\n    token = localStorage.getItem('access_token');\n  }\n\n  operation.setContext({\n    headers: {\n      'x-access-token': token ? token : ''\n    }\n  });\n  return forward(operation);\n});\nvar client = new ApolloClient({\n  link: authMiddleware.concat(httpLink),\n  cache: new InMemoryCache()\n});\n/*\nconsole.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\nfunction createApolloClient() {\n  let token = null;\n  if (typeof window !== 'undefined') {\n    token = localStorage.getItem('access_token');\n  }\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials`\n      headers: {\n        'x-access-token': token ? token : '',\n      }, // Additional fetch() options like `headers`\n      onError: ({ networkError, graphQLErrors }) => {\n        console.log('graphQLErrors', graphQLErrors);\n        console.log('networkError', networkError);\n      },\n    }),\n    cache: new InMemoryCache(),\n  });\n}*/\n\n/* export function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? client;\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n} */\n\n/*\n\nimport { useMemo } from 'react';\nimport {ApolloClient, ApolloLink, HttpLink, InMemoryCache} from 'apollo-boost';\nconst httpLink = new HttpLink({\n  uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n  credentials: 'same-origin', // Additional fetch() options like `credentials`\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  },\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  // Retrieve the authorization token from local storage.\n  let token = null;\n  if (typeof window !== 'undefined') {\n    token = localStorage.getItem('access_token');\n  }\n  // Use the setContext method to set the HTTP headers.\n  operation.setContext({\n    headers: {\n      'x-access-token': token ? token : ''\n    }\n  });\n\n  // Call the next link in the middleware chain.\n  return forward(operation);\n});\n\nlet apolloClient;\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n\n\n*/","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/utils/apollo.js"],"names":["useMemo","ApolloClient","HttpLink","ApolloLink","InMemoryCache","concat","apolloClient","httpLink","uri","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","onError","networkError","graphQLErrors","console","log","authMiddleware","operation","forward","token","localStorage","getItem","setContext","headers","client","link","cache"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB,C,CACA;AACA;AACA;AACA;;AAEA,SACEC,YADF,EAEEC,QAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,MALF,QAMO,gBANP;AAQA,IAAIC,YAAJ;AAEA,IAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,gCADW;AAE5BC,EAAAA,OAAO,EAAE,uBAAqC;AAAA,QAAlCC,YAAkC,QAAlCA,YAAkC;AAAA,QAApBC,aAAoB,QAApBA,aAAoB;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACD;AAL2B,CAAb,CAAjB;AAQA,IAAMI,cAAc,GAAG,IAAId,UAAJ,CAAe,UAACe,SAAD,EAAYC,OAAZ,EAAwB;AAC5D;AACA,MAAIC,KAAK,GAAG,IAAZ;;AACA,YAAmC;AACjCA,IAAAA,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAR;AACD;;AACDJ,EAAAA,SAAS,CAACK,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACP,wBAAkBJ,KAAK,GAAGA,KAAH,GAAW;AAD3B;AADU,GAArB;AAMA,SAAOD,OAAO,CAACD,SAAD,CAAd;AACD,CAbsB,CAAvB;AAeA,IAAMO,MAAM,GAAG,IAAIxB,YAAJ,CAAiB;AAC9ByB,EAAAA,IAAI,EAAET,cAAc,CAACZ,MAAf,CAAsBE,QAAtB,CADwB;AAE9BoB,EAAAA,KAAK,EAAE,IAAIvB,aAAJ;AAFuB,CAAjB,CAAf;AAKA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;AAqBA","sourcesContent":["import { useMemo } from 'react';\n//import { ApolloClient } from 'apollo-client';\n//import { InMemoryCache } from 'apollo-cache-inmemory';\n//import { HttpLink, createHttpLink } from 'apollo-link-http';\n//import { setContext } from 'apollo-link-context';\n\nimport {\n  ApolloClient,\n  HttpLink,\n  ApolloLink,\n  InMemoryCache,\n  concat,\n} from '@apollo/client';\n\nlet apolloClient;\n\nconst httpLink = new HttpLink({\n  uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  },\n});\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  let token = null;\n  if (typeof window !== 'undefined') {\n    token = localStorage.getItem('access_token');\n  }\n  operation.setContext({\n    headers: {\n      'x-access-token': token ? token : '',\n    },\n  });\n\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  link: authMiddleware.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n/*\nconsole.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\nfunction createApolloClient() {\n  let token = null;\n  if (typeof window !== 'undefined') {\n    token = localStorage.getItem('access_token');\n  }\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials`\n      headers: {\n        'x-access-token': token ? token : '',\n      }, // Additional fetch() options like `headers`\n      onError: ({ networkError, graphQLErrors }) => {\n        console.log('graphQLErrors', graphQLErrors);\n        console.log('networkError', networkError);\n      },\n    }),\n    cache: new InMemoryCache(),\n  });\n}*/\n\n/* export function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? client;\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n} */\n\n/*\n\nimport { useMemo } from 'react';\nimport {ApolloClient, ApolloLink, HttpLink, InMemoryCache} from 'apollo-boost';\nconst httpLink = new HttpLink({\n  uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n  credentials: 'same-origin', // Additional fetch() options like `credentials`\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  },\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  // Retrieve the authorization token from local storage.\n  let token = null;\n  if (typeof window !== 'undefined') {\n    token = localStorage.getItem('access_token');\n  }\n  // Use the setContext method to set the HTTP headers.\n  operation.setContext({\n    headers: {\n      'x-access-token': token ? token : ''\n    }\n  });\n\n  // Call the next link in the middleware chain.\n  return forward(operation);\n});\n\nlet apolloClient;\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}