{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { DeliveryMethodsConstants, deliveryMethodCookieKeyName } from 'utils/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { DELIVERY_METHOD } from 'graphql/query/delivery';\nimport { GiftBox } from 'assets/icons/GiftBox';\nimport Checkbox from 'components/checkbox/checkbox';\nimport { setCookie } from 'utils/session';\nimport { CardWrapper, Container, DeliveryMethods, DeliveryText, Heading, Input, Offer, OfferSection, Options, Wrapper } from './delivery-selection.style';\n\nvar DeliverySelection = function DeliverySelection(_ref) {\n  var _deliverData$delivery;\n\n  var props = _extends({}, _ref);\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      deliveryMethodTypeSelected = _React$useState2[0],\n      setDeliveryMethodType = _React$useState2[1];\n\n  var _React$useState3 = React.useState(undefined),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      deliveryMethodSelected = _React$useState4[0],\n      setDeliveryMethod = _React$useState4[1];\n\n  var _useQuery = useQuery(DELIVERY_METHOD),\n      deliverData = _useQuery.data;\n\n  var deliveryMethods = deliverData === null || deliverData === void 0 ? void 0 : (_deliverData$delivery = deliverData.deliveryMethods) === null || _deliverData$delivery === void 0 ? void 0 : _deliverData$delivery.items; // const [address, setDeliveryAddress] = useState(\"\");\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      zipCode = _React$useState6[0],\n      setZipCode = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      searchResult = _React$useState8[0],\n      setSearchResult = _React$useState8[1]; // useEffect(() => {\n  //   if (getCookie(deliveryMethodCookieKeyName) && !props.deliveryMethodSelected) {\n  //     const deliveryMethodSelected = JSON.parse(getCookie(deliveryMethodCookieKeyName));\n  //     props.setDeliveryMethodSaved(deliveryMethodSelected)\n  //   }\n  // }, [props.deliveryMethodSelected]);\n\n\n  var setDeliveryMethodAndSaveCookie = function setDeliveryMethodAndSaveCookie(deli) {\n    setDeliveryMethod(deli);\n    props.setDeliveryMethodSaved(deli); // if (getCookie('first_visit')) {\n\n    setCookie(deliveryMethodCookieKeyName, deli); // }\n  };\n\n  var searchDeliveryZipCode = function searchDeliveryZipCode(e, deli) {\n    handleOnFocus(e);\n    setZipCode(deli);\n    var deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(function (deliveryMethod) {\n      return !deliveryMethod.isPickUp;\n    });\n    var methodFound = deliveryOptionsMethods.filter(function (method) {\n      return method.name.includes(zipCode);\n    });\n    e.stopPropagation();\n    setSearchResult(deli ? methodFound : null);\n  };\n\n  var searchPickupZipCode = function searchPickupZipCode(e, deli) {\n    handleOnFocus(e);\n    setZipCode(deli);\n    var pickUpOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(function (deliveryMethod) {\n      return deliveryMethod.isPickUp === true;\n    });\n    var methodFound = pickUpOptionsMethods.filter(function (method) {\n      return method.details.includes(zipCode);\n    });\n    e.stopPropagation();\n    setSearchResult(deli ? methodFound : null);\n  };\n\n  var setDelivery = function setDelivery(e, deli) {\n    e.stopPropagation();\n    setDeliveryMethodType(deli);\n    setSearchResult(null);\n    setZipCode('');\n  };\n\n  var handleOnFocus = function handleOnFocus(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }; // deliveryMethodSelected\n\n\n  var isPickUpSelected = deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP;\n  var isDeliverySelected = deliveryMethodTypeSelected === DeliveryMethodsConstants.DELIVERY;\n  return __jsx(DeliveryMethods, null, __jsx(Options, null, __jsx(CardWrapper, {\n    color: isPickUpSelected ? '#009E7F' : '#e4f4fc',\n    onClick: function onClick(e) {\n      return setDelivery(e, DeliveryMethodsConstants.PICKUP);\n    }\n  }, \"Pickup\"), __jsx(CardWrapper, {\n    color: isDeliverySelected ? '#009E7F' : '#e4f4fc',\n    onClick: function onClick(e) {\n      return setDelivery(e, DeliveryMethodsConstants.DELIVERY);\n    }\n  }, \"Delivery\")), __jsx(Wrapper, null, !!deliveryMethodTypeSelected && __jsx(Container, null, __jsx(Heading, {\n    onClick: function onClick(e) {\n      return handleOnFocus(e);\n    }\n  }, isPickUpSelected ? __jsx(FormattedMessage, {\n    id: \"pickupModalheading\",\n    defaultMessage: \"Select Your Location\"\n  }) : __jsx(FormattedMessage, {\n    id: \"deliveryModalheading\",\n    defaultMessage: \"Select Your Location\"\n  })), __jsx(\"div\", {\n    onClick: function onClick(e) {\n      return handleOnFocus(e);\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    onFocus: function onFocus(e) {\n      return handleOnFocus(e);\n    },\n    placeholder: \"ZIP Code\",\n    value: zipCode // we have to change the onChange because the is no one for the controller name actualy\n    ,\n    onChange: function onChange(e) {\n      return isPickUpSelected ? searchPickupZipCode(e, e.target.value) : searchDeliveryZipCode(e, e.target.value);\n    }\n  })), (searchResult === null || searchResult === void 0 ? void 0 : searchResult.length) === 0 && zipCode.length > 4 && __jsx(DeliveryText, null, deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP ? 'No Dittos Pickup Locations found, yet, sorry' : 'Sorry, we dont deliver there, yet..'), (searchResult === null || searchResult === void 0 ? void 0 : searchResult.length) ? searchResult.map(function (result, i) {\n    return __jsx(React.Fragment, null, __jsx(Checkbox, {\n      keyName: \"\".concat(i, \"-results\"),\n      isChecked: (deliveryMethodSelected === null || deliveryMethodSelected === void 0 ? void 0 : deliveryMethodSelected.id) === result.id,\n      labelText: \"\".concat(result.name, \" - \").concat(result.details),\n      id: \"result-\".concat(i),\n      onChange: function onChange(e) {\n        setDeliveryMethodAndSaveCookie((deliveryMethodSelected === null || deliveryMethodSelected === void 0 ? void 0 : deliveryMethodSelected.id) === result.id ? null : result);\n      }\n    }));\n  }) : '', !!(searchResult === null || searchResult === void 0 ? void 0 : searchResult.length) && __jsx(React.Fragment, null, isPickUpSelected ? __jsx(FormattedMessage, {\n    id: \"timepickupOfConvinience\",\n    defaultMessage: \"Frevery For 1st Order\"\n  }) : __jsx(FormattedMessage, {\n    id: \"timedeliOfConvinience\",\n    defaultMessage: \"Fder\"\n  }))), __jsx(OfferSection, null, __jsx(GiftBox, null), __jsx(Offer, null, __jsx(FormattedMessage, {\n    id: \"locationModalFooter\",\n    defaultMessage: \"Free Delivery For 1st Order\",\n    values: {\n      number: 1\n    }\n  })))));\n};\n\nexport default DeliverySelection;","map":null,"metadata":{},"sourceType":"module"}