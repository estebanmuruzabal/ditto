{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/location-modal/location-modal.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport { closeModal } from '@redq/reuse-modal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getCookie, setCookie } from 'utils/session';\nimport { Wrapper, Container, Heading, SubHeading, OfferSection, Offer, Button, Input } from './location-modal.style';\nimport { GiftBox } from 'assets/icons/GiftBox'; // import { GoogleMap, useJsApiLoader, Marker } from \"@react-google-maps/api\";\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n\nconst googleApiKey = process.env.GOOGLE_API_KEY;\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nexport default function LocationModal() {\n  // Your existing state variables and functions here\n  const {\n    0: address,\n    1: setAddress\n  } = useState(\"\");\n  const intl = useIntl(); // Handle place selection\n  // const handleSelect = async (address) => {\n  //   console.log('address',address)\n  //   setAddress(address);\n  //   const results = await geocodeByAddress(address);\n  //   const latLng = await getLatLng(results[0]);\n  // };\n\n  const handleZipCode = () => {\n    setCookie('zip_code', address);\n    closeModal();\n  };\n\n  const handleSelect = address => {\n    geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.error('Error', error));\n  };\n\n  useEffect(() => {\n    if (!getCookie('first_visit')) {\n      setCookie('first_visit', true);\n    }\n  }, []);\n  return __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"locationModalheading\",\n    defaultMessage: \"Select Your Location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })), __jsx(SubHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"locationModalSubHeading\",\n    defaultMessage: \"You have to select your location for deliver service perpous\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  })), __jsx(PlacesAutocomplete, {\n    value: address,\n    onChange: setAddress,\n    onSelect: handleSelect,\n    searchOptions: {\n      types: [],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    width: \"100%\",\n    value: address,\n    onChange: e => setAddress(e.target.value),\n    placeholder: intl.formatMessage({\n      id: '',\n      defaultMessage: 'Enter Address'\n    }) // oninvalid=\"this.setCustomValidity('Please Enter valid email')\"\n    // oninput=\"setCustomValidity('')\"\n    // height='48px'\n    // backgroundColor='#F7F7F7'\n    // mb='10px'\n    // required\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    className: \"autocomplete-dropdown-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, loading && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  }, \"Loading...\"), suggestions.map(suggestion => {\n    const style = suggestion.active ? {\n      backgroundColor: \"#fafafa\",\n      cursor: \"pointer\"\n    } : {\n      backgroundColor: \"#ffffff\",\n      cursor: \"pointer\"\n    };\n    return __jsx(\"div\", _extends({}, getSuggestionItemProps(suggestion, {\n      style\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }\n    }), suggestion.description);\n  })))), __jsx(Button, {\n    fullwidth: true,\n    radius: 100,\n    onClick: handleZipCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"continueBtn\",\n    defaultMessage: \"Continue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }))), __jsx(OfferSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, __jsx(GiftBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }), __jsx(Offer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"locationModalFooter\",\n    defaultMessage: \"Free Delivery For 1st Order\",\n    values: {\n      number: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/location-modal/location-modal.tsx"],"names":["React","useState","useEffect","closeModal","FormattedMessage","useIntl","getCookie","setCookie","Wrapper","Container","Heading","SubHeading","OfferSection","Offer","Button","Input","GiftBox","googleApiKey","process","env","GOOGLE_API_KEY","PlacesAutocomplete","geocodeByAddress","getLatLng","LocationModal","address","setAddress","intl","handleZipCode","handleSelect","then","results","latLng","console","log","catch","error","types","componentRestrictions","country","getInputProps","suggestions","getSuggestionItemProps","loading","e","target","value","formatMessage","id","defaultMessage","map","suggestion","style","active","backgroundColor","cursor","description","number"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,YAA1C;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,eAArC;AACA,SACEC,OADF,EAEEC,SAFF,EAIEC,OAJF,EAKEC,UALF,EAMEC,YANF,EAOEC,KAPF,EAQEC,MARF,EASEC,KATF,QAUO,wBAVP;AAWA,SAASC,OAAT,QAAwB,sBAAxB,C,CACA;AACA;;AAaA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAjC;AAEA,OAAOC,kBAAP,IAA6BC,gBAA7B,EAA+CC,SAA/C,QAAgE,2BAAhE;AAGA,eAAe,SAASC,aAAT,GAAyB;AACtC;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBzB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM0B,IAAI,GAAGtB,OAAO,EAApB,CAHsC,CAItC;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMuB,aAAa,GAAG,MAAM;AAC1BrB,IAAAA,SAAS,CAAC,UAAD,EAAakB,OAAb,CAAT;AACAtB,IAAAA,UAAU;AACX,GAHD;;AAKA,QAAM0B,YAAY,GAAGJ,OAAO,IAAI;AAC9BH,IAAAA,gBAAgB,CAACG,OAAD,CAAhB,CACGK,IADH,CACQC,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAAC,CAAD,CAAR,CAD5B,EAEGD,IAFH,CAEQE,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB,CAFlB,EAGGG,KAHH,CAGSC,KAAK,IAAIH,OAAO,CAACG,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAHlB;AAID,GALD;;AAOAlC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACI,SAAS,CAAC,aAAD,CAAd,EAA+B;AAC7BC,MAAAA,SAAS,CAAC,aAAD,EAAgB,IAAhB,CAAT;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA,SACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,sBADL;AAEE,IAAA,cAAc,EAAC,sBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAOE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,yBADL;AAEE,IAAA,cAAc,EAAC,8DAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,EAaE,MAAC,kBAAD;AACE,IAAA,KAAK,EAAEkB,OADT;AAEE,IAAA,QAAQ,EAAEC,UAFZ;AAGE,IAAA,QAAQ,EAAEG,YAHZ;AAIE,IAAA,aAAa,EAAE;AACbQ,MAAAA,KAAK,EAAE,EADM;AAEbC,MAAAA,qBAAqB,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAFV,KAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASG,CAAC;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,sBAA9B;AAAsDC,IAAAA;AAAtD,GAAD,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,KAAK,EAAElB,OAJT;AAKE,IAAA,QAAQ,EAAGmB,CAAD,IAAOlB,UAAU,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAL7B;AAME,IAAA,WAAW,EAAEnB,IAAI,CAACoB,aAAL,CAAmB;AAC9BC,MAAAA,EAAE,EAAE,EAD0B;AAE9BC,MAAAA,cAAc,EAAE;AAFc,KAAnB,CANf,CAUE;AACA;AACA;AACA;AACA;AACA;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAiCE;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADd,EAEGF,WAAW,CAACS,GAAZ,CAAiBC,UAAD,IAAgB;AAC/B,UAAMC,KAAK,GAAGD,UAAU,CAACE,MAAX,GACV;AAAEC,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KADU,GAEV;AAAED,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KAFJ;AAGA,WACE,0BAASb,sBAAsB,CAACS,UAAD,EAAa;AAAEC,MAAAA;AAAF,KAAb,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGD,UAAU,CAACK,WADd,CADF;AAKD,GATA,CAFH,CAjCF,CAVJ,CAbF,EA+EE,MAAC,MAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,MAAM,EAAE,GAFV;AAGE,IAAA,OAAO,EAAE5B,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,aAArB;AAAmC,IAAA,cAAc,EAAC,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CA/EF,CADF,EAwFE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,qBADL;AAEE,IAAA,cAAc,EAAC,6BAFjB;AAGE,IAAA,MAAM,EAAE;AAAE6B,MAAAA,MAAM,EAAE;AAAV,KAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CAxFF,CADF;AAqGD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { closeModal } from '@redq/reuse-modal';\nimport MaskedInput from 'react-text-mask';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getCookie, setCookie } from 'utils/session';\nimport {\n  Wrapper,\n  Container,\n  LogoWrapper,\n  Heading,\n  SubHeading,\n  OfferSection,\n  Offer,\n  Button,\n  Input,\n} from './location-modal.style';\nimport { GiftBox } from 'assets/icons/GiftBox';\n// import { GoogleMap, useJsApiLoader, Marker } from \"@react-google-maps/api\";\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport {\n  setKey,\n  setDefaults,\n  setLanguage,\n  setRegion,\n  fromAddress,\n  fromLatLng,\n  fromPlaceId,\n  setLocationType,\n  geocode,\n  RequestType,\n} from \"react-geocode\";\nconst googleApiKey = process.env.GOOGLE_API_KEY;\n\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n\n\nexport default function LocationModal() {\n  // Your existing state variables and functions here\n  const [address, setAddress] = useState(\"\");\n  const intl = useIntl();\n  // Handle place selection\n  \n  // const handleSelect = async (address) => {\n  //   console.log('address',address)\n  //   setAddress(address);\n  //   const results = await geocodeByAddress(address);\n  //   const latLng = await getLatLng(results[0]);\n  // };\n  \n  const handleZipCode = () => {\n    setCookie('zip_code', address);\n    closeModal();\n  };\n\n  const handleSelect = address => {\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => console.log('Success', latLng))\n      .catch(error => console.error('Error', error));\n  };\n\n  useEffect(() => {\n    if (!getCookie('first_visit')) {\n      setCookie('first_visit', true);\n    }\n  }, []);\n\n  return (\n    <Wrapper>\n      <Container>\n        <Heading>\n          <FormattedMessage\n            id=\"locationModalheading\"\n            defaultMessage=\"Select Your Location\"\n          />\n        </Heading>\n        <SubHeading>\n          <FormattedMessage\n            id=\"locationModalSubHeading\"\n            defaultMessage=\"You have to select your location for deliver service perpous\"\n          />\n        </SubHeading>\n        <PlacesAutocomplete\n          value={address}\n          onChange={setAddress}\n          onSelect={handleSelect}\n          searchOptions={{\n            types: [],\n            componentRestrictions: { country: \"us\" },\n          }}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  width='100%'\n                  value={address}\n                  onChange={(e) => setAddress(e.target.value)}\n                  placeholder={intl.formatMessage({\n                    id: '',\n                    defaultMessage: 'Enter Address',\n                  })}\n                  // oninvalid=\"this.setCustomValidity('Please Enter valid email')\"\n                  // oninput=\"setCustomValidity('')\"\n                  // height='48px'\n                  // backgroundColor='#F7F7F7'\n                  // mb='10px'\n                  // required\n              />\n              {/* <input\n              \n                {...getInputProps({\n                  placeholder: \"Search Places ...\",\n                  className: \"location-search-input\",\n                  style: {\n                    width: \"50%\",\n                    marginBottom: 8,\n                    paddingInline: 8,\n                    paddingBlock: 4,\n                    borderRadius: 8,\n                    zIndex: 100,\n                  },\n                })}\n              /> */}\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion) => {\n                  const style = suggestion.active\n                    ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                    : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                  return (\n                    <div {...getSuggestionItemProps(suggestion, { style })}>\n                      {suggestion.description}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n        {/* <MaskedInput\n          placeholder={intl.formatMessage({ id: 'enterAddressId', defaultMessage: 'Enter your address' })}\n          id=\"input-id\"\n          value={address}\n          onChange={(e) => setAddress(e.target.value)}\n          render={(ref, props) => <Input ref={ref} {...props} />}\n        /> */}\n        <Button\n          fullwidth\n          radius={100}\n          onClick={handleZipCode}\n        >\n          <FormattedMessage id='continueBtn' defaultMessage='Continue' />\n        </Button>\n      </Container>\n      <OfferSection>\n        <GiftBox />\n        <Offer>\n          <FormattedMessage\n            id=\"locationModalFooter\"\n            defaultMessage=\"Free Delivery For 1st Order\"\n            values={{ number: 1 }}\n          />\n        </Offer>\n      </OfferSection>\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}