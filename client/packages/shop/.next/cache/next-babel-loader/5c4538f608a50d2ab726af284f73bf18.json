{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { useRef, useEffect, useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantPageWrapper } from './ditto-market.style';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context'; // import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\n// import { GeolocateControl } from \"mapbox-gl\";\n\nimport Map, { GeolocateControl } from 'react-map-gl';\n\nconst DittoMarket = ({\n  deviceType,\n  userRefetch\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    authDispatch\n  } = useContext(AuthContext);\n  const {\n    loading,\n    error,\n    data = {}\n  } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n  });\n  const geoControlRef = useRef();\n  useEffect(() => {\n    var _geoControlRef$curren;\n\n    // Activate as soon as the control is loaded\n    (_geoControlRef$curren = geoControlRef.current) === null || _geoControlRef$curren === void 0 ? void 0 : _geoControlRef$curren.trigger();\n  }, [geoControlRef.current]);\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...'\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message\n    });\n  }\n\n  ;\n  return __jsx(PlantPageWrapper, null, __jsx(Map, {\n    mapboxAccessToken: \"pk.eyJ1IjoiZXN0ZWJhbm11cnV6YWJhbCIsImEiOiJjbG4ybGZzYmcwMWQwMmlvMDVrbHhheno3In0.EZPhoOcmHwM3BFhGkrQ2-A\",\n    initialViewState: {\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    },\n    mapStyle: \"mapbox://styles/mapbox/streets-v9\"\n  }, __jsx(GeolocateControl, {\n    ref: geoControlRef\n  })));\n};\n\nexport default DittoMarket;","map":null,"metadata":{},"sourceType":"module"}