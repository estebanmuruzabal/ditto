{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/ditto-market/ditto-market.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useRef, useEffect, useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantPageWrapper } from './ditto-market.style';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context'; // import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\n// import { GeolocateControl } from \"mapbox-gl\";\n\nimport Map, { GeolocateControl } from 'react-map-gl';\n\nconst DittoMarket = ({\n  deviceType,\n  userRefetch\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    authDispatch\n  } = useContext(AuthContext);\n  const {\n    loading,\n    error,\n    data = {}\n  } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n  });\n  const geoControlRef = useRef();\n  useEffect(() => {\n    var _geoControlRef$curren;\n\n    // Activate as soon as the control is loaded\n    (_geoControlRef$curren = geoControlRef.current) === null || _geoControlRef$curren === void 0 ? void 0 : _geoControlRef$curren.trigger();\n  }, [geoControlRef.current]);\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n  return __jsx(PlantPageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(Map, {\n    mapboxAccessToken: \"pk.eyJ1IjoiZXN0ZWJhbm11cnV6YWJhbCIsImEiOiJjbG4ybGZzYmcwMWQwMmlvMDVrbHhheno3In0.EZPhoOcmHwM3BFhGkrQ2-A\",\n    initialViewState: {\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    },\n    mapStyle: \"mapbox://styles/mapbox/streets-v9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(GeolocateControl, {\n    ref: geoControlRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default DittoMarket;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/ditto-market/ditto-market.tsx"],"names":["React","useRef","useEffect","useContext","useQuery","ErrorMessage","PlantPageWrapper","GET_LOGGED_IN_USER","ProfileContext","AuthContext","Map","GeolocateControl","DittoMarket","deviceType","userRefetch","state","dispatch","authDispatch","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","geoControlRef","current","trigger","message","longitude","latitude","zoom"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,UAA3B,QAA4C,OAA5C;AAEA,SAAsBC,QAAtB,QAAsC,qBAAtC;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SAEEC,gBAFF,QAGO,sBAHP;AAKA,SAASC,kBAAT,QAAgE,8BAAhE;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,WAAT,QAA4B,4BAA5B,C,CACA;AACA;;AACA,OAAOC,GAAP,IAAaC,gBAAb,QAAoC,cAApC;;AAaA,MAAMC,WAAuC,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAiC;AAC/E,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBb,UAAU,CAACK,cAAD,CAAtC;AACA,QAAM;AAACS,IAAAA;AAAD,MAAiBd,UAAU,CAAMM,WAAN,CAAjC;AAEA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAI,GAAG;AAAzB,MAAgChB,QAAQ,CAACG,kBAAD,EAAqB;AACjEc,IAAAA,2BAA2B,EAAE,IADoC;AAEjEC,IAAAA,WAAW,EAAE,cAFoD,CAGjE;;AAHiE,GAArB,CAA9C;AAKA,QAAMC,aAAa,GAAGtB,MAAM,EAA5B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd;AACA,6BAAAqB,aAAa,CAACC,OAAd,gFAAuBC,OAAvB;AACD,GAHQ,EAGN,CAACF,aAAa,CAACC,OAAf,CAHM,CAAT;;AAKA,MAAIN,OAAJ,EAAa;AACX,WAAO,MAAC,YAAD;AAAc,MAAA,OAAO,EAAE,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAAA;;AAED,MAAIC,KAAJ,EAAW;AACT,WACE,MAAC,YAAD;AAAc,MAAA,OAAO,EAAEA,KAAK,CAACO,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAAA;AAED,SACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,GAAD;AACI,IAAA,iBAAiB,EAAC,uGADtB;AAEI,IAAA,gBAAgB,EAAE;AAChBC,MAAAA,SAAS,EAAE,CAAC,GADI;AAEhBC,MAAAA,QAAQ,EAAE,EAFM;AAGhBC,MAAAA,IAAI,EAAE;AAHU,KAFtB;AAOI,IAAA,QAAQ,EAAC,mCAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASI,MAAC,gBAAD;AAAkB,IAAA,GAAG,EAAEN,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADA,CADF,CADF;AAiBD,CA3CD;;AA6CA,eAAeX,WAAf","sourcesContent":["import * as React from 'react';\nimport {useRef, useEffect, useContext} from 'react';\nimport Link from 'next/link';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport ErrorMessage from 'components/error-message/error-message';\n\nimport {\n  PlantsPageContainer,\n  PlantPageWrapper,\n} from './ditto-market.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER, GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\n// import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\n// import { GeolocateControl } from \"mapbox-gl\";\nimport Map, {GeolocateControl} from 'react-map-gl';\ntype DittoMarketProps = {\n  data?: any;\n  userRefetch: any;\n  index?: Number;\n  Router?: any;\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst DittoMarket: React.FC<DittoMarketProps> = ({ deviceType, userRefetch }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const {authDispatch} = useContext<any>(AuthContext);\n\n  const { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    // pollInterval: 5000,\n  });\n  const geoControlRef = useRef<mapboxgl.GeolocateControl>();\n\n  useEffect(() => {\n    // Activate as soon as the control is loaded\n    geoControlRef.current?.trigger();\n  }, [geoControlRef.current]);\n\n  if (loading) {\n    return <ErrorMessage message={'Cargando...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  return (\n    <PlantPageWrapper>\n      <div>\n      <Map\n          mapboxAccessToken=\"pk.eyJ1IjoiZXN0ZWJhbm11cnV6YWJhbCIsImEiOiJjbG4ybGZzYmcwMWQwMmlvMDVrbHhheno3In0.EZPhoOcmHwM3BFhGkrQ2-A\"\n          initialViewState={{\n            longitude: -100,\n            latitude: 40,\n            zoom: 3.5\n          }}\n          mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n        >\n          <GeolocateControl ref={geoControlRef} />\n        </Map>\n      </div>\n    </PlantPageWrapper>\n  );\n};\n\nexport default DittoMarket;\n"]},"metadata":{},"sourceType":"module"}