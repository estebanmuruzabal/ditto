{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/add-time-schedule/add-schedule-card.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ButtonsContainer, DayContainer, Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text, WeekContainer } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\nimport TimePicker from 'react-time-picker';\nimport { WeekDays } from 'utils/constant';\nimport { UPDATE_SETTING } from 'graphql/query/plants.query';\n// Wrap our form with the using withFormik HoC\nvar FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required')\n  }),\n  handleSubmit: function handleSubmit(values) {// do submitting things\n  }\n});\n\nvar AddTimeSchedule = function AddTimeSchedule(props) {\n  _s();\n\n  var _currentSchedule$star, _currentSchedule$endT, _currentSchedule$days;\n\n  var isValid = props.isValid,\n      item = props.item,\n      values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n  var addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n  var settingIndex = item.plant.sensors.findIndex(function (sensor) {\n    return sensor.settingType === item.settingType;\n  });\n  var currentSchedule = item.plant.sensors[settingIndex].scheduledOnTimes[item === null || item === void 0 ? void 0 : item.schedulePosition];\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      isSmartLightingOn = _useState2[0],\n      isSmartLighting = _useState2[1];\n\n  var _useState3 = useState((currentSchedule === null || currentSchedule === void 0 ? void 0 : (_currentSchedule$star = currentSchedule.startTime) === null || _currentSchedule$star === void 0 ? void 0 : _currentSchedule$star.length) > 0 ? currentSchedule.startTime : '00:00'),\n      startTime = _useState3[0],\n      startTimeChange = _useState3[1];\n\n  var _useState4 = useState((currentSchedule === null || currentSchedule === void 0 ? void 0 : (_currentSchedule$endT = currentSchedule.endTime) === null || _currentSchedule$endT === void 0 ? void 0 : _currentSchedule$endT.length) > 0 ? currentSchedule.endTime : '23:59'),\n      endTime = _useState4[0],\n      endTimeChange = _useState4[1];\n\n  var _useState5 = useState((currentSchedule === null || currentSchedule === void 0 ? void 0 : (_currentSchedule$days = currentSchedule.daysToRepeat) === null || _currentSchedule$days === void 0 ? void 0 : _currentSchedule$days.length) >= 0 ? currentSchedule.daysToRepeat : []),\n      daysSelected = _useState5[0],\n      setDaysSelected = _useState5[1];\n\n  var _useMutation = useMutation(UPDATE_SETTING),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateSetting = _useMutation2[0];\n\n  var intl = useIntl();\n\n  var handleSettingsChange = function handleSettingsChange(plant, field, value, settingType) {\n    //      state.plants[action.payload.plantIndex].sensors[action.payload.sensorIndex] = action.payload.setting;\n    dispatch({\n      type: 'UPDATE_SENSOR',\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    dispatchSettingSave(plant, field, value, settingType);\n  };\n\n  var dispatchSettingSave = function dispatchSettingSave(plant, fieldName, fieldValue, settingType) {\n    var settingIndex = plant.sensors.findIndex(function (sensor) {\n      return sensor.settingType === settingType;\n    });\n    updateSetting({\n      variables: {\n        id: item.id,\n        plantId: plant.plantId,\n        input: _objectSpread(_objectSpread(_defineProperty({}, fieldName, fieldValue), plant.sensors[settingIndex]), {}, {\n          settingType: settingType\n        })\n      }\n    });\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _item$plant$sensors$s, _item$plant$sensors$s2, _item$plant$sensors$s3;\n\n      var newSchedule, settingIndex;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              newSchedule = {\n                daysToRepeat: daysSelected,\n                startTime: startTime,\n                endTime: endTime,\n                enabled: true,\n                smartLight: isSmartLightingOn\n              };\n              setLoading(true); // here we just check and make it an array in case its not\n\n              settingIndex = item.plant.sensors.findIndex(function (sensor) {\n                return sensor.settingType === item.settingType;\n              });\n              item.plant.sensors[settingIndex].scheduledOnTimes = ((_item$plant$sensors$s = item.plant.sensors[settingIndex]) === null || _item$plant$sensors$s === void 0 ? void 0 : (_item$plant$sensors$s2 = _item$plant$sensors$s.scheduledOnTimes) === null || _item$plant$sensors$s2 === void 0 ? void 0 : _item$plant$sensors$s2.length) >= 0 ? (_item$plant$sensors$s3 = item.plant.sensors[settingIndex]) === null || _item$plant$sensors$s3 === void 0 ? void 0 : _item$plant$sensors$s3.scheduledOnTimes : []; // if (isValid) {\n\n              if (currentSchedule && (item === null || item === void 0 ? void 0 : item.schedulePosition)) {\n                item.plant.sensors[settingIndex].scheduledOnTimes[item === null || item === void 0 ? void 0 : item.schedulePosition] = newSchedule;\n              } else {\n                item.plant.sensors[settingIndex].scheduledOnTimes.push(newSchedule);\n              }\n\n              handleSettingsChange(item.plant, 'scheduledOnTimes', item.plant.sensors[settingIndex].scheduledOnTimes, item.settingType);\n              closeModal();\n              setLoading(false); // }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleDaysAddition = function handleDaysAddition(day) {\n    var dayIndex = daysSelected.indexOf(day);\n    var newDaysSelectedArray = daysSelected;\n    dayIndex >= 0 ? newDaysSelectedArray.splice(dayIndex, 1) : newDaysSelectedArray.push(day);\n    setDaysSelected(newDaysSelectedArray);\n  };\n\n  return __jsx(Form, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, __jsx(PlantsSensorContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  }, intl.formatMessage({\n    id: currentSchedule ? 'editTimeScheduleId' : 'addTimeScheduleId',\n    defaultMessage: 'addTimeScheduleId'\n  }))), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"startTimeId\",\n    defaultMessage: \"startTimeId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, __jsx(TimePicker, {\n    onChange: function onChange(e) {\n      return startTimeChange(e);\n    },\n    value: startTime,\n    disableClock: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }))), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"endTimeId\",\n    defaultMessage: \"endTimeId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, __jsx(TimePicker, {\n    onChange: function onChange(e) {\n      return endTimeChange(e);\n    },\n    value: endTime,\n    disableClock: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }))), __jsx(WeekContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, Object.keys(WeekDays).map(function (day, i) {\n    return __jsx(DayContainer, {\n      key: i + '-day-container',\n      style: {\n        backgroundColor: daysSelected.indexOf(day) >= 0 ? '#b99c9c' : 'transparent'\n      },\n      onClick: function onClick() {\n        return handleDaysAddition(day);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }, day.substring(0, 3));\n  })), __jsx(ButtonsContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\" // style={{ width: '100%', height: '44px', marginTop: '200px' }}\n    ,\n    loader: __jsx(Loader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 19\n      }\n    }),\n    isDisabled: loading,\n    isLoading: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: currentSchedule ? \"editTimeFrameId\" : \"addTimeFrameId\",\n    defaultMessage: \"addTimeFrameId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  })), __jsx(Button, {\n    onClick: function onClick() {\n      return closeModal();\n    },\n    style: {\n      marginLeft: '20px'\n    },\n    loader: __jsx(Loader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 19\n      }\n    }),\n    isDisabled: loading,\n    isLoading: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"cancelTimeFrameId\",\n    defaultMessage: \"cancelTimeFrameId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  })))));\n};\n\n_s(AddTimeSchedule, \"0dlgPDZXAjBSxS3x1eY/JgYW7hw=\", false, function () {\n  return [useMutation, useIntl];\n});\n\n_c = AddTimeSchedule;\nexport default _c2 = FormEnhancer(AddTimeSchedule);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddTimeSchedule\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/add-time-schedule/add-schedule-card.tsx"],"names":["React","useContext","useState","Yup","withFormik","Form","closeModal","Button","useMutation","ButtonsContainer","DayContainer","Heading","ListDes","ListItem","ListTitle","PlantsSensorContainer","Text","WeekContainer","ProfileContext","FormattedMessage","useIntl","Loader","TimePicker","WeekDays","UPDATE_SETTING","FormEnhancer","mapPropsToValues","props","id","item","name","info","validationSchema","object","shape","string","required","handleSubmit","values","AddTimeSchedule","isValid","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","addressValue","type","settingIndex","plant","sensors","findIndex","sensor","settingType","currentSchedule","scheduledOnTimes","schedulePosition","state","dispatch","loading","setLoading","isSmartLightingOn","isSmartLighting","startTime","length","startTimeChange","endTime","endTimeChange","daysToRepeat","daysSelected","setDaysSelected","updateSetting","intl","handleSettingsChange","field","value","payload","dispatchSettingSave","fieldName","fieldValue","variables","plantId","input","newSchedule","enabled","smartLight","push","handleDaysAddition","day","dayIndex","indexOf","newDaysSelectedArray","splice","formatMessage","defaultMessage","e","Object","keys","map","i","backgroundColor","substring","marginLeft"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { ButtonsContainer, DayContainer, FieldWrapper, Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text, WeekContainer } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\n\nimport TimePicker from 'react-time-picker'\nimport { SensorsTypes, WeekDays } from 'utils/constant';\nimport Checkbox from '../../components/checkbox/checkbox';\nimport { UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { ISetting } from 'utils/types';\n\n\n// Shape of form values\ninterface FormValues {\n  id?: number | null;\n  name?: string;\n  info?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n}\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik<MyFormProps, FormValues>({\n  \n  // Transform outer props into form values\n  mapPropsToValues: (props) => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || '',\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required'),\n  }),\n  handleSubmit: (values) => {\n    // do submitting things\n  },\n});\n\nconst AddTimeSchedule = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    \n    handleReset,\n    isSubmitting,\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info,\n  };\n  \n  const settingIndex = item.plant.sensors.findIndex((sensor: ISetting) => sensor.settingType === item.settingType);\n    \n  const currentSchedule = item.plant.sensors[settingIndex].scheduledOnTimes[item?.schedulePosition];\n\n    \n  const { state, dispatch } = useContext(ProfileContext);\n  const [loading, setLoading] = useState(false);\n  const [isSmartLightingOn, isSmartLighting] = useState(false);\n  const [startTime, startTimeChange] = useState(currentSchedule?.startTime?.length > 0 ? currentSchedule.startTime : '00:00');\n  const [endTime, endTimeChange] = useState(currentSchedule?.endTime?.length > 0 ? currentSchedule.endTime : '23:59');\n  const [daysSelected,setDaysSelected] = useState(currentSchedule?.daysToRepeat?.length >= 0 ? currentSchedule.daysToRepeat : [])\n  const [updateSetting] = useMutation(UPDATE_SETTING);\n  \n  const intl = useIntl();\n\n  const handleSettingsChange = (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => {\n\n//      state.plants[action.payload.plantIndex].sensors[action.payload.sensorIndex] = action.payload.setting;\n    dispatch({ type: 'UPDATE_SENSOR', payload: { plant, value, field } });\n\n    dispatchSettingSave(plant, field, value, settingType);\n  };\n\n  const dispatchSettingSave = (plant: any, fieldName: string, fieldValue: string | boolean, settingType: SensorsTypes) => {\n    const settingIndex = plant.sensors.findIndex((sensor: ISetting) => sensor.settingType === settingType);\n    updateSetting({\n      variables: {\n        id: item.id,\n        plantId: plant.plantId,\n        input: { [fieldName]: fieldValue, ...plant.sensors[settingIndex], settingType: settingType }\n      },\n    });\n  };\n\n  const handleSubmit = async () => {\n    const newSchedule = {\n      daysToRepeat: daysSelected,\n      startTime,\n      endTime,\n      enabled: true,\n      smartLight: isSmartLightingOn\n    };\n\n    setLoading(true);\n    // here we just check and make it an array in case its not\n    const settingIndex = item.plant.sensors.findIndex((sensor: ISetting) => sensor.settingType === item.settingType);\n    item.plant.sensors[settingIndex].scheduledOnTimes = item.plant.sensors[settingIndex]?.scheduledOnTimes?.length >= 0 ? item.plant.sensors[settingIndex]?.scheduledOnTimes : [];\n\n    // if (isValid) {\n\n    if (currentSchedule && item?.schedulePosition) {\n      item.plant.sensors[settingIndex].scheduledOnTimes[item?.schedulePosition] = newSchedule;\n    } else {\n      item.plant.sensors[settingIndex].scheduledOnTimes.push(newSchedule)\n    }\n\n    handleSettingsChange(item.plant, 'scheduledOnTimes', item.plant.sensors[settingIndex].scheduledOnTimes, item.settingType);\n\n    closeModal();\n    setLoading(false);\n    // }\n  };\n\n\n  const handleDaysAddition = (day: WeekDays) => {\n    const dayIndex = daysSelected.indexOf(day);\n    let newDaysSelectedArray: any = daysSelected;\n\n    dayIndex >= 0 ? newDaysSelectedArray.splice(dayIndex, 1) : newDaysSelectedArray.push(day);\n\n    setDaysSelected(newDaysSelectedArray);\n  };\n\n  return (\n    <Form>\n      <PlantsSensorContainer>\n        <Heading>{<Heading>{intl.formatMessage({ id: currentSchedule ? 'editTimeScheduleId' : 'addTimeScheduleId', defaultMessage: 'addTimeScheduleId' })}</Heading>}</Heading>\n      \n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id=\"startTimeId\"\n                defaultMessage=\"startTimeId\"\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <TimePicker\n              onChange={(e) => startTimeChange(e)}\n              value={startTime}\n              disableClock={true}\n            />\n          </ListDes>\n        </ListItem>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id=\"endTimeId\"\n                defaultMessage=\"endTimeId\"\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <TimePicker\n              onChange={(e) => endTimeChange(e)}\n              value={endTime}\n              disableClock={true}\n            />\n          </ListDes>\n        </ListItem>\n\n      <WeekContainer>\n        {Object.keys(WeekDays).map((day: WeekDays, i: number) => {\n            return (\n              <DayContainer\n                key={i + '-day-container'}\n                style={{ backgroundColor: daysSelected.indexOf(day) >= 0 ? '#b99c9c' : 'transparent' }}\n                onClick={() => handleDaysAddition(day)}\n              >\n                {day.substring(0,3)}\n              </DayContainer>\n            )\n          })\n        }\n      </WeekContainer>\n\n      {/* <Checkbox\n        checked={isSmartLightingOn}\n        id='smart-lighting-id'\n        labelText='Luces'\n        onChange={() => isSmartLighting(!isSmartLightingOn) }\n        // inputRef={register({ required: true })}\n        name='isSmartLightingOn'\n        overrides={{\n          Label: {\n              style: ({ $theme }) => ({\n              color: $theme.colors.textNormal,\n              }),\n          },\n        }}\n      >\n        <FormattedMessage id=\"smartLightingId\" defaultMessage=\"smartLightingId\" />\n      </Checkbox> */}\n      <ButtonsContainer>\n        <Button\n          onClick={handleSubmit}\n          type=\"submit\"\n          // style={{ width: '100%', height: '44px', marginTop: '200px' }}\n          loader={<Loader />}\n          isDisabled={loading}\n          isLoading={loading}\n        >\n          <FormattedMessage id={ currentSchedule ? \"editTimeFrameId\" : \"addTimeFrameId\"} defaultMessage=\"addTimeFrameId\" />\n        </Button>\n        <Button\n          onClick={() => closeModal()}\n          style={{ marginLeft: '20px' }}\n          loader={<Loader />}\n          isDisabled={loading}\n          isLoading={loading}\n        >\n          <FormattedMessage id=\"cancelTimeFrameId\" defaultMessage=\"cancelTimeFrameId\" />\n        </Button>\n      </ButtonsContainer>\n\n      </PlantsSensorContainer>\n    </Form>\n  );\n};\n\nexport default FormEnhancer(AddTimeSchedule);\n"]},"metadata":{},"sourceType":"module"}