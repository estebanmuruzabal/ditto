{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\n\nvar Reading = function Reading(_ref) {\n  var errorId = _ref.errorId,\n      plant = _ref.plant,\n      settingType = _ref.settingType,\n      handleSettingsChange = _ref.handleSettingsChange,\n      onDeleteSchedule = _ref.onDeleteSchedule,\n      data = _ref.data,\n      openTab = _ref.openTab,\n      setOpenTab = _ref.setOpenTab,\n      handleDeleteSensor = _ref.handleDeleteSensor;\n  var setting = plant.sensors.find(function (sensor) {\n    return sensor.settingType === settingType;\n  });\n  console.log('data?.getUser', data === null || data === void 0 ? void 0 : data.getUser);\n  var reading = (setting === null || setting === void 0 ? void 0 : setting.reading) >= -5 && (setting === null || setting === void 0 ? void 0 : setting.reading) < 0 ? 0 + ' % ðŸ’§' : (setting === null || setting === void 0 ? void 0 : setting.reading) >= 0 && (setting === null || setting === void 0 ? void 0 : setting.reading) <= 100 && (setting === null || setting === void 0 ? void 0 : setting.reading) ? (setting === null || setting === void 0 ? void 0 : setting.reading) + ' % ðŸ’§' : 'Disconected';\n  return (// <Text bold>{reading} </Text>\n    __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, \"lala\")\n  );\n};\n\n_c = Reading;\nexport default Reading;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx"],"names":["React","Text","Reading","errorId","plant","settingType","handleSettingsChange","onDeleteSchedule","data","openTab","setOpenTab","handleDeleteSensor","setting","sensors","find","sensor","console","log","getUser","reading"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;;AAqBA,IAAMC,OAAwB,GAAG,SAA3BA,OAA2B,OAA6H;AAAA,MAA1HC,OAA0H,QAA1HA,OAA0H;AAAA,MAAjHC,KAAiH,QAAjHA,KAAiH;AAAA,MAA1GC,WAA0G,QAA1GA,WAA0G;AAAA,MAA7FC,oBAA6F,QAA7FA,oBAA6F;AAAA,MAAvEC,gBAAuE,QAAvEA,gBAAuE;AAAA,MAArDC,IAAqD,QAArDA,IAAqD;AAAA,MAA/CC,OAA+C,QAA/CA,OAA+C;AAAA,MAAtCC,UAAsC,QAAtCA,UAAsC;AAAA,MAA1BC,kBAA0B,QAA1BA,kBAA0B;AAC1J,MAAMC,OAAO,GAAGR,KAAK,CAACS,OAAN,CAAcC,IAAd,CAAmB,UAACC,MAAD;AAAA,WAAsBA,MAAM,CAACV,WAAP,KAAuBA,WAA7C;AAAA,GAAnB,CAAhB;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,IAA7B,aAA6BA,IAA7B,uBAA6BA,IAAI,CAAEU,OAAnC;AAEA,MAAMC,OAAO,GAAI,CAAAP,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEO,OAAT,KAAoB,CAAC,CAArB,IAA0B,CAAAP,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEO,OAAT,IAAmB,CAA9C,GAAmD,IAAI,OAAvD,GAAkE,CAAAP,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEO,OAAT,KAAoB,CAApB,IAAyB,CAAAP,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEO,OAAT,KAAoB,GAA7C,KAAoDP,OAApD,aAAoDA,OAApD,uBAAoDA,OAAO,CAAEO,OAA7D,CAAD,GAAyE,CAAAP,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEO,OAAT,IAAmB,OAA5F,GAAsG,aAAvL;AACA,SACI;AACA,UAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAIH,CAVD;;KAAMjB,O;AAYN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  data?: any;\n  plant: any;\n  openTab: string;\n  errorId: string;\n  setOpenTab: (settingType: string) => void;\n  handleDeleteSensor: (plant: any, settingType: string) => void;\n  settingType: SensorsTypes;\n  handleSettingsChange: (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => void;\n  onDeleteSchedule: (plant: any, settingType: SensorsTypes, position: number) => void;\n}\n\nconst Reading: React.FC<Props> = ({ errorId, plant, settingType, handleSettingsChange, onDeleteSchedule, data, openTab, setOpenTab, handleDeleteSensor  }) => {\n    const setting = plant.sensors.find((sensor: ISetting) => sensor.settingType === settingType);\n\n    console.log('data?.getUser', data?.getUser);\n\n    const reading = (setting?.reading >= -5 && setting?.reading < 0) ? 0 + ' % ðŸ’§' : (setting?.reading >= 0 && setting?.reading <= 100 && setting?.reading) ? setting?.reading + ' % ðŸ’§' : 'Disconected';\n    return (\n        // <Text bold>{reading} </Text>\n        <Text bold>lala</Text>\n    );\n};\n\nexport default Reading;\n"]},"metadata":{},"sourceType":"module"}