{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/layouts/header/menu/language-switcher/language-switcher.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { MenuItem } from './language-switcher.style';\nimport { FormattedMessage } from 'react-intl';\nimport * as flagIcons from 'assets/icons/flags';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { LANGUAGE_MENU } from 'site-settings/site-navigation';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_USER } from 'graphql/mutation/user';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\n\nconst FlagIcon = ({\n  name\n}) => {\n  const TagName = flagIcons[name];\n  return !!TagName ? __jsx(TagName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 22\n    }\n  }) : __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 36\n    }\n  }, \"Invalid icon \", name);\n};\n\nconst LanguageMenu = ({\n  onClick\n}) => {\n  return __jsx(React.Fragment, null, LANGUAGE_MENU.map(item => __jsx(MenuItem, {\n    onClick: onClick,\n    key: item.id,\n    value: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, __jsx(FlagIcon, {\n    name: item.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  })), __jsx(FormattedMessage, {\n    id: item.id,\n    defaultMessage: item.defaultMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst LanguageSwitcher = () => {\n  const {\n    locale,\n    changeLanguage\n  } = useLocale();\n  const {\n    authState: {\n      user\n    },\n    authDispatch\n  } = React.useContext(AuthContext);\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const [updateUserMutation] = useMutation(UPDATE_USER);\n\n  const handleSave = async () => {\n    const {\n      name,\n      email,\n      id\n    } = state; // await updateUserMutation({\n    //   variables: {\n    //     id,\n    //      name,\n    //      email\n    //     }\n    // });\n    // setUserinfoMsg('Update user info successfully');\n    // setTimeout(function () {\n    //   setUserinfoMsg('');\n    // }, 8000)\n  };\n\n  const selectedLanguage = LANGUAGE_MENU.find(x => x.id === locale);\n\n  const languageChangeHandler = e => {\n    changeLanguage(e.target.value);\n  };\n\n  return {\n    /* <MainMenu>\n           <Popover\n             className=\"right\"\n             handler={\n               <SelectedItem>\n                 <span>\n                   <Icon>\n                     <CategoryIcon name={activeMenu?.icon} />\n                   </Icon>\n                   <span>\n                     <FormattedMessage\n                       id={activeMenu?.id}\n                       defaultMessage={activeMenu?.defaultMessage}\n                     />\n                   </span>\n                 </span>\n                 <Arrow>\n                   <MenuDown />\n                 </Arrow>\n               </SelectedItem>\n             }\n             content={<CategoryMenu onClick={setActiveMenu} />}\n           />\n         </MainMenu> */\n  };\n};\n\nexport default LanguageSwitcher;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/layouts/header/menu/language-switcher/language-switcher.tsx"],"names":["React","useContext","MenuItem","FormattedMessage","flagIcons","useLocale","LANGUAGE_MENU","useMutation","UPDATE_USER","ProfileContext","AuthContext","FlagIcon","name","TagName","LanguageMenu","onClick","map","item","id","icon","defaultMessage","LanguageSwitcher","locale","changeLanguage","authState","user","authDispatch","state","dispatch","updateUserMutation","handleSave","email","selectedLanguage","find","x","languageChangeHandler","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAAkCC,QAAlC,QAAkD,2BAAlD;AAEA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAO,KAAKC,SAAZ,MAA2B,oBAA3B;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,aAAT,QAA8B,+BAA9B;AAGA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,WAAT,QAA4B,4BAA5B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B,QAAMC,OAAO,GAAGT,SAAS,CAACQ,IAAD,CAAzB;AACA,SAAO,CAAC,CAACC,OAAF,GAAY,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAZ,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAiBD,IAAjB,CAAjC;AACD,CAHD;;AAKA,MAAME,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACpC,SACE,4BACGT,aAAa,CAACU,GAAd,CAAmBC,IAAD,IACjB,MAAC,QAAD;AAAU,IAAA,OAAO,EAAEF,OAAnB;AAA4B,IAAA,GAAG,EAAEE,IAAI,CAACC,EAAtC;AAA0C,IAAA,KAAK,EAAED,IAAI,CAACC,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,IAAI,EAAED,IAAI,CAACE,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,MAAC,gBAAD;AAAkB,IAAA,EAAE,EAAEF,IAAI,CAACC,EAA3B;AAA+B,IAAA,cAAc,EAAED,IAAI,CAACG,cAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADD,CADH,CADF;AAYD,CAbD;;AAeA,MAAMC,gBAA8B,GAAG,MAAM;AAC3C,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA6BlB,SAAS,EAA5C;AACA,QAAM;AACJmB,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KADP;AAEJC,IAAAA;AAFI,MAGF1B,KAAK,CAACC,UAAN,CAAsBS,WAAtB,CAHJ;AAKA,QAAM;AAAEiB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsB3B,UAAU,CAACQ,cAAD,CAAtC;AACA,QAAM,CAACoB,kBAAD,IAAuBtB,WAAW,CAACC,WAAD,CAAxC;;AAEA,QAAMsB,UAAU,GAAG,YAAY;AAC7B,UAAM;AAAElB,MAAAA,IAAF;AAAQmB,MAAAA,KAAR;AAAeb,MAAAA;AAAf,QAAsBS,KAA5B,CAD6B,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAbD;;AAeA,QAAMK,gBAAgB,GAAG1B,aAAa,CAAC2B,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAAChB,EAAF,KAASI,MAAnC,CAAzB;;AACA,QAAMa,qBAAqB,GAAIC,CAAD,IAAO;AACnCb,IAAAA,cAAc,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD,GAFD;;AAGA,SACF;AAAC;;;;;;;;;;;;;;;;;;;;;;;;AAAD,GADE;AA2BD,CAxDD;;AA0DA,eAAejB,gBAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { Box, SelectedItem, Flag, MenuItem } from './language-switcher.style';\nimport Popover from 'components/popover/popover';\nimport { FormattedMessage } from 'react-intl';\nimport * as flagIcons from 'assets/icons/flags';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { LANGUAGE_MENU } from 'site-settings/site-navigation';\nimport { Arrow } from '../left-menu/left-menu.style';\nimport { MenuDown } from 'assets/icons/MenuDown';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_USER } from 'graphql/mutation/user';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\n\nconst FlagIcon = ({ name }) => {\n  const TagName = flagIcons[name];\n  return !!TagName ? <TagName /> : <p>Invalid icon {name}</p>;\n};\n\nconst LanguageMenu = ({ onClick }) => {\n  return (\n    <>\n      {LANGUAGE_MENU.map((item) => (\n        <MenuItem onClick={onClick} key={item.id} value={item.id}>\n          <span>\n            <FlagIcon name={item.icon} />\n          </span>\n          <FormattedMessage id={item.id} defaultMessage={item.defaultMessage} />\n        </MenuItem>\n      ))}\n    </>\n  );\n};\n\nconst LanguageSwitcher: React.FC<{}> = () => {\n  const { locale, changeLanguage } = useLocale();\n  const {\n    authState: { user },\n    authDispatch,\n  } = React.useContext<any>(AuthContext);\n  \n  const { state, dispatch } = useContext(ProfileContext);\n  const [updateUserMutation] = useMutation(UPDATE_USER);\n  \n  const handleSave = async () => {\n    const { name, email, id } = state;\n    // await updateUserMutation({\n    //   variables: {\n    //     id,\n    //      name,\n    //      email\n    //     }\n    // });\n    // setUserinfoMsg('Update user info successfully');\n    // setTimeout(function () {\n    //   setUserinfoMsg('');\n    // }, 8000)\n  };\n\n  const selectedLanguage = LANGUAGE_MENU.find((x) => x.id === locale);\n  const languageChangeHandler = (e) => {\n    changeLanguage(e.target.value);\n  };\n  return (\n{/* <MainMenu>\n        <Popover\n          className=\"right\"\n          handler={\n            <SelectedItem>\n              <span>\n                <Icon>\n                  <CategoryIcon name={activeMenu?.icon} />\n                </Icon>\n                <span>\n                  <FormattedMessage\n                    id={activeMenu?.id}\n                    defaultMessage={activeMenu?.defaultMessage}\n                  />\n                </span>\n              </span>\n              <Arrow>\n                <MenuDown />\n              </Arrow>\n            </SelectedItem>\n          }\n          content={<CategoryMenu onClick={setActiveMenu} />}\n        />\n      </MainMenu> */}\n\n  );\n};\n\nexport default LanguageSwitcher;\n"]},"metadata":{},"sourceType":"module"}