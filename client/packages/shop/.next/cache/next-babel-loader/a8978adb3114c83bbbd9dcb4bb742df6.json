{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { ADD_ADDRESS, UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './address-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { DELIVERY_METHOD } from 'graphql/query/delivery';\nimport { plazaBelgranoPolygon, plazadoceDeOctubrePolygon, plazaEspañaPolygon, plazaNueveDeJulioPolygon } from 'utils/constant';\n// Wrap our form with the using withFormik HoC\nvar FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    var ID = props.item.id;\n    var addressItem = props.item.item;\n    return {\n      id: ID || null,\n      addressId: addressItem.id || null,\n      title: addressItem.title || '',\n      address: addressItem.address || '',\n      instructions: addressItem.instructions || '',\n      location: addressItem.location || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    title: Yup.string().required('Required!'),\n    address: Yup.string().required('Required'),\n    location: Yup.string().required('Required')\n  }),\n  handleSubmit: function handleSubmit(values) {// do submitting things\n  }\n});\n\nvar UpdateAddressTwo = function UpdateAddressTwo(props) {\n  var _deliverData$delivery;\n\n  var isValid = props.isValid,\n      item = props.item,\n      values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n\n  var _useQuery = useQuery(DELIVERY_METHOD),\n      deliverData = _useQuery.data;\n\n  var deliveryMethods = deliverData === null || deliverData === void 0 ? void 0 : (_deliverData$delivery = deliverData.deliveryMethods) === null || _deliverData$delivery === void 0 ? void 0 : _deliverData$delivery.items;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      searchResult = _React$useState2[0],\n      setSearchResult = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      deliveryAddress = _React$useState4[0],\n      setDeliveryAddress = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      notInsideDeliveryAreas = _React$useState6[0],\n      setNotInsideDeliveryAreas = _React$useState6[1];\n\n  var ID = item.id;\n  var newAddressid = null;\n  var addressItem = item.item;\n  var addressValue = {\n    id: ID,\n    addressId: addressItem.id,\n    title: values.title,\n    address: addressItem.address,\n    location: values.location,\n    instructions: values.instructions,\n    is_primary: true\n  };\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var intl = useIntl();\n\n  var _useMutation = useMutation(UPDATE_ADDRESS),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateAddressMutation = _useMutation2[0];\n\n  var _useMutation3 = useMutation(ADD_ADDRESS),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      addAddressMutation = _useMutation4[0];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var id, addressId, title, address, location, instructions, _yield$addAddressMuta, data, updateAddressData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isValid) {\n                _context.next = 18;\n                break;\n              }\n\n              id = addressValue.id, addressId = addressValue.addressId, title = addressValue.title, address = addressValue.address, location = addressValue.location, instructions = addressValue.instructions; // addressItem puede pre-cargar address solamente para luego el usuario completar el resto de los datos\n\n              if (!(Object.keys(addressItem).length === 0 || Object.keys(addressItem).length === 2)) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 5;\n              return addAddressMutation({\n                variables: {\n                  id: id,\n                  title: title,\n                  address: address,\n                  location: location,\n                  instructions: instructions\n                }\n              });\n\n            case 5:\n              _yield$addAddressMuta = _context.sent;\n              data = _yield$addAddressMuta.data;\n              newAddressid = data.addDeliveryAddress.id;\n              addressValue.id = data.addDeliveryAddress.id;\n              dispatch({\n                type: 'ADD_ADDRESS',\n                payload: addressValue\n              });\n              closeModal();\n              _context.next = 18;\n              break;\n\n            case 13:\n              _context.next = 15;\n              return updateAddressMutation({\n                variables: {\n                  id: id,\n                  addressId: addressId,\n                  title: title,\n                  address: address,\n                  location: location,\n                  instructions: instructions\n                }\n              });\n\n            case 15:\n              updateAddressData = _context.sent;\n              dispatch({\n                type: 'UPDATE_ADDRESS',\n                payload: {\n                  value: addressValue,\n                  id: addressItem.id\n                }\n              });\n              closeModal();\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  function inside(point, vs) {\n    var x = point[0],\n        y = point[1];\n    var inside = false;\n\n    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n      var xi = vs[i][0],\n          yi = vs[i][1];\n      var xj = vs[j][0],\n          yj = vs[j][1];\n      var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n      if (intersect) inside = !inside;\n    }\n\n    return inside;\n  }\n\n  ;\n\n  var handleSelect = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n      var results, latLng, deliveryOptionsMethods;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return geocodeByAddress(address);\n\n            case 2:\n              results = _context2.sent;\n              _context2.next = 5;\n              return getLatLng(results[0]);\n\n            case 5:\n              latLng = _context2.sent;\n              setNotInsideDeliveryAreas(false);\n              deliveryOptionsMethods = [];\n\n              if (inside([latLng.lat, latLng.lng], plazadoceDeOctubrePolygon)) {\n                deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(function (deliveryMethod) {\n                  if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Lunes')) {\n                    deliveryMethod.name = 'Delivery Gratis';\n                    return true;\n                  }\n\n                  return !deliveryMethod.isPickUp;\n                });\n              } else if (inside([latLng.lat, latLng.lng], plazaBelgranoPolygon)) {\n                deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(function (deliveryMethod) {\n                  if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Martes')) {\n                    deliveryMethod.name = 'Delivery Gratis';\n                    return true;\n                  }\n\n                  return !deliveryMethod.isPickUp;\n                });\n              } else if (inside([latLng.lat, latLng.lng], plazaNueveDeJulioPolygon)) {\n                deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(function (deliveryMethod) {\n                  if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Miercoles')) {\n                    deliveryMethod.name = 'Delivery Gratis';\n                    return true;\n                  }\n\n                  return !deliveryMethod.isPickUp;\n                });\n              } else if (inside([latLng.lat, latLng.lng], plazaEspañaPolygon)) {\n                deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(function (deliveryMethod) {\n                  if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Jueves')) {\n                    deliveryMethod.name = 'Delivery Gratis';\n                    return true;\n                  }\n\n                  return !deliveryMethod.isPickUp;\n                });\n              } else {\n                setNotInsideDeliveryAreas(true);\n                console.log(inside([latLng.lat, latLng.lng], plazaNueveDeJulioPolygon));\n              }\n\n              console.log('setDeliveryAddress(address?.split(', ')[0]);', address === null || address === void 0 ? void 0 : address.split(',')[0]);\n              setDeliveryAddress(address === null || address === void 0 ? void 0 : address.split(',')[0]);\n              setSearchResult(deliveryOptionsMethods);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSelect(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  console.log(values);\n  return __jsx(Form, null, __jsx(Heading, null, intl.formatMessage({\n    id: (addressItem === null || addressItem === void 0 ? void 0 : addressItem.id) ? 'editAddressId' : 'addNewAddressId',\n    defaultMessage: 'Address name'\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"title\",\n    type: \"text\",\n    width: \"100%\",\n    placeholder: intl.formatMessage({\n      id: 'addressRefId',\n      defaultMessage: 'Address name'\n    }),\n    error: touched.title && errors.title,\n    value: values.title,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"address\",\n    type: \"text\",\n    disabled: true,\n    width: \"100%\",\n    placeholder: intl.formatMessage({\n      id: 'addressId',\n      defaultMessage: 'Address'\n    }),\n    error: touched.address && errors.address,\n    value: values.address,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"location\",\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'locationId',\n      defaultMessage: 'Localidad'\n    }),\n    width: \"100%\",\n    error: touched.location && errors.location,\n    value: values.location,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"instructions\",\n    as: \"textarea\",\n    width: \"100%\",\n    placeholder: intl.formatMessage({\n      id: 'instructionsId',\n      defaultMessage: 'Delivery instructions'\n    }),\n    error: touched.instructions && errors.instructions,\n    value: values.instructions,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    style: {\n      width: '100%',\n      height: '44px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedAddressId\",\n    defaultMessage: \"Save Address\"\n  })));\n};\n\nexport default FormEnhancer(UpdateAddressTwo);","map":null,"metadata":{},"sourceType":"module"}