{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/AirTempetureReading.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nvar AirTempetureReading = function AirTempetureReading(_ref) {\n  _s();\n\n  var _latestDataFetched, _latestDataFetched$ge, _latestDataFetched$ge2, _latestDataFetched2, _latestDataFetched2$g, _latestDataFetched2$g2, _latestDataFetched3, _latestDataFetched3$g, _latestDataFetched3$g2;\n\n  var module = _ref.module,\n      plantId = _ref.plantId;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 1000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var plantIndex = (_latestDataFetched = latestDataFetched) === null || _latestDataFetched === void 0 ? void 0 : (_latestDataFetched$ge = _latestDataFetched.getUser) === null || _latestDataFetched$ge === void 0 ? void 0 : (_latestDataFetched$ge2 = _latestDataFetched$ge.plants) === null || _latestDataFetched$ge2 === void 0 ? void 0 : _latestDataFetched$ge2.findIndex(function (plant) {\n    return plant.plantId === plantId;\n  });\n  var sensorIndex = (_latestDataFetched2 = latestDataFetched) === null || _latestDataFetched2 === void 0 ? void 0 : (_latestDataFetched2$g = _latestDataFetched2.getUser.plants[plantIndex]) === null || _latestDataFetched2$g === void 0 ? void 0 : (_latestDataFetched2$g2 = _latestDataFetched2$g.sensors) === null || _latestDataFetched2$g2 === void 0 ? void 0 : _latestDataFetched2$g2.findIndex(function (sensor) {\n    return sensor.settingType === module.settingType;\n  });\n  var reading = (_latestDataFetched3 = latestDataFetched) === null || _latestDataFetched3 === void 0 ? void 0 : (_latestDataFetched3$g = _latestDataFetched3.getUser.plants[plantIndex]) === null || _latestDataFetched3$g === void 0 ? void 0 : (_latestDataFetched3$g2 = _latestDataFetched3$g.sensors[sensorIndex]) === null || _latestDataFetched3$g2 === void 0 ? void 0 : _latestDataFetched3$g2.reading;\n  return __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, reading, \" \\xB0 \\uD83C\\uDF21\\uFE0F\");\n};\n\n_s(AirTempetureReading, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = AirTempetureReading;\nexport default AirTempetureReading;\n\nvar _c;\n\n$RefreshReg$(_c, \"AirTempetureReading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/AirTempetureReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","AirTempetureReading","module","plantId","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","loading","error","data","plantIndex","latestDataFetched","getUser","plants","findIndex","plant","sensorIndex","sensors","sensor","settingType","reading"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,yBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAQA,IAAMC,mBAAoC,GAAG,SAAvCA,mBAAuC,OAA0B;AAAA;;AAAA;;AAAA,MAAvBC,MAAuB,QAAvBA,MAAuB;AAAA,MAAfC,OAAe,QAAfA,OAAe;;AAAA,kBAClCJ,QAAQ,CAACC,2BAAD,EAA8B;AACnEI,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAD0B;AAAA,MAC3DC,OAD2D,aAC3DA,OAD2D;AAAA,MAClDC,KADkD,aAClDA,KADkD;AAAA,MAC3CC,IAD2C,aAC3CA,IAD2C;;AAOjE,MAAMC,UAAU,yBAAGC,iBAAH,gFAAG,mBAAmBC,OAAtB,oFAAG,sBAA4BC,MAA/B,2DAAG,uBAAoCC,SAApC,CAA8C,UAACC,KAAD;AAAA,WAAgBA,KAAK,CAACZ,OAAN,KAAkBA,OAAlC;AAAA,GAA9C,CAAnB;AACA,MAAMa,WAAW,0BAAGL,iBAAH,iFAAG,oBAAmBC,OAAnB,CAA2BC,MAA3B,CAAkCH,UAAlC,CAAH,oFAAG,sBAA+CO,OAAlD,2DAAG,uBAAwDH,SAAxD,CAAkE,UAACI,MAAD;AAAA,WAAiBA,MAAM,CAACC,WAAP,KAAuBjB,MAAM,CAACiB,WAA/C;AAAA,GAAlE,CAApB;AACA,MAAIC,OAAO,0BAAGT,iBAAH,iFAAG,oBAAmBC,OAAnB,CAA2BC,MAA3B,CAAkCH,UAAlC,CAAH,oFAAG,sBAA+CO,OAA/C,CAAuDD,WAAvD,CAAH,2DAAG,uBAAqEI,OAAnF;AAEF,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYA,OAAZ,6BADJ;AAGH,CAdD;;GAAMnB,mB;UAC+BF,Q;;;KAD/BE,mB;AAgBN,eAAeA,mBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  module: any;\n  plantId: any;\n  latestDataFetched: any;\n}\n\nconst AirTempetureReading: React.FC<Props> = ({ module, plantId  }) => {\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 1000,\n      });\n    \n      const plantIndex = latestDataFetched?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plantId);\n      const sensorIndex = latestDataFetched?.getUser.plants[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n      let reading = latestDataFetched?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n    return (\n        <Text bold>{reading} ¬∞ üå°Ô∏è</Text>\n    );\n};\n\nexport default AirTempetureReading;\n"]},"metadata":{},"sourceType":"module"}