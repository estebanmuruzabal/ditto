{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, SensorsTypes } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantsPageContainer, OrderDetails, BlockTitle, Text, ListItem, ListTitle, ListDes, ButtonText, PlantPageWrapper, Column1, Row1, DashboardContainer, SensorsWrapper } from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, DELETE_SETTING, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\nimport Select from 'react-select';\nimport Plug from './sensors/Plug';\nimport DistanceSensor from './sensors/DistanceSensor';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { hasDittoBotUpdatedInLastMinute, getLastNumOfSensor, getSensorWithoutNumber } from 'utils/ditto-bot';\nimport moment from 'moment';\n\nconst YourPlants = ({\n  deviceType,\n  userRefetch\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    authDispatch\n  } = useContext(AuthContext);\n  const {\n    loading,\n    error,\n    data = {}\n  } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n  }); // const { loading1, error1, data1 = {} } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n  //   notifyOnNetworkStatusChange: true,\n  //   fetchPolicy: \"network-only\",\n  //   // pollInterval: 5000,\n  // });\n  // const router = useRouter();\n\n  const intl = useIntl();\n  const {\n    0: name,\n    1: setPlantName\n  } = useState('');\n  const {\n    0: openTab,\n    1: setOpenTab\n  } = useState('');\n  const {\n    0: errorId,\n    1: setErrorId\n  } = useState('');\n  const {\n    0: plantId,\n    1: setControllerID\n  } = useState('');\n  const {\n    0: userinfoMsg,\n    1: setUserinfoMsg\n  } = useState('');\n  const {\n    0: sensorSelected,\n    1: setSensor\n  } = useState('');\n  const [addPlant] = useMutation(ADD_PLANT);\n  const [updateSetting] = useMutation(UPDATE_SETTING);\n  const [deleteSetting] = useMutation(DELETE_SETTING);\n  const {\n    plants\n  } = state;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n\n  const shouldNotAssignRelay = (module, field, value) => {\n    const relayOneIdRelated = 'relayOneIdRelated';\n    const relayTwoIdRelated = 'relayTwoIdRelated';\n    if (field !== relayOneIdRelated && field !== relayTwoIdRelated) return false; // plant.sensors.map((module) => {\n\n    if ((module[relayOneIdRelated] === value || module[relayTwoIdRelated] === value) && value !== '') {\n      const texto1 = intl.formatMessage({\n        id: 'relayAlreadyAssinged',\n        defaultMessage: 'Relay already assigned in '\n      });\n      const texto2 = intl.formatMessage({\n        id: 'relayAlreadyAssinged2',\n        defaultMessage: 'desigagned  '\n      });\n      const b = confirm(texto1 + module.name + texto2);\n      console.log('asdasd', b);\n      if (b) return false;\n      return false;\n    } // })\n\n\n    return false;\n  };\n\n  const defaultSettingValuesIfModeChanges = (module, field, value, settingType) => {\n    const mode = 'mode';\n    if (field !== mode) return plant;\n    const settingIndex = plant.sensors.findIndex(module => module.settingType === settingType);\n    plant.sensors[settingIndex] = getDefaultSetting(settingType, plant.sensors[settingIndex].name, value === CommonMode.NONE ? [] : plant.sensors[settingIndex].logs);\n    return module;\n  };\n\n  const isClean = (plant, field, value) => {\n    // min max checks\n    const minWarning = 'minWarning';\n    const maxWarning = 'maxWarning';\n    if (field !== minWarning && field !== maxWarning) return true;\n\n    if (Number(value) < 0 || Number(value) > 100) {\n      setErrorId(field);\n      setTimeout(() => {\n        setErrorId('');\n      }, 2000);\n      return false;\n    }\n\n    setErrorId(''); // add more checks\n\n    return true;\n  };\n\n  const handleSettingsChange = (plant, field, value, settingType) => {\n    // if we want to stop user to reuse plugs, uncomment line bellow\n    const a = shouldNotAssignRelay(plant, field, value);\n    if (a) return;\n    plant = defaultSettingValuesIfModeChanges(module, field, value, settingType);\n    dispatch({\n      type: settingType,\n      payload: {\n        plant,\n        value,\n        field\n      }\n    });\n    isClean(plant, field, value) && dispatchSettingSave(plant, field, value, settingType);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  const handleAddDittoBotClick = () => {\n    var _data$getUser;\n\n    addPlant({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n        name,\n        plantId: Number(plantId)\n      }\n    });\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  const handleUpdateDittoControllerName = (plant, name) => {\n    setTimeout(function () {\n      var _data$getUser2;\n\n      addPlant({\n        variables: {\n          id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n          name,\n          plantId: plant.plantId\n        }\n      });\n    }, 2000);\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  const handleDeleteSensor = (plantSelected, settingType) => {\n    var _data$getUser3;\n\n    deleteSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser3 = data.getUser) === null || _data$getUser3 === void 0 ? void 0 : _data$getUser3.id,\n        plantId: plantSelected.plantId,\n        settingName: settingType\n      }\n    });\n    const plantIndex = plants.findIndex(plant => plant.plantId === plantSelected.plantId);\n    const settingIndex = plants[plantIndex].sensors.findIndex(module => module.settingType === settingType);\n    dispatch({\n      type: 'DELETE_MODULE',\n      payload: {\n        plantIndex,\n        settingIndex\n      }\n    });\n    setUserinfoMsg('deleted setting successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  const onDeleteSchedule = (plant, settingType, scheduleIndex) => {\n    var _plant$sensors$settin, _data$getUser4;\n\n    const settingIndex = plant.sensors.findIndex(module => module.settingType === settingType);\n    (_plant$sensors$settin = plant.sensors[settingIndex]) === null || _plant$sensors$settin === void 0 ? void 0 : _plant$sensors$settin.scheduledOnTimes.splice(scheduleIndex, 1);\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser4 = data.getUser) === null || _data$getUser4 === void 0 ? void 0 : _data$getUser4.id,\n        plantId: plant.plantId,\n        input: _objectSpread(_objectSpread({}, plant.sensors[settingIndex]), {}, {\n          settingType: settingType\n        })\n      }\n    });\n    setUserinfoMsg('deleted schedule successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  const getDefaultSetting = (settingTypeName, name, logs) => {\n    return {\n      name: name || '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: logs || [],\n      scheduledOnTimes: [],\n      settingType: settingTypeName\n    };\n  };\n\n  const dispatchSettingSave = (plant, fieldName, fieldValue, settingType) => {\n    var _data$getUser5;\n\n    const settingIndex = plant.sensors.findIndex(module => module.settingType === settingType);\n    plant.sensors[settingIndex][fieldName] = fieldValue;\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser5 = data.getUser) === null || _data$getUser5 === void 0 ? void 0 : _data$getUser5.id,\n        plantId: plant.plantId,\n        input: plant.sensors[settingIndex]\n      }\n    });\n  };\n\n  const getSensorCompleteName = (plant, settingType) => {\n    var _plant$sensors;\n\n    let sensorNewNumber = 1;\n    plant === null || plant === void 0 ? void 0 : (_plant$sensors = plant.sensors) === null || _plant$sensors === void 0 ? void 0 : _plant$sensors.map(module => {\n      let lastSensorNum = getLastNumOfSensor(module.settingType);\n      const rawSensorTypeName = getSensorWithoutNumber(module === null || module === void 0 ? void 0 : module.settingType);\n\n      if (!isNaN(lastSensorNum) && rawSensorTypeName === settingType) {\n        sensorNewNumber = lastSensorNum + 1;\n      }\n    });\n    return `${settingType}_${sensorNewNumber}`;\n  };\n\n  const dispatchNewSettingSave = (plant, settingType, plantIndex) => {\n    var _data$getUser6;\n\n    const completeSensorTypeName = getSensorCompleteName(plant, settingType);\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser6 = data.getUser) === null || _data$getUser6 === void 0 ? void 0 : _data$getUser6.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(completeSensorTypeName)\n      }\n    });\n    dispatch({\n      type: 'ADD_MODULE',\n      payload: {\n        plantIndex,\n        setting: getDefaultSetting(completeSensorTypeName)\n      }\n    });\n  };\n\n  const selectStyle = {\n    control: styles => _objectSpread(_objectSpread({}, styles), {}, {\n      width: '120px',\n      textAlign: 'left'\n    })\n  };\n  const sensorsOptions = [{\n    value: SensorsTypes.DISTANCE,\n    label: intl.formatMessage({\n      id: 'distanceId',\n      defaultMessage: 'distanceId'\n    })\n  }, {\n    value: SensorsTypes.SOIL_HUMIDITY,\n    label: intl.formatMessage({\n      id: 'moistHumidityId',\n      defaultMessage: 'moistHumidityId'\n    })\n  }, {\n    value: SensorsTypes.HUMIDITY_TEMPETURE,\n    label: intl.formatMessage({\n      id: 'airHumidityAndTempetureId',\n      defaultMessage: 'airHumidityAndTempetureId'\n    })\n  }, {\n    value: SensorsTypes.LIGHT,\n    label: intl.formatMessage({\n      id: 'lightSensorId',\n      defaultMessage: 'lightSensorId'\n    })\n  }, {\n    value: SensorsTypes.PLUG,\n    label: intl.formatMessage({\n      id: 'intelligentPlugId',\n      defaultMessage: 'intelligentPlugId'\n    })\n  }];\n  return __jsx(PlantPageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 5\n    }\n  }, __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: \"home-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"backProfileBtn\",\n    defaultMessage: \"Back to Profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }\n  }))), __jsx(OrderDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }, __jsx(BlockTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"dittoBotsIds\",\n    defaultMessage: \"dittoBotsIds\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }\n  })), (plants === null || plants === void 0 ? void 0 : plants.length) < 1 && __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 36\n    }\n  }, intl.formatMessage({\n    id: 'noDittoBotsTextId',\n    defaultMessage: 'noDittoBotsTextId'\n  })), plants === null || plants === void 0 ? void 0 : plants.map((plant, i) => {\n    var _plant$timestamp;\n\n    const {\n      sensors\n    } = plant;\n    console.log('sensors', sensors);\n    return __jsx(DashboardContainer, {\n      key: i + '-orderList',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }\n    }, __jsx(Row1, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 19\n      }\n    }, __jsx(Column1, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 21\n      }\n    }, __jsx(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"controllerNameId\",\n      defaultMessage: \"controllerNameId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 25\n      }\n    }, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      disabled: true,\n      value: plant === null || plant === void 0 ? void 0 : plant.name // we have to change the onChange because the is no one for the controller name actualy\n      ,\n      onChange: e => handleUpdateDittoControllerName(plant, e.target.value),\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 27\n      }\n    }))), __jsx(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"statusId\",\n      defaultMessage: \"statusId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 27\n      }\n    }, ((_plant$timestamp = plant.timestamp) === null || _plant$timestamp === void 0 ? void 0 : _plant$timestamp.length) > 0 ? moment(plant.timestamp).format('hh:mm A - DD MMM') : '', \" \", hasDittoBotUpdatedInLastMinute(plant.timestamp) ? '[ONLINE]' : '[OFFLINE]'))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addSensorId\",\n      defaultMessage: \"addSensorId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 25\n      }\n    }, __jsx(Select, {\n      onChange: e => dispatchNewSettingSave(plant, e.value, i),\n      value: sensorSelected // @ts-ignore\n      ,\n      options: sensorsOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 25\n      }\n    }))))), __jsx(SensorsWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 19\n      }\n    }, sensors === null || sensors === void 0 ? void 0 : sensors.map((module, index) => {\n      switch (module === null || module === void 0 ? void 0 : module.settingType) {\n        case `${SensorsTypes.SOIL_HUMIDITY}_1`:\n        case `${SensorsTypes.SOIL_HUMIDITY}_2`:\n        case `${SensorsTypes.SOIL_HUMIDITY}_3`:\n          // check the number of same setting to send\n          return __jsx(SoilHumiditySensor, {\n            key: i + module.settingType,\n            data: data,\n            plant: plant,\n            errorId: errorId,\n            openTab: openTab,\n            handleDeleteSensor: handleDeleteSensor,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 29\n            }\n          });\n\n        case `${SensorsTypes.LIGHT}_1`:\n          return __jsx(LightSensor, {\n            key: i + module.settingType,\n            data: data,\n            errorId: errorId,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 29\n            }\n          });\n\n        case `${SensorsTypes.DISTANCE}_1`:\n          return __jsx(DistanceSensor, {\n            key: i + module.settingType,\n            data: data,\n            plant: plant,\n            errorId: errorId,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 29\n            }\n          });\n\n        case `${SensorsTypes.PLUG}_1`:\n          return __jsx(Plug, {\n            key: i + module.settingType,\n            data: data,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 29\n            }\n          });\n\n        default:\n          break;\n      }\n    })));\n  }), userinfoMsg && __jsx(SuccessMsg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"userInfoSuccess\",\n    defaultMessage: userinfoMsg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 17\n    }\n  })))), __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 7\n    }\n  }, __jsx(BlockTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addController\",\n    defaultMessage: \"Your Plants\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 11\n    }\n  })), __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantNameField\",\n    defaultMessage: \"Name of the plant\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    onChange: e => setPlantName(e.target.value),\n    placeholder: intl.formatMessage({\n      id: 'plantNamePlaceholderId',\n      defaultMessage: 'Balcony plants'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 13\n    }\n  }))), __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantIdField\",\n    defaultMessage: \"ID of the controller\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"plantId\",\n    value: plantId,\n    onChange: e => setControllerID(e.target.value),\n    placeholder: intl.formatMessage({\n      id: 'serialNumberPlaceholderId',\n      defaultMessage: 'Look behind Ditto Bot'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 13\n    }\n  }))), __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: handleAddDittoBotClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 9\n    }\n  }, __jsx(ButtonText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addDittoBotButton\",\n    defaultMessage: \"Add plant\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default YourPlants;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx"],"names":["React","useState","useContext","Link","useMutation","useQuery","CommonMode","SensorsTypes","ErrorMessage","PlantsPageContainer","OrderDetails","BlockTitle","Text","ListItem","ListTitle","ListDes","ButtonText","PlantPageWrapper","Column1","Row1","DashboardContainer","SensorsWrapper","FormattedMessage","useIntl","GET_LOGGED_IN_USER","Button","ADD_PLANT","DELETE_SETTING","UPDATE_SETTING","Input","ProfileContext","SuccessMsg","SoilHumiditySensor","LightSensor","Select","Plug","DistanceSensor","AuthContext","hasDittoBotUpdatedInLastMinute","getLastNumOfSensor","getSensorWithoutNumber","moment","YourPlants","deviceType","userRefetch","state","dispatch","authDispatch","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","intl","name","setPlantName","openTab","setOpenTab","errorId","setErrorId","plantId","setControllerID","userinfoMsg","setUserinfoMsg","sensorSelected","setSensor","addPlant","updateSetting","deleteSetting","plants","message","shouldNotAssignRelay","module","field","value","relayOneIdRelated","relayTwoIdRelated","texto1","formatMessage","id","defaultMessage","texto2","b","confirm","console","log","defaultSettingValuesIfModeChanges","settingType","mode","plant","settingIndex","sensors","findIndex","getDefaultSetting","NONE","logs","isClean","minWarning","maxWarning","Number","setTimeout","handleSettingsChange","a","type","payload","dispatchSettingSave","handleAddDittoBotClick","variables","getUser","handleUpdateDittoControllerName","handleDeleteSensor","plantSelected","settingName","plantIndex","onDeleteSchedule","scheduleIndex","scheduledOnTimes","splice","input","settingTypeName","whatsappWarningsOn","relayOneAutomatedTimeToRun","relayTwoAutomatedStartedTime","relayOneAutomatedStartedTime","relayOneWorking","relayTwoAutomatedTimeToRun","relayTwoWorking","fieldName","fieldValue","getSensorCompleteName","sensorNewNumber","map","lastSensorNum","rawSensorTypeName","isNaN","dispatchNewSettingSave","completeSensorTypeName","setting","selectStyle","control","styles","width","textAlign","sensorsOptions","DISTANCE","label","SOIL_HUMIDITY","HUMIDITY_TEMPETURE","LIGHT","PLUG","length","i","e","target","timestamp","format","justifyContent","index"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAAsCC,UAAtC,QAAwD,OAAxD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;AACA,SAASC,UAAT,EAAgCC,YAAhC,QAAoD,gBAApD;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SACEC,mBADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,IAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,OAPF,EAQEC,UARF,EASEC,gBATF,EAYEC,OAZF,EAaEC,IAbF,EAeEC,kBAfF,EAgBEC,cAhBF,QAiBO,qBAjBP;AAkBA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,YAA1C;AACA,SAASC,kBAAT,QAAgE,8BAAhE;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,cAApC,QAA0D,4BAA1D;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,UAAT,QAA2B,+CAA3B;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,8BAAT,EAAyCC,kBAAzC,EAA6DC,sBAA7D,QAA2F,iBAA3F;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAeA,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAiC;AAC7E,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsB5C,UAAU,CAAC4B,cAAD,CAAtC;AACA,QAAM;AAACiB,IAAAA;AAAD,MAAiB7C,UAAU,CAAMmC,WAAN,CAAjC;AAEA,QAAM;AAAEW,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAI,GAAG;AAAzB,MAAgC7C,QAAQ,CAACmB,kBAAD,EAAqB;AACjE2B,IAAAA,2BAA2B,EAAE,IADoC;AAEjEC,IAAAA,WAAW,EAAE,cAFoD,CAGjE;;AAHiE,GAArB,CAA9C,CAJ6E,CAU7E;AACA;AACA;AACA;AACA;AAEA;;AACA,QAAMC,IAAI,GAAG9B,OAAO,EAApB;AACA,QAAM;AAAA,OAAC+B,IAAD;AAAA,OAAOC;AAAP,MAAuBtD,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM;AAAA,OAACuD,OAAD;AAAA,OAAUC;AAAV,MAAwBxD,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACyD,OAAD;AAAA,OAAUC;AAAV,MAAwB1D,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAAC2D,OAAD;AAAA,OAAUC;AAAV,MAA6B5D,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM;AAAA,OAAC6D,WAAD;AAAA,OAAcC;AAAd,MAAgC9D,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAAC+D,cAAD;AAAA,OAAiBC;AAAjB,MAA8BhE,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACiE,QAAD,IAAa9D,WAAW,CAACsB,SAAD,CAA9B;AAEA,QAAM,CAACyC,aAAD,IAAkB/D,WAAW,CAACwB,cAAD,CAAnC;AACA,QAAM,CAACwC,aAAD,IAAkBhE,WAAW,CAACuB,cAAD,CAAnC;AACA,QAAM;AAAE0C,IAAAA;AAAF,MAAaxB,KAAnB;;AAEA,MAAIG,OAAJ,EAAa;AACX,WAAO,MAAC,YAAD;AAAc,MAAA,OAAO,EAAE,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAAA;;AAED,MAAIC,KAAJ,EAAW;AACT,WACE,MAAC,YAAD;AAAc,MAAA,OAAO,EAAEA,KAAK,CAACqB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAAA;;AAED,QAAMC,oBAAoB,GAAG,CAACC,MAAD,EAAcC,KAAd,EAA6BC,KAA7B,KAAyD;AACpF,UAAMC,iBAAiB,GAAG,mBAA1B;AACA,UAAMC,iBAAiB,GAAG,mBAA1B;AAEA,QAAIH,KAAK,KAAKE,iBAAV,IAA+BF,KAAK,KAAKG,iBAA7C,EAAgE,OAAO,KAAP,CAJoB,CAMpF;;AACE,QAAI,CAACJ,MAAM,CAACG,iBAAD,CAAN,KAA8BD,KAA9B,IAAuCF,MAAM,CAACI,iBAAD,CAAN,KAA8BF,KAAtE,KAAiFA,KAAK,KAAK,EAA/F,EAAmG;AACjG,YAAMG,MAAM,GAAGxB,IAAI,CAACyB,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE,sBAAN;AAA8BC,QAAAA,cAAc,EAAE;AAA9C,OAAnB,CAAf;AACA,YAAMC,MAAM,GAAG5B,IAAI,CAACyB,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE,uBAAN;AAA+BC,QAAAA,cAAc,EAAE;AAA/C,OAAnB,CAAf;AACA,YAAME,CAAC,GAAGC,OAAO,CAACN,MAAM,GAAGL,MAAM,CAAClB,IAAhB,GAAuB2B,MAAxB,CAAjB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,CAAtB;AACA,UAAIA,CAAJ,EAAO,OAAO,KAAP;AACP,aAAO,KAAP;AACD,KAdiF,CAepF;;;AAED,WAAO,KAAP;AACA,GAlBD;;AAoBA,QAAMI,iCAAiC,GAAG,CAACd,MAAD,EAAcC,KAAd,EAA6BC,KAA7B,EAAsDa,WAAtD,KAAoF;AAC5H,UAAMC,IAAI,GAAG,MAAb;AACA,QAAIf,KAAK,KAAKe,IAAd,EAAoB,OAAOC,KAAP;AAEpB,UAAMC,YAAY,GAAGD,KAAK,CAACE,OAAN,CAAcC,SAAd,CAAyBpB,MAAD,IAAsBA,MAAM,CAACe,WAAP,KAAuBA,WAArE,CAArB;AACAE,IAAAA,KAAK,CAACE,OAAN,CAAcD,YAAd,IAA8BG,iBAAiB,CAACN,WAAD,EAAcE,KAAK,CAACE,OAAN,CAAcD,YAAd,EAA4BpC,IAA1C,EAAgDoB,KAAK,KAAKpE,UAAU,CAACwF,IAArB,GAA4B,EAA5B,GAAiCL,KAAK,CAACE,OAAN,CAAcD,YAAd,EAA4BK,IAA7G,CAA/C;AAED,WAAOvB,MAAP;AACA,GARD;;AAUA,QAAMwB,OAAO,GAAG,CAACP,KAAD,EAAahB,KAAb,EAA4BC,KAA5B,KAAwD;AACtE;AACA,UAAMuB,UAAU,GAAG,YAAnB;AACA,UAAMC,UAAU,GAAG,YAAnB;AAEA,QAAIzB,KAAK,KAAKwB,UAAV,IAAwBxB,KAAK,KAAKyB,UAAtC,EAAkD,OAAO,IAAP;;AAClD,QAAIC,MAAM,CAACzB,KAAD,CAAN,GAAgB,CAAhB,IAAqByB,MAAM,CAACzB,KAAD,CAAN,GAAgB,GAAzC,EAA8C;AAC5Cf,MAAAA,UAAU,CAACc,KAAD,CAAV;AACA2B,MAAAA,UAAU,CAAC,MAAM;AACbzC,QAAAA,UAAU,CAAC,EAAD,CAAV;AACH,OAFS,EAEP,IAFO,CAAV;AAGA,aAAO,KAAP;AACD;;AACDA,IAAAA,UAAU,CAAC,EAAD,CAAV,CAbsE,CAetE;;AACA,WAAO,IAAP;AACD,GAjBD;;AAmBA,QAAM0C,oBAAoB,GAAG,CAACZ,KAAD,EAAahB,KAAb,EAA4BC,KAA5B,EAAqDa,WAArD,KAAmF;AAC9G;AAEA,UAAMe,CAAC,GAAG/B,oBAAoB,CAACkB,KAAD,EAAQhB,KAAR,EAAeC,KAAf,CAA9B;AAEA,QAAI4B,CAAJ,EAAO;AACPb,IAAAA,KAAK,GAAGH,iCAAiC,CAACd,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBa,WAAvB,CAAzC;AAEAzC,IAAAA,QAAQ,CAAC;AAAEyD,MAAAA,IAAI,EAAEhB,WAAR;AAAqBiB,MAAAA,OAAO,EAAE;AAAEf,QAAAA,KAAF;AAASf,QAAAA,KAAT;AAAgBD,QAAAA;AAAhB;AAA9B,KAAD,CAAR;AAEAuB,IAAAA,OAAO,CAACP,KAAD,EAAQhB,KAAR,EAAeC,KAAf,CAAP,IAAgC+B,mBAAmB,CAAChB,KAAD,EAAQhB,KAAR,EAAeC,KAAf,EAAsBa,WAAtB,CAAnD;AAEAxB,IAAAA,cAAc,CAAC,+BAAD,CAAd;AACAqC,IAAAA,UAAU,CAAC,YAAY;AACrBrC,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAhBD;;AAkBA,QAAM2C,sBAAsB,GAAG,MAAM;AAAA;;AACnCxC,IAAAA,QAAQ,CAAC;AACPyC,MAAAA,SAAS,EAAE;AACT5B,QAAAA,EAAE,EAAE7B,IAAF,aAAEA,IAAF,wCAAEA,IAAI,CAAE0D,OAAR,kDAAE,cAAe7B,EADV;AAETzB,QAAAA,IAFS;AAGTM,QAAAA,OAAO,EAAEuC,MAAM,CAACvC,OAAD;AAHN;AADJ,KAAD,CAAR;AAQAG,IAAAA,cAAc,CAAC,0BAAD,CAAd;AACAqC,IAAAA,UAAU,CAAC,YAAY;AACrBrC,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAbD;;AAeA,QAAM8C,+BAA+B,GAAG,CAACpB,KAAD,EAAQnC,IAAR,KAAyB;AAC/D8C,IAAAA,UAAU,CAAC,YAAY;AAAA;;AACrBlC,MAAAA,QAAQ,CAAC;AACPyC,QAAAA,SAAS,EAAE;AACT5B,UAAAA,EAAE,EAAE7B,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAE0D,OAAR,mDAAE,eAAe7B,EADV;AAETzB,UAAAA,IAFS;AAGTM,UAAAA,OAAO,EAAE6B,KAAK,CAAC7B;AAHN;AADJ,OAAD,CAAR;AAQD,KATS,EASP,IATO,CAAV;AAUAG,IAAAA,cAAc,CAAC,0BAAD,CAAd;AACAqC,IAAAA,UAAU,CAAC,YAAY;AACrBrC,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAfD;;AAiBA,QAAM+C,kBAAkB,GAAG,CAACC,aAAD,EAAqBxB,WAArB,KAAmD;AAAA;;AAC5EnB,IAAAA,aAAa,CAAC;AACZuC,MAAAA,SAAS,EAAE;AACT5B,QAAAA,EAAE,EAAE7B,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAE0D,OAAR,mDAAE,eAAe7B,EADV;AAETnB,QAAAA,OAAO,EAAEmD,aAAa,CAACnD,OAFd;AAGToD,QAAAA,WAAW,EAAEzB;AAHJ;AADC,KAAD,CAAb;AAQA,UAAM0B,UAAU,GAAG5C,MAAM,CAACuB,SAAP,CAAkBH,KAAD,IAAgBA,KAAK,CAAC7B,OAAN,KAAkBmD,aAAa,CAACnD,OAAjE,CAAnB;AACA,UAAM8B,YAAY,GAAGrB,MAAM,CAAC4C,UAAD,CAAN,CAAmBtB,OAAnB,CAA2BC,SAA3B,CAAsCpB,MAAD,IAAsBA,MAAM,CAACe,WAAP,KAAuBA,WAAlF,CAArB;AAEAzC,IAAAA,QAAQ,CAAC;AAAEyD,MAAAA,IAAI,EAAE,eAAR;AAAyBC,MAAAA,OAAO,EAAE;AAACS,QAAAA,UAAD;AAAavB,QAAAA;AAAb;AAAlC,KAAD,CAAR;AAEA3B,IAAAA,cAAc,CAAC,8BAAD,CAAd;AACAqC,IAAAA,UAAU,CAAC,YAAY;AACrBrC,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAlBD;;AAoBA,QAAMmD,gBAAgB,GAAG,CAACzB,KAAD,EAAaF,WAAb,EAAwC4B,aAAxC,KAAkE;AAAA;;AACzF,UAAMzB,YAAY,GAAGD,KAAK,CAACE,OAAN,CAAcC,SAAd,CAAyBpB,MAAD,IAAsBA,MAAM,CAACe,WAAP,KAAuBA,WAArE,CAArB;AACA,6BAAAE,KAAK,CAACE,OAAN,CAAcD,YAAd,iFAA6B0B,gBAA7B,CAA8CC,MAA9C,CAAqDF,aAArD,EAAoE,CAApE;AAEAhD,IAAAA,aAAa,CAAC;AACZwC,MAAAA,SAAS,EAAE;AACT5B,QAAAA,EAAE,EAAE7B,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAE0D,OAAR,mDAAE,eAAe7B,EADV;AAETnB,QAAAA,OAAO,EAAE6B,KAAK,CAAC7B,OAFN;AAGT0D,QAAAA,KAAK,kCAAO7B,KAAK,CAACE,OAAN,CAAcD,YAAd,CAAP;AAAoCH,UAAAA,WAAW,EAAEA;AAAjD;AAHI;AADC,KAAD,CAAb;AAQAxB,IAAAA,cAAc,CAAC,+BAAD,CAAd;AACAqC,IAAAA,UAAU,CAAC,YAAY;AACrBrC,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAhBD;;AAkBA,QAAM8B,iBAAiB,GAAG,CAAC0B,eAAD,EAA0BjE,IAA1B,EAAyCyC,IAAzC,KAA2D;AACnF,WAAO;AACLzC,MAAAA,IAAI,EAAEA,IAAI,IAAI,EADT;AAELkE,MAAAA,kBAAkB,EAAE,KAFf;AAGLtB,MAAAA,UAAU,EAAE,EAHP;AAILD,MAAAA,UAAU,EAAE,EAJP;AAKLT,MAAAA,IAAI,EAAElF,UAAU,CAACwF,IALZ;AAML2B,MAAAA,0BAA0B,EAAE,EANvB;AAOLC,MAAAA,4BAA4B,EAAE,EAPzB;AAQLC,MAAAA,4BAA4B,EAAE,EARzB;AASLhD,MAAAA,iBAAiB,EAAE,EATd;AAULiD,MAAAA,eAAe,EAAE,KAVZ;AAWLC,MAAAA,0BAA0B,EAAE,EAXvB;AAYLjD,MAAAA,iBAAiB,EAAE,EAZd;AAaLkD,MAAAA,eAAe,EAAE,KAbZ;AAcL/B,MAAAA,IAAI,EAAEA,IAAI,IAAI,EAdT;AAeLqB,MAAAA,gBAAgB,EAAE,EAfb;AAgBL7B,MAAAA,WAAW,EAAEgC;AAhBR,KAAP;AAkBH,GAnBC;;AAqBA,QAAMd,mBAAmB,GAAG,CAAChB,KAAD,EAAasC,SAAb,EAAgCC,UAAhC,EAA8DzC,WAA9D,KAA4F;AAAA;;AACtH,UAAMG,YAAY,GAAGD,KAAK,CAACE,OAAN,CAAcC,SAAd,CAAyBpB,MAAD,IAAsBA,MAAM,CAACe,WAAP,KAAuBA,WAArE,CAArB;AACAE,IAAAA,KAAK,CAACE,OAAN,CAAcD,YAAd,EAA4BqC,SAA5B,IAAyCC,UAAzC;AAEA7D,IAAAA,aAAa,CAAC;AACZwC,MAAAA,SAAS,EAAE;AACT5B,QAAAA,EAAE,EAAE7B,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAE0D,OAAR,mDAAE,eAAe7B,EADV;AAETnB,QAAAA,OAAO,EAAE6B,KAAK,CAAC7B,OAFN;AAGT0D,QAAAA,KAAK,EAAE7B,KAAK,CAACE,OAAN,CAAcD,YAAd;AAHE;AADC,KAAD,CAAb;AAOD,GAXD;;AAaA,QAAMuC,qBAAqB,GAAG,CAACxC,KAAD,EAAQF,WAAR,KAAsC;AAAA;;AAClE,QAAI2C,eAAe,GAAG,CAAtB;AAEAzC,IAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,8BAAAA,KAAK,CAAEE,OAAP,kEAAgBwC,GAAhB,CAAqB3D,MAAD,IAAsB;AACxC,UAAI4D,aAAa,GAAG7F,kBAAkB,CAACiC,MAAM,CAACe,WAAR,CAAtC;AACA,YAAM8C,iBAAiB,GAAG7F,sBAAsB,CAACgC,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEe,WAAT,CAAhD;;AAEA,UAAI,CAAC+C,KAAK,CAACF,aAAD,CAAN,IAAyBC,iBAAiB,KAAK9C,WAAnD,EAAgE;AAC9D2C,QAAAA,eAAe,GAAGE,aAAa,GAAG,CAAlC;AACD;AACF,KAPD;AASA,WAAQ,GAAE7C,WAAY,IAAG2C,eAAgB,EAAzC;AACD,GAbD;;AAeA,QAAMK,sBAAsB,GAAG,CAAC9C,KAAD,EAAaF,WAAb,EAAwC0B,UAAxC,KAA+D;AAAA;;AAC5F,UAAMuB,sBAAsB,GAAGP,qBAAqB,CAACxC,KAAD,EAAQF,WAAR,CAApD;AAEApB,IAAAA,aAAa,CAAC;AACZwC,MAAAA,SAAS,EAAE;AACT5B,QAAAA,EAAE,EAAE7B,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAE0D,OAAR,mDAAE,eAAe7B,EADV;AAETnB,QAAAA,OAAO,EAAE6B,KAAK,CAAC7B,OAFN;AAGT0D,QAAAA,KAAK,EAAEzB,iBAAiB,CAAC2C,sBAAD;AAHf;AADC,KAAD,CAAb;AAQA1F,IAAAA,QAAQ,CAAC;AAAEyD,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE;AAACS,QAAAA,UAAD;AAAawB,QAAAA,OAAO,EAAE5C,iBAAiB,CAAC2C,sBAAD;AAAvC;AAA/B,KAAD,CAAR;AACD,GAZD;;AAcA,QAAME,WAAW,GAAG;AAAEC,IAAAA,OAAO,EAAEC,MAAM,oCAAUA,MAAV;AAAkBC,MAAAA,KAAK,EAAE,OAAzB;AAAkCC,MAAAA,SAAS,EAAE;AAA7C;AAAjB,GAApB;AACA,QAAMC,cAAc,GAAG,CACrB;AAAErE,IAAAA,KAAK,EAAEnE,YAAY,CAACyI,QAAtB;AAAgCC,IAAAA,KAAK,EAAE5F,IAAI,CAACyB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,YAAN;AAAoBC,MAAAA,cAAc,EAAE;AAApC,KAAnB;AAAvC,GADqB,EAErB;AAAEN,IAAAA,KAAK,EAAEnE,YAAY,CAAC2I,aAAtB;AAAqCD,IAAAA,KAAK,EAAE5F,IAAI,CAACyB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,iBAAN;AAAyBC,MAAAA,cAAc,EAAE;AAAzC,KAAnB;AAA5C,GAFqB,EAGrB;AAAEN,IAAAA,KAAK,EAAEnE,YAAY,CAAC4I,kBAAtB;AAA0CF,IAAAA,KAAK,EAAE5F,IAAI,CAACyB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,2BAAN;AAAmCC,MAAAA,cAAc,EAAE;AAAnD,KAAnB;AAAjD,GAHqB,EAIrB;AAAEN,IAAAA,KAAK,EAAEnE,YAAY,CAAC6I,KAAtB;AAA6BH,IAAAA,KAAK,EAAE5F,IAAI,CAACyB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,eAAN;AAAuBC,MAAAA,cAAc,EAAE;AAAvC,KAAnB;AAApC,GAJqB,EAKrB;AAAEN,IAAAA,KAAK,EAAEnE,YAAY,CAAC8I,IAAtB;AAA4BJ,IAAAA,KAAK,EAAE5F,IAAI,CAACyB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,mBAAN;AAA2BC,MAAAA,cAAc,EAAE;AAA3C,KAAnB;AAAnC,GALqB,CAAvB;AAQA,SACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAqB,IAAA,KAAK,EAAE;AAAE6D,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,gBAArB;AAAsC,IAAA,cAAc,EAAC,iBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EAOE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,cADL;AAEE,IAAA,cAAc,EAAC,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAQI,CAAAxE,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEiF,MAAR,IAAiB,CAAjB,IAAuB,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOjG,IAAI,CAACyB,aAAL,CAAmB;AAAEC,IAAAA,EAAE,EAAE,mBAAN;AAA2BC,IAAAA,cAAc,EAAE;AAA3C,GAAnB,CAAP,CAR3B,EASIX,MATJ,aASIA,MATJ,uBASIA,MAAM,CAAE8D,GAAR,CAAY,CAAC1C,KAAD,EAAQ8D,CAAR,KAAsB;AAAA;;AAClC,UAAM;AAAE5D,MAAAA;AAAF,QAAcF,KAApB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBM,OAAvB;AACE,WACE,MAAC,kBAAD;AAAoB,MAAA,GAAG,EAAE4D,CAAC,GAAG,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,gBAAD;AACE,MAAA,EAAE,EAAC,kBADL;AAEE,MAAA,cAAc,EAAC,kBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAE,IAHZ;AAIE,MAAA,KAAK,EAAE9D,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEnC,IAJhB,CAKE;AALF;AAME,MAAA,QAAQ,EAAGkG,CAAD,IAAY3C,+BAA+B,CAACpB,KAAD,EAAQ+D,CAAC,CAACC,MAAF,CAAS/E,KAAjB,CANvD;AAOE,MAAA,eAAe,EAAC,SAPlB;AAQE,MAAA,KAAK,EAAC,OARR;AASE,MAAA,MAAM,EAAC,QATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,CADF,EAyBE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAgBE,MAAC,gBAAD;AACE,MAAA,EAAE,EAAC,UADL;AAEE,MAAA,cAAc,EAAC,UAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBF,CADF,CADF,EAuCE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,qBAAAe,KAAK,CAACiE,SAAN,sEAAiBJ,MAAjB,IAA0B,CAA1B,GAA8B7G,MAAM,CAACgD,KAAK,CAACiE,SAAP,CAAN,CAAwBC,MAAxB,CAA+B,kBAA/B,CAA9B,GAAmF,EAA1F,OAA+FrH,8BAA8B,CAACmD,KAAK,CAACiE,SAAP,CAA9B,GAAkD,UAAlD,GAA+D,WAA9J,CADF,CAvCF,CAzBF,EAuEE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAE;AAAEE,QAAAA,cAAc,EAAE;AAAlB,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,gBAAD;AACA,MAAA,EAAE,EAAC,aADH;AAEA,MAAA,cAAc,EAAC,aAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADA,CADF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,MAAC,MAAD;AACI,MAAA,QAAQ,EAAGJ,CAAD,IAAYjB,sBAAsB,CAAC9C,KAAD,EAAQ+D,CAAC,CAAC9E,KAAV,EAAiB6E,CAAjB,CADhD;AAEI,MAAA,KAAK,EAAEvF,cAFX,CAGI;AAHJ;AAII,MAAA,OAAO,EAAE+E,cAJb;AAKI,MAAA,MAAM,EAAEL,WALZ;AAMI,MAAA,YAAY,EAAE,OANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CATF,CAvEF,CADF,CADF,EAqHE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE/C,OADF,aACEA,OADF,uBACEA,OAAO,CAAEwC,GAAT,CAAa,CAAC3D,MAAD,EAAmBqF,KAAnB,KAAqC;AAChD,cAAQrF,MAAR,aAAQA,MAAR,uBAAQA,MAAM,CAAEe,WAAhB;AACE,aAAM,GAAEhF,YAAY,CAAC2I,aAAc,IAAnC;AACA,aAAM,GAAE3I,YAAY,CAAC2I,aAAc,IAAnC;AACA,aAAM,GAAE3I,YAAY,CAAC2I,aAAc,IAAnC;AACE;AACA,iBACE,MAAC,kBAAD;AACE,YAAA,GAAG,EAAEK,CAAC,GAAG/E,MAAM,CAACe,WADlB;AAEE,YAAA,IAAI,EAAErC,IAFR;AAGE,YAAA,KAAK,EAAEuC,KAHT;AAIE,YAAA,OAAO,EAAE/B,OAJX;AAKE,YAAA,OAAO,EAAEF,OALX;AAME,YAAA,kBAAkB,EAAEsD,kBANtB;AAOE,YAAA,UAAU,EAAErD,UAPd;AAQE,YAAA,WAAW,EAAEe,MAAM,CAACe,WARtB;AASE,YAAA,oBAAoB,EAAEc,oBATxB;AAUE,YAAA,gBAAgB,EAAEa,gBAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAcF,aAAM,GAAE3G,YAAY,CAAC6I,KAAM,IAA3B;AACE,iBACE,MAAC,WAAD;AACE,YAAA,GAAG,EAAEG,CAAC,GAAG/E,MAAM,CAACe,WADlB;AAEE,YAAA,IAAI,EAAErC,IAFR;AAGE,YAAA,OAAO,EAAEQ,OAHX;AAIE,YAAA,KAAK,EAAE+B,KAJT;AAKE,YAAA,kBAAkB,EAAEqB,kBALtB;AAME,YAAA,OAAO,EAAEtD,OANX;AAOE,YAAA,UAAU,EAAEC,UAPd;AAQE,YAAA,WAAW,EAAEe,MAAM,CAACe,WARtB;AASE,YAAA,oBAAoB,EAAEc,oBATxB;AAUE,YAAA,gBAAgB,EAAEa,gBAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAcF,aAAM,GAAE3G,YAAY,CAACyI,QAAS,IAA9B;AACE,iBACE,MAAC,cAAD;AACE,YAAA,GAAG,EAAEO,CAAC,GAAG/E,MAAM,CAACe,WADlB;AAEE,YAAA,IAAI,EAAErC,IAFR;AAGE,YAAA,KAAK,EAAEuC,KAHT;AAIE,YAAA,OAAO,EAAE/B,OAJX;AAKE,YAAA,kBAAkB,EAAEoD,kBALtB;AAME,YAAA,OAAO,EAAEtD,OANX;AAOE,YAAA,UAAU,EAAEC,UAPd;AAQE,YAAA,WAAW,EAAEe,MAAM,CAACe,WARtB;AASE,YAAA,oBAAoB,EAAEc,oBATxB;AAUE,YAAA,gBAAgB,EAAEa,gBAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAcF,aAAM,GAAE3G,YAAY,CAAC8I,IAAK,IAA1B;AACE,iBACE,MAAC,IAAD;AACE,YAAA,GAAG,EAAEE,CAAC,GAAG/E,MAAM,CAACe,WADlB;AAEE,YAAA,IAAI,EAAErC,IAFR;AAGE,YAAA,KAAK,EAAEuC,KAHT;AAIE,YAAA,kBAAkB,EAAEqB,kBAJtB;AAKE,YAAA,OAAO,EAAEtD,OALX;AAME,YAAA,UAAU,EAAEC,UANd;AAOE,YAAA,WAAW,EAAEe,MAAM,CAACe,WAPtB;AAQE,YAAA,oBAAoB,EAAEc,oBARxB;AASE,YAAA,gBAAgB,EAAEa,gBATpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAcF;AACE;AAjEJ;AAmED,KApED,CADF,CArHF,CADF;AAgMD,GAnMD,CATJ,EA+MGpD,WAAW,IACR,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,cAAc,EAAEA,WAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhNN,CAPF,CADF,EAmOE,MAAC,mBAAD;AAAqB,IAAA,KAAK,EAAE;AAAE+E,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,eADL;AAEE,IAAA,cAAc,EAAC,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAQE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,cAAc,EAAC,mBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,KAAK,EAAEvF,IAHT;AAIE,IAAA,QAAQ,EAAGkG,CAAD,IAAOjG,YAAY,CAACiG,CAAC,CAACC,MAAF,CAAS/E,KAAV,CAJ/B;AAKE,IAAA,WAAW,EAAErB,IAAI,CAACyB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,wBAAN;AAAgCC,MAAAA,cAAc,EAAE;AAAhD,KAAnB,CALf;AAME,IAAA,eAAe,EAAC,SANlB;AAOE,IAAA,KAAK,EAAC,OAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CARF,EA8BE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,cADL;AAEE,IAAA,cAAc,EAAC,sBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,KAAK,EAAEpB,OAHT;AAIE,IAAA,QAAQ,EAAG4F,CAAD,IAAO3F,eAAe,CAAC2F,CAAC,CAACC,MAAF,CAAS/E,KAAV,CAJlC;AAKE,IAAA,WAAW,EAAErB,IAAI,CAACyB,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,2BAAN;AAAmCC,MAAAA,cAAc,EAAE;AAAnD,KAAnB,CALf;AAME,IAAA,eAAe,EAAC,SANlB;AAOE,IAAA,KAAK,EAAC,OAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CA9BF,EAoDE,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,aAAlB;AAAgC,IAAA,OAAO,EAAC,WAAxC;AAAoD,IAAA,YAAY,EAAE,GAAlE;AAAuE,IAAA,OAAO,EAAE0B,sBAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AAAkB,IAAA,EAAE,EAAE,mBAAtB;AAA2C,IAAA,cAAc,EAAC,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CApDF,CAnOF,CADF;AAgSD,CAzhBD;;AA2hBA,eAAehE,UAAf","sourcesContent":["import React,  { useState, useEffect, useContext } from 'react';\nimport Link from 'next/link';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, RelaysIds, SensorsTypes } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\n\nimport {\n  PlantsPageContainer,\n  OrderDetails,\n  BlockTitle,\n  Text,\n  ListItem,\n  ListTitle,\n  ListDes,\n  ButtonText,\n  PlantPageWrapper,\n  PlantsWrapper,\n  PlantsSensorContainer,\n  Column1,\n  Row1,\n  CardButtons,\n  DashboardContainer,\n  SensorsWrapper\n} from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER, GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, DELETE_SETTING, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\nimport { ISetting } from 'utils/types';\nimport Select from 'react-select';\nimport Plug from './sensors/Plug';\nimport DistanceSensor from './sensors/DistanceSensor';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { hasDittoBotUpdatedInLastMinute, getLastNumOfSensor, getSensorWithoutNumber } from 'utils/ditto-bot';\nimport moment from 'moment';\n  \n\ntype YourPlantsProps = {\n  data?: any;\n  userRefetch: any;\n  index?: Number;\n  Router?: any;\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst YourPlants: React.FC<YourPlantsProps> = ({ deviceType, userRefetch }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const {authDispatch} = useContext<any>(AuthContext);\n\n  const { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    // pollInterval: 5000,\n  });\n\n  // const { loading1, error1, data1 = {} } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n  //   notifyOnNetworkStatusChange: true,\n  //   fetchPolicy: \"network-only\",\n  //   // pollInterval: 5000,\n  // });\n  \n  // const router = useRouter();\n  const intl = useIntl();\n  const [name, setPlantName] = useState('');\n  const [openTab, setOpenTab] = useState('');\n  const [errorId, setErrorId] = useState('');\n  const [plantId, setControllerID] = useState('');\n  const [userinfoMsg, setUserinfoMsg] = useState('');\n  const [sensorSelected, setSensor] = useState('');\n  const [addPlant] = useMutation(ADD_PLANT);\n  \n  const [updateSetting] = useMutation(UPDATE_SETTING);\n  const [deleteSetting] = useMutation(DELETE_SETTING);\n  const { plants } = state;\n\n  if (loading) {\n    return <ErrorMessage message={'Cargando...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  const shouldNotAssignRelay = (module: any, field: string, value: string | boolean) => {\n    const relayOneIdRelated = 'relayOneIdRelated';\n    const relayTwoIdRelated = 'relayTwoIdRelated';\n\n    if (field !== relayOneIdRelated && field !== relayTwoIdRelated) return false;\n\n    // plant.sensors.map((module) => {\n      if ((module[relayOneIdRelated] === value || module[relayTwoIdRelated] === value ) && value !== '') {\n        const texto1 = intl.formatMessage({ id: 'relayAlreadyAssinged', defaultMessage: 'Relay already assigned in ' });\n        const texto2 = intl.formatMessage({ id: 'relayAlreadyAssinged2', defaultMessage: 'desigagned  ' });\n        const b = confirm(texto1 + module.name + texto2);\n        console.log('asdasd', b)\n        if (b) return false;\n        return false;\n      }\n    // })\n\n   return false;\n  };\n\n  const defaultSettingValuesIfModeChanges = (module: any, field: string, value: string | boolean, settingType: SensorsTypes) => {\n    const mode = 'mode';\n    if (field !== mode) return plant;\n\n    const settingIndex = plant.sensors.findIndex((module: ISetting) => module.settingType === settingType);            \n    plant.sensors[settingIndex] = getDefaultSetting(settingType, plant.sensors[settingIndex].name, value === CommonMode.NONE ? [] : plant.sensors[settingIndex].logs);\n    \n   return module;\n  };\n\n  const isClean = (plant: any, field: string, value: string | boolean) => {\n    // min max checks\n    const minWarning = 'minWarning';\n    const maxWarning = 'maxWarning';\n\n    if (field !== minWarning && field !== maxWarning) return true;\n    if (Number(value) < 0 || Number(value) > 100) {\n      setErrorId(field);\n      setTimeout(() => {\n          setErrorId('')\n      }, 2000)\n      return false;\n    }\n    setErrorId(''); \n\n    // add more checks\n    return true;\n  };\n\n  const handleSettingsChange = (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => {\n    // if we want to stop user to reuse plugs, uncomment line bellow\n\n    const a = shouldNotAssignRelay(plant, field, value);\n    \n    if (a) return;\n    plant = defaultSettingValuesIfModeChanges(module, field, value, settingType);\n\n    dispatch({ type: settingType, payload: { plant, value, field } });\n\n    isClean(plant, field, value) && dispatchSettingSave(plant, field, value, settingType);\n\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000)\n  };\n  \n  const handleAddDittoBotClick = () => {\n    addPlant({\n      variables: {\n        id: data?.getUser?.id,\n        name,\n        plantId: Number(plantId)\n      },\n    });\n\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const handleUpdateDittoControllerName = (plant, name: string) => {\n    setTimeout(function () {\n      addPlant({\n        variables: {\n          id: data?.getUser?.id,\n          name,\n          plantId: plant.plantId\n        },\n      });\n  \n    }, 2000)\n    setUserinfoMsg('added plany successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const handleDeleteSensor = (plantSelected: any, settingType: SensorsTypes) => {\n    deleteSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plantSelected.plantId,\n        settingName: settingType\n      },\n    });\n\n    const plantIndex = plants.findIndex((plant: any) => plant.plantId === plantSelected.plantId);            \n    const settingIndex = plants[plantIndex].sensors.findIndex((module: ISetting) => module.settingType === settingType);            \n\n    dispatch({ type: 'DELETE_MODULE', payload: {plantIndex, settingIndex }});\n\n    setUserinfoMsg('deleted setting successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const onDeleteSchedule = (plant: any, settingType: SensorsTypes, scheduleIndex: number) => {\n    const settingIndex = plant.sensors.findIndex((module: ISetting) => module.settingType === settingType);            \n    plant.sensors[settingIndex]?.scheduledOnTimes.splice(scheduleIndex, 1);\n    \n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: { ...plant.sensors[settingIndex], settingType: settingType }\n      },\n    });\n\n    setUserinfoMsg('deleted schedule successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const getDefaultSetting = (settingTypeName: string, name?: string, logs?: string) => { \n    return {\n      name: name || '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: logs || [],\n      scheduledOnTimes: [],\n      settingType: settingTypeName\n    }\n}\n    \n  const dispatchSettingSave = (plant: any, fieldName: string, fieldValue: string | boolean, settingType: SensorsTypes) => {\n    const settingIndex = plant.sensors.findIndex((module: ISetting) => module.settingType === settingType);\n    plant.sensors[settingIndex][fieldName] = fieldValue;\n\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: plant.sensors[settingIndex]\n      },\n    });\n  };\n  \n  const getSensorCompleteName = (plant, settingType: SensorsTypes) => {\n    let sensorNewNumber = 1;\n\n    plant?.sensors?.map((module: ISetting) => {\n      let lastSensorNum = getLastNumOfSensor(module.settingType);\n      const rawSensorTypeName = getSensorWithoutNumber(module?.settingType);\n\n      if (!isNaN(lastSensorNum) && rawSensorTypeName === settingType) {\n        sensorNewNumber = lastSensorNum + 1;\n      }\n    });\n\n    return `${settingType}_${sensorNewNumber}`;\n  };\n\n  const dispatchNewSettingSave = (plant: any, settingType: SensorsTypes, plantIndex: number) => {\n    const completeSensorTypeName = getSensorCompleteName(plant, settingType);\n\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(completeSensorTypeName)\n      },\n    });\n\n    dispatch({ type: 'ADD_MODULE', payload: {plantIndex, setting: getDefaultSetting(completeSensorTypeName) }});\n  };\n\n  const selectStyle = { control: styles => ({ ...styles, width: '120px', textAlign: 'left' }) };\n  const sensorsOptions = [\n    { value: SensorsTypes.DISTANCE, label: intl.formatMessage({ id: 'distanceId', defaultMessage: 'distanceId' }) },\n    { value: SensorsTypes.SOIL_HUMIDITY, label: intl.formatMessage({ id: 'moistHumidityId', defaultMessage: 'moistHumidityId' }) },\n    { value: SensorsTypes.HUMIDITY_TEMPETURE, label: intl.formatMessage({ id: 'airHumidityAndTempetureId', defaultMessage: 'airHumidityAndTempetureId' }) },\n    { value: SensorsTypes.LIGHT, label: intl.formatMessage({ id: 'lightSensorId', defaultMessage: 'lightSensorId' }) },\n    { value: SensorsTypes.PLUG, label: intl.formatMessage({ id: 'intelligentPlugId', defaultMessage: 'intelligentPlugId' }) },\n  ];\n\n  return (\n    <PlantPageWrapper>\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <Link href=\"/profile\">\n          <a className=\"home-btn\">\n            <FormattedMessage id=\"backProfileBtn\" defaultMessage=\"Back to Profile\" />\n          </a>\n        </Link>\n\n        <OrderDetails>\n          <BlockTitle>\n            <FormattedMessage\n              id=\"dittoBotsIds\"\n              defaultMessage=\"dittoBotsIds\"\n            />\n          </BlockTitle>\n\n          { plants?.length < 1 && (<Text>{intl.formatMessage({ id: 'noDittoBotsTextId', defaultMessage: 'noDittoBotsTextId' })}</Text>) }\n          { plants?.map((plant, i: number) => {\n            const { sensors } = plant;\n            console.log('sensors', sensors)\n              return (\n                <DashboardContainer key={i + '-orderList'}>\n                  <Row1>\n                    <Column1>\n                      <ListItem>\n                        <ListTitle>\n                          <Text bold>\n                            <FormattedMessage\n                              id=\"controllerNameId\"\n                              defaultMessage=\"controllerNameId\"\n                            />\n                          </Text>\n                        </ListTitle>\n                        <ListDes>\n                          <Input\n                            type='text'\n                            name='name'\n                            disabled={true}\n                            value={plant?.name}\n                            // we have to change the onChange because the is no one for the controller name actualy\n                            onChange={(e: any) => handleUpdateDittoControllerName(plant, e.target.value)}\n                            backgroundColor='#F7F7F7'\n                            width='197px'\n                            height='34.5px'\n                          />\n                        </ListDes>\n                      </ListItem>\n\n                      <ListItem>\n                        <ListTitle>\n                          <Text bold>\n                                                 {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}{/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                            <FormattedMessage\n                              id=\"statusId\"\n                              defaultMessage=\"statusId\"\n                            />\n                                                 {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}{/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                        {/* <Reading> */}\n                          </Text>\n                        </ListTitle>\n                        <ListDes>\n                          <Text>{plant.timestamp?.length > 0 ? moment(plant.timestamp).format('hh:mm A - DD MMM') : ''} {hasDittoBotUpdatedInLastMinute(plant.timestamp) ? '[ONLINE]' : '[OFFLINE]'}</Text>\n                        </ListDes>\n                      </ListItem>\n\n                      {/* <Reading> */}{/* <Reading> */}\n\n                      <ListItem style={{ justifyContent: 'flex-start' }}>\n                        <ListTitle>\n                        <Text bold>\n                            <FormattedMessage\n                            id=\"addSensorId\"\n                            defaultMessage=\"addSensorId\"\n                            />\n                        </Text>\n                        </ListTitle>\n                        <ListDes>\n                        <Select \n                            onChange={(e: any) => dispatchNewSettingSave(plant, e.value, i)}\n                            value={sensorSelected}\n                            // @ts-ignore\n                            options={sensorsOptions}\n                            styles={selectStyle}\n                            menuPosition={'fixed'}\n                        />\n                        </ListDes>\n                      </ListItem>\n\n                      {/* <ListItem style={{ justifyContent: 'flex-start' }}>\n                        <ListTitle>\n                        <Text bold>\n                            <FormattedMessage\n                            id=\"changePlantTypeId\"\n                            defaultMessage=\"changePlantTypeId\"\n                            />\n                        </Text>\n                        </ListTitle>\n                        <ListDes>\n                        <Select \n                            onChange={(e: any) => dispatchNewSettingSave(plant, e.value, i)}\n                            value={sensorSelected}\n                            // @ts-ignore\n                            options={sensorsOptions}\n                            styles={selectStyle}\n                            menuPosition={'fixed'}\n                        />\n                        </ListDes>\n                      </ListItem> */}\n\n                    </Column1>\n                  </Row1>\n                  <SensorsWrapper>\n                  { sensors?.map((module: ISetting, index: number) => {\n                      switch (module?.settingType) {\n                        case `${SensorsTypes.SOIL_HUMIDITY}_1`:\n                        case `${SensorsTypes.SOIL_HUMIDITY}_2`:\n                        case `${SensorsTypes.SOIL_HUMIDITY}_3`:\n                          // check the number of same setting to send\n                          return (\n                            <SoilHumiditySensor \n                              key={i + module.settingType}\n                              data={data}\n                              plant={plant}\n                              errorId={errorId}\n                              openTab={openTab}\n                              handleDeleteSensor={handleDeleteSensor}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.LIGHT}_1`:\n                          return (\n                            <LightSensor \n                              key={i + module.settingType}\n                              data={data}\n                              errorId={errorId}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.DISTANCE}_1`:\n                          return (\n                            <DistanceSensor\n                              key={i + module.settingType}\n                              data={data}\n                              plant={plant}\n                              errorId={errorId}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.PLUG}_1`:\n                          return (\n                            <Plug\n                              key={i + module.settingType}\n                              data={data}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                      \n                        default:\n                          break;\n                      }\n                    })}\n                  </SensorsWrapper>\n                   \n                </DashboardContainer>\n              )\n            })\n          }\n\n          {userinfoMsg && (\n              <SuccessMsg>\n                <FormattedMessage\n                  id='userInfoSuccess'\n                  defaultMessage={userinfoMsg}\n                />\n              </SuccessMsg>\n          )}\n\n        </OrderDetails>\n      </PlantsPageContainer>\n\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <BlockTitle>\n          <FormattedMessage\n            id=\"addController\"\n            defaultMessage=\"Your Plants\"\n          />\n        </BlockTitle>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantNameField'\n                defaultMessage='Name of the plant'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='text'\n              name='name'\n              value={name}\n              onChange={(e) => setPlantName(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'plantNamePlaceholderId', defaultMessage: 'Balcony plants' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantIdField'\n                defaultMessage='ID of the controller'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='number'\n              name='plantId'\n              value={plantId}\n              onChange={(e) => setControllerID(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'serialNumberPlaceholderId', defaultMessage: 'Look behind Ditto Bot' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <Button className=\"cart-button\" variant=\"secondary\" borderRadius={100} onClick={handleAddDittoBotClick}>\n          <ButtonText>\n            <FormattedMessage id={\"addDittoBotButton\"} defaultMessage=\"Add plant\" />\n          </ButtonText>\n        </Button>\n      </PlantsPageContainer>\n    </PlantPageWrapper>\n  );\n};\n\nexport default YourPlants;\n"]},"metadata":{},"sourceType":"module"}