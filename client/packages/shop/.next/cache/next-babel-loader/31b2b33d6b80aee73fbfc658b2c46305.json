{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { RelaysIds, SettingsNames } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantsPageContainer, OrderDetails, BlockTitle, Text, ListItem, ListTitle, ListDes, ButtonText, PlantPageWrapper, PlantsWrapper, PlantsSensorContainer } from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\n\nvar YourPlants = function YourPlants(_ref) {\n  var deviceType = _ref.deviceType;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER, {\n    pollInterval: 5000\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      userRefetch = _useQuery.refetch; // const router = useRouter();\n\n\n  var intl = useIntl();\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setPlantName = _useState[1];\n\n  var _useState2 = useState(''),\n      openTab = _useState2[0],\n      setOpenTab = _useState2[1];\n\n  var _useState3 = useState(''),\n      plantId = _useState3[0],\n      setControllerID = _useState3[1];\n\n  var _useState4 = useState(''),\n      userinfoMsg = _useState4[0],\n      setUserinfoMsg = _useState4[1];\n\n  var _useMutation = useMutation(ADD_PLANT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addPlant = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_SETTING),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateSetting = _useMutation4[0];\n\n  var plants = state.plants;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...'\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message\n    });\n  }\n\n  ;\n\n  var isRelayIdAlreadyAssigend = function isRelayIdAlreadyAssigend(plant, field) {\n    if (field !== 'relayOneIdRelated' && field !== 'relayTwoIdRelated' && field !== 'relayThreeIdRelated' && field !== 'relayFourIdRelated') return false;\n    {\n      Object.keys(SettingsNames).map(function (settingName, i) {\n        var relaysIds = [RelaysIds.RELAY_ONE, RelaysIds.RELAY_TWO, RelaysIds.RELAY_THIRD, RelaysIds.RELAY_FOURTH];\n        var relayAlreadyAssigned = relaysIds.includes(plant[settingName][field]);\n\n        if (relayAlreadyAssigned) {\n          setUserinfoMsg(\"\".concat(intl.formatMessage({\n            id: 'relayAlreadyAssinged',\n            defaultMessage: 'Relay already assigned in '\n          }), \" \").concat(plant[settingName]));\n          setTimeout(function () {\n            setUserinfoMsg('');\n          }, 8000);\n          return true;\n        }\n      });\n    }\n    return false;\n  };\n\n  var handleSettingsChange = function handleSettingsChange(plant, field, value, settingName) {\n    if (isRelayIdAlreadyAssigend(plant, field)) return;\n    dispatch({\n      type: settingName,\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    dispatchSettingSave(plant, field, value, settingName);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var handleAddClick = function handleAddClick() {\n    var _data$getUser;\n\n    addPlant({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n        name: name,\n        plantId: Number(plantId)\n      }\n    });\n    setUserinfoMsg('Update user info successfully');\n    userRefetch();\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var onDeleteSchedule = function onDeleteSchedule(plant, settingName, position) {\n    var _data$getUser2;\n\n    delete plant[settingName][position];\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n        plantId: plant.plantId,\n        input: _objectSpread(_objectSpread({}, plant[settingName]), {}, {\n          settingName: settingName\n        })\n      }\n    });\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var dispatchSettingSave = function dispatchSettingSave(plant, fieldName, fieldValue, settingName) {\n    var _data$getUser3;\n\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser3 = data.getUser) === null || _data$getUser3 === void 0 ? void 0 : _data$getUser3.id,\n        plantId: plant.plantId,\n        input: _objectSpread(_objectSpread(_defineProperty({}, fieldName, fieldValue), plant[settingName]), {}, {\n          settingName: settingName\n        })\n      }\n    });\n  }; // Add or edit modal\n\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-time-schedule-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  var renderAirTemperatureSensor = function renderAirTemperatureSensor(plant, i) {\n    return __jsx(PlantsSensorContainer, null, __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"tempSensorId\",\n      defaultMessage: \"tempSensorId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.tempeture, \" \\xB0\"))));\n  };\n\n  var renderAirHumiditySensor = function renderAirHumiditySensor(plant, i) {\n    return __jsx(PlantsSensorContainer, null, __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"humedadAmbienteSensorId\",\n      defaultMessage: \"humedadAmbienteSensorId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.airHumidity, \" %\"))));\n  };\n\n  return __jsx(PlantPageWrapper, null, __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    }\n  }, __jsx(Link, {\n    href: \"/profile\"\n  }, __jsx(\"a\", {\n    className: \"home-btn\"\n  }, __jsx(FormattedMessage, {\n    id: \"backProfileBtn\",\n    defaultMessage: \"Back to Profile\"\n  }))), __jsx(OrderDetails, null, __jsx(BlockTitle, null, __jsx(FormattedMessage, {\n    id: \"yourPlants\",\n    defaultMessage: \"Your Plants\"\n  })), (plants === null || plants === void 0 ? void 0 : plants.length) < 1 && __jsx(Text, null, \"No tienes plantas registradas\"), plants === null || plants === void 0 ? void 0 : plants.map(function (plant, i) {\n    return __jsx(PlantsWrapper, {\n      key: i + '-orderList'\n    }, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"controllerNameId\",\n      defaultMessage: \"controllerNameId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      disabled: true,\n      value: (plant === null || plant === void 0 ? void 0 : plant.name) || '' // we have to change the onChange because the is no one for the controller name actualy\n      ,\n      onChange: function onChange(e) {\n        return handleSettingsChange(plant, 'name', e.target.value, SettingsNames.SOIL_HUMIDITY_SETTING_1);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\"\n    }))), __jsx(SoilHumiditySensor, {\n      data: data,\n      plant: plant,\n      openTab: openTab,\n      setOpenTab: setOpenTab,\n      settingName: SettingsNames.SOIL_HUMIDITY_SETTING_1,\n      handleSettingsChange: handleSettingsChange,\n      onDeleteSchedule: onDeleteSchedule\n    }), __jsx(SoilHumiditySensor, {\n      data: data,\n      plant: plant,\n      openTab: openTab,\n      setOpenTab: setOpenTab,\n      settingName: SettingsNames.SOIL_HUMIDITY_SETTING_2,\n      handleSettingsChange: handleSettingsChange,\n      onDeleteSchedule: onDeleteSchedule\n    }), __jsx(LightSensor, {\n      data: data,\n      plant: plant,\n      openTab: openTab,\n      setOpenTab: setOpenTab,\n      settingName: SettingsNames.LIGHT_SETTING,\n      handleSettingsChange: handleSettingsChange,\n      onDeleteSchedule: onDeleteSchedule\n    }), renderAirTemperatureSensor(plant, i), renderAirHumiditySensor(plant, i));\n  }), userinfoMsg && __jsx(SuccessMsg, null, __jsx(FormattedMessage, {\n    id: \"userInfoSuccess\",\n    defaultMessage: userinfoMsg\n  })))), __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    }\n  }, __jsx(BlockTitle, null, __jsx(FormattedMessage, {\n    id: \"addController\",\n    defaultMessage: \"Your Plants\"\n  })), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"plantNameField\",\n    defaultMessage: \"Name of the plant\"\n  }))), __jsx(ListDes, null, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    onChange: function onChange(e) {\n      return setPlantName(e.target.value);\n    },\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\"\n  }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"plantIdField\",\n    defaultMessage: \"ID of the controller\"\n  }))), __jsx(ListDes, null, __jsx(Input, {\n    type: \"number\",\n    name: \"plantId\",\n    value: plantId,\n    onChange: function onChange(e) {\n      return setControllerID(e.target.value);\n    },\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\"\n  }))), __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: handleAddClick\n  }, __jsx(ButtonText, null, __jsx(FormattedMessage, {\n    id: \"addPlantButton\",\n    defaultMessage: \"Add plant\"\n  })))));\n};\n\nexport default YourPlants;","map":null,"metadata":{},"sourceType":"module"}