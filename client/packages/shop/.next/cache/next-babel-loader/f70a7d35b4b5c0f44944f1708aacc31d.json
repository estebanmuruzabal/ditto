{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { Col } from 'react-styled-flexboxgrid';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { HumiditySensorMode } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { Label } from 'components/forms/label';\nimport { PlantsPageContainer, OrderDetails, BlockTitle, Text, ListItem, ListTitle, ListDes, ButtonText, Row, InputUpper, PlantPageWrapper, PlantsWrapper } from './your-plants.style';\nimport { FormattedMessage } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, UPDATE_HUMIDITY_SETTINGS_1, UPDATE_HUMIDITY_SETTINGS_2 } from 'graphql/query/plants.query';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport Switch from 'components/switch/switch';\n\nconst YourPlants = ({\n  deviceType\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(GET_LOGGED_IN_USER); // const router = useRouter();\n  // const intl = useIntl();\n\n  const {\n    0: name,\n    1: setPlantName\n  } = useState('');\n  const {\n    0: controllerId,\n    1: setControllerID\n  } = useState('');\n  const {\n    0: userinfoMsg,\n    1: setUserinfoMsg\n  } = useState('');\n  const [addPlant] = useMutation(ADD_PLANT);\n  const [updateSoilHumiditySettings1] = useMutation(UPDATE_HUMIDITY_SETTINGS_1);\n  const [updateSoilHumiditySettings2] = useMutation(UPDATE_HUMIDITY_SETTINGS_2);\n  const {\n    plants\n  } = state;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...'\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message\n    });\n  }\n\n  ;\n\n  const handleHumiditySettings1Change = (plant, field, value) => {\n    dispatch({\n      type: 'HANDLE_HUMIDITY_1_SETTINGS_CHANGE',\n      payload: {\n        plant,\n        value,\n        field\n      }\n    });\n    setTimeout(function () {\n      handleSettings1SaveClick(plant, field, value);\n    }, 1000);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  const handleHumiditySettings2Change = (plant, field, value) => {\n    dispatch({\n      type: 'HANDLE_HUMIDITY_2_SETTINGS_CHANGE',\n      payload: {\n        plant,\n        value,\n        field\n      }\n    });\n    handleSettings2SaveClick(plant, field, value);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  const handleAddClick = () => {\n    var _data$getUser;\n\n    addPlant({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n        name,\n        controllerId: Number(controllerId)\n      }\n    });\n  };\n\n  const handleSettings1SaveClick = (plant, fieldName, fieldValue) => {\n    var _data$getUser2;\n\n    console.log(plant, fieldName, fieldValue);\n    updateSoilHumiditySettings1({\n      variables: _objectSpread({\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n        [fieldName]: fieldValue,\n        controllerId: plant.controllerId\n      }, plant.soilHumiditySettings1)\n    });\n  };\n\n  const handleSettings2SaveClick = (plant, fieldName, fieldValue) => {\n    var _data$getUser3;\n\n    console.log(plant, fieldName, fieldValue);\n    updateSoilHumiditySettings2({\n      variables: _objectSpread({\n        id: data === null || data === void 0 ? void 0 : (_data$getUser3 = data.getUser) === null || _data$getUser3 === void 0 ? void 0 : _data$getUser3.id,\n        [fieldName]: fieldValue,\n        controllerId: plant.controllerId\n      }, plant.soilHumiditySettings2)\n    });\n  };\n\n  const modeOptions = [{\n    value: HumiditySensorMode.SEEDS_POOL_IRRIGATION,\n    label: 'Riego por inmersión'\n  }, {\n    value: HumiditySensorMode.MANUAL,\n    label: 'Manual'\n  }, {\n    value: HumiditySensorMode.IRRIGATE_SPECIFICT_AMOUNT_ON_DEMAND,\n    label: 'Semi-automático'\n  }, {\n    value: HumiditySensorMode.IRRIGATE_ON_DEMAND,\n    label: 'Automático'\n  }, {\n    value: HumiditySensorMode.SCHEDULE,\n    label: 'Calendario de riego'\n  }, {\n    value: HumiditySensorMode.NONE,\n    label: 'NONE'\n  }];\n  const manualModeOptions = [{\n    value: true,\n    label: 'Prendido'\n  }, {\n    value: false,\n    label: 'Apagado'\n  }];\n  const fourRelaysOptions = [{\n    value: 'isRelayOneOn',\n    label: 'Enchufe 1'\n  }, {\n    value: 'isRelayTwoOn',\n    label: 'Enchufe 2'\n  }, {\n    value: 'isRelayThirdOn',\n    label: 'Enchufe 3'\n  }, {\n    value: 'isRelayFourthOn',\n    label: 'Enchufe 4'\n  }];\n  const eightRelaysOptions = [{\n    value: 'isRelayOneOn',\n    label: 'Enchufe 1'\n  }, {\n    value: 'isRelayTwoOn',\n    label: 'Enchufe 2'\n  }, {\n    value: 'isRelayThirdOn',\n    label: 'Enchufe 3'\n  }, {\n    value: 'isRelayFourthOn',\n    label: 'Enchufe 4'\n  }];\n\n  const renderSoilSensor1 = (plant, i) => {\n    var _plant$soilHumiditySe5, _plant$soilHumiditySe7, _plant$soilHumiditySe8, _plant$soilHumiditySe9, _plant$soilHumiditySe10, _plant$soilHumiditySe11, _plant$soilHumiditySe12;\n\n    const selectedMode = modeOptions.find(option => {\n      var _plant$soilHumiditySe;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe === void 0 ? void 0 : _plant$soilHumiditySe.mode);\n    });\n    const selectedManualState = manualModeOptions.find(option => {\n      var _plant$soilHumiditySe2;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe2 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe2 === void 0 ? void 0 : _plant$soilHumiditySe2.relayOneWorking);\n    });\n    const relayOneSelected = fourRelaysOptions.find(option => {\n      var _plant$soilHumiditySe3;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe3 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe3 === void 0 ? void 0 : _plant$soilHumiditySe3.relayOneIdRelated);\n    });\n    const relayTwoSelected = fourRelaysOptions.find(option => {\n      var _plant$soilHumiditySe4;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe4 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe4 === void 0 ? void 0 : _plant$soilHumiditySe4.relayTwoIdRelated);\n    });\n    return __jsx(React.Fragment, null, __jsx(PlantsPageContainer, {\n      key: i + '-orderList'\n    }, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"plantName\",\n      defaultMessage: \"plantName\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings1.name,\n      onChange: e => handleHumiditySettings1Change(plant, 'name', e.target.value),\n      backgroundColor: \"#F7F7F7\" // intlInputLabelId=\"profileEmailField\"\n\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"soilHumidityId\",\n      defaultMessage: \"soilHumidityId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.soilHumidity1, \" %\"))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"modoId\",\n      defaultMessage: \"modoId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings1Change(plant, 'mode', e.value),\n      value: selectedMode,\n      options: modeOptions,\n      styles: selectStyle\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"notifyChangesId\",\n      defaultMessage: \"notifyChangesId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Switch, {\n      disabled: false,\n      checked: plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe5 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe5 === void 0 ? void 0 : _plant$soilHumiditySe5.sendWhatsappWarnings,\n      labelPosition: 'right' // className,\n      ,\n      onUpdate: () => {\n        var _plant$soilHumiditySe6;\n\n        return handleHumiditySettings1Change(plant, 'sendWhatsappWarnings', !(plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe6 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe6 === void 0 ? void 0 : _plant$soilHumiditySe6.sendWhatsappWarnings));\n      } // style\n\n    }))), ((plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe7 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe7 === void 0 ? void 0 : _plant$soilHumiditySe7.mode) === HumiditySensorMode.IRRIGATE_ON_DEMAND || (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe8 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe8 === void 0 ? void 0 : _plant$soilHumiditySe8.mode) === HumiditySensorMode.SEEDS_POOL_IRRIGATION) && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"maxHumidityId\",\n      defaultMessage: \"maxHumidityId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"maxWarning\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings1.maxWarning,\n      onChange: e => handleHumiditySettings1Change(plant, 'maxWarning', e.target.value),\n      backgroundColor: \"#F7F7F7\" // intlInputLabelId=\"profileEmailField\"\n\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"minHumidityId\",\n      defaultMessage: \"minHumidityId\"\n    }))), __jsx(ListDes, null, __jsx(InputUpper, {\n      type: \"number\",\n      name: \"minWarning\",\n      value: plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe9 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe9 === void 0 ? void 0 : _plant$soilHumiditySe9.minWarning,\n      onChange: e => handleHumiditySettings1Change(plant, 'minWarning', e.target.value),\n      backgroundColor: \"#F7F7F7\",\n      height: \"48px\" // intlInputLabelId=\"profileNameField\"\n\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayOneId\",\n      defaultMessage: \"asociateRelayOneId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings1Change(plant, 'relayOneIdRelated', e.value),\n      value: relayOneSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayTwoId\",\n      defaultMessage: \"asociateRelayTwoId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings1Change(plant, 'relayTwoIdRelated', e.value),\n      value: relayTwoSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle\n    })))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe10 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe10 === void 0 ? void 0 : _plant$soilHumiditySe10.mode) === HumiditySensorMode.MANUAL && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"manualModeStateId\",\n      defaultMessage: \"manualModeStateId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings1Change(plant, 'relayOneWorking', e.value),\n      value: selectedManualState,\n      options: manualModeOptions,\n      styles: selectStyle\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayOneId\",\n      defaultMessage: \"asociateRelayOneId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings1Change(plant, 'relayOneIdRelated', e.value),\n      value: relayOneSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle\n    })))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe11 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe11 === void 0 ? void 0 : _plant$soilHumiditySe11.mode) === HumiditySensorMode.SEEDS_POOL_IRRIGATION && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"irrigationTimeId\",\n      defaultMessage: \"irrigationTimeId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"relayOneAutomatedTimeToRun\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings1.relayOneAutomatedTimeToRun,\n      onChange: e => handleHumiditySettings1Change(plant, 'relayOneAutomatedTimeToRun', e.target.value),\n      backgroundColor: \"#F7F7F7\" // intlInputLabelId=\"profileEmailField\"\n\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"irrigationEvacuationTimeId\",\n      defaultMessage: \"irrigationEvacuationTimeId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"relayTwoAutomatedTimeToRun\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings1.relayTwoAutomatedTimeToRun,\n      onChange: e => handleHumiditySettings1Change(plant, 'relayTwoAutomatedTimeToRun', e.target.value),\n      backgroundColor: \"#F7F7F7\" // intlInputLabelId=\"profileEmailField\"\n\n    })))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe12 = plant.soilHumiditySettings1) === null || _plant$soilHumiditySe12 === void 0 ? void 0 : _plant$soilHumiditySe12.mode) === HumiditySensorMode.NONE && __jsx(Text, null, \"Necesitas seleccionar un modo\")));\n  };\n\n  const renderSoilSensor2 = (plant, i) => {\n    var _plant$soilHumiditySe17, _plant$soilHumiditySe19, _plant$soilHumiditySe20, _plant$soilHumiditySe21, _plant$soilHumiditySe22, _plant$soilHumiditySe23, _plant$soilHumiditySe24;\n\n    const selectedMode = modeOptions.find(option => {\n      var _plant$soilHumiditySe13;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe13 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe13 === void 0 ? void 0 : _plant$soilHumiditySe13.mode);\n    });\n    const selectedManualState = manualModeOptions.find(option => {\n      var _plant$soilHumiditySe14;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe14 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe14 === void 0 ? void 0 : _plant$soilHumiditySe14.relayTwoWorking);\n    });\n    const relayOneSelected = fourRelaysOptions.find(option => {\n      var _plant$soilHumiditySe15;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe15 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe15 === void 0 ? void 0 : _plant$soilHumiditySe15.relayOneIdRelated);\n    });\n    const relayTwoSelected = fourRelaysOptions.find(option => {\n      var _plant$soilHumiditySe16;\n\n      return option.value === (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe16 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe16 === void 0 ? void 0 : _plant$soilHumiditySe16.relayTwoIdRelated);\n    });\n    return __jsx(PlantsPageContainer, {\n      key: i + '-orderList'\n    }, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"plantName\",\n      defaultMessage: \"plantName\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings2.name,\n      onChange: e => handleHumiditySettings2Change(plant, 'name', e.target.value),\n      backgroundColor: \"#F7F7F7\" // intlInputLabelId=\"profileEmailField\"\n\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"soilHumidityId\",\n      defaultMessage: \"soilHumidityId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.soilHumidity2, \" %\"))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"modoId\",\n      defaultMessage: \"modoId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings2Change(plant, 'mode', e.value),\n      value: selectedMode,\n      options: modeOptions,\n      styles: selectStyle\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"notifyChangesId\",\n      defaultMessage: \"notifyChangesId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Switch, {\n      disabled: false,\n      checked: plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe17 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe17 === void 0 ? void 0 : _plant$soilHumiditySe17.sendWhatsappWarnings,\n      labelPosition: 'right' // className,\n      ,\n      onUpdate: () => {\n        var _plant$soilHumiditySe18;\n\n        return handleHumiditySettings2Change(plant, 'sendWhatsappWarnings', !(plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe18 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe18 === void 0 ? void 0 : _plant$soilHumiditySe18.sendWhatsappWarnings));\n      } // style\n\n    }))), ((plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe19 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe19 === void 0 ? void 0 : _plant$soilHumiditySe19.mode) === HumiditySensorMode.IRRIGATE_ON_DEMAND || (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe20 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe20 === void 0 ? void 0 : _plant$soilHumiditySe20.mode) === HumiditySensorMode.SEEDS_POOL_IRRIGATION) && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"maxHumidityId\",\n      defaultMessage: \"maxHumidityId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\" // min=\"1\" \n      // max=\"5\"\n      // placeholder={intl.formatMessage({\n      //   id: 'couponPlaceholder',\n      //   defaultMessage: 'Enter Coupon Here',\n      // })}\n      // inputRef={register({required: true})}\n      //               placeholder='Ex: Search By Name'\n      ,\n      required: true,\n      name: \"maxWarning\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings2.maxWarning,\n      onChange: e => handleHumiditySettings2Change(plant, 'maxWarning', e.target.value),\n      backgroundColor: \"#F7F7F7\" // intlInputLabelId=\"profileEmailField\"\n\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"minHumidityId\",\n      defaultMessage: \"minHumidityId\"\n    }))), __jsx(ListDes, null, __jsx(InputUpper, {\n      type: \"number\",\n      name: \"minWarning\",\n      value: plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe21 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe21 === void 0 ? void 0 : _plant$soilHumiditySe21.minWarning,\n      onChange: e => handleHumiditySettings2Change(plant, 'minWarning', e.target.value),\n      backgroundColor: \"#F7F7F7\",\n      height: \"48px\" // intlInputLabelId=\"profileNameField\"\n\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayOneId\",\n      defaultMessage: \"asociateRelayOneId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings2Change(plant, 'relayOneIdRelated', e.value),\n      value: relayOneSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayTwoId\",\n      defaultMessage: \"asociateRelayTwoId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings2Change(plant, 'relayTwoIdRelated', e.value),\n      value: relayTwoSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle\n    })))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe22 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe22 === void 0 ? void 0 : _plant$soilHumiditySe22.mode) === HumiditySensorMode.MANUAL && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"manualModeStateId\",\n      defaultMessage: \"manualModeStateId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings2Change(plant, 'relayTwoWorking', e.value),\n      value: selectedManualState,\n      options: manualModeOptions,\n      styles: selectStyle\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"asociateRelayOneId\",\n      defaultMessage: \"asociateRelayOneId\"\n    }))), __jsx(ListDes, null, __jsx(Select, {\n      onChange: e => handleHumiditySettings2Change(plant, 'relayOneIdRelated', e.value),\n      value: relayOneSelected,\n      options: fourRelaysOptions,\n      styles: selectStyle\n    })))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe23 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe23 === void 0 ? void 0 : _plant$soilHumiditySe23.mode) === HumiditySensorMode.SEEDS_POOL_IRRIGATION && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"irrigationTimeId\",\n      defaultMessage: \"irrigationTimeId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"relayOneAutomatedTimeToRun\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings2.relayOneAutomatedTimeToRun,\n      onChange: e => handleHumiditySettings2Change(plant, 'relayOneAutomatedTimeToRun', e.target.value),\n      backgroundColor: \"#F7F7F7\" // intlInputLabelId=\"profileEmailField\"\n\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"irrigationEvacuationTimeId\",\n      defaultMessage: \"irrigationEvacuationTimeId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"number\",\n      name: \"relayTwoAutomatedTimeToRun\",\n      value: plant === null || plant === void 0 ? void 0 : plant.soilHumiditySettings2.relayTwoAutomatedTimeToRun,\n      onChange: e => handleHumiditySettings2Change(plant, 'relayTwoAutomatedTimeToRun', e.target.value),\n      backgroundColor: \"#F7F7F7\" // intlInputLabelId=\"profileEmailField\"\n\n    })))), (plant === null || plant === void 0 ? void 0 : (_plant$soilHumiditySe24 = plant.soilHumiditySettings2) === null || _plant$soilHumiditySe24 === void 0 ? void 0 : _plant$soilHumiditySe24.mode) === HumiditySensorMode.NONE && __jsx(Text, null, \"Necesitas seleccionar un modo\"));\n  };\n\n  const selectStyle = {\n    control: styles => _objectSpread(_objectSpread({}, styles), {}, {\n      width: '197px'\n    }) // option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    //   // const color = chroma(data.color);\n    //   return {\n    //     ...styles,\n    //     backgroundColor: isDisabled ? 'red' : blue,\n    //     color: '#FFF',\n    //     cursor: isDisabled ? 'not-allowed' : 'default',\n    //     ...\n    //   };\n    // }\n\n  };\n  return __jsx(PlantPageWrapper, null, __jsx(PlantsPageContainer, null, __jsx(Link, {\n    href: \"/profile\"\n  }, __jsx(\"a\", {\n    className: \"home-btn\"\n  }, __jsx(FormattedMessage, {\n    id: \"backProfileBtn\",\n    defaultMessage: \"Back to Profile\"\n  }))), __jsx(OrderDetails, null, __jsx(BlockTitle, null, __jsx(FormattedMessage, {\n    id: \"yourPlants\",\n    defaultMessage: \"Your Plants\"\n  })), (plants === null || plants === void 0 ? void 0 : plants.length) < 1 && __jsx(Text, null, \"No tienes plantas registradas\"), plants === null || plants === void 0 ? void 0 : plants.map((plant, i) => {\n    return __jsx(PlantsWrapper, {\n      key: i + '-orderList'\n    }, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"controllerNameId\",\n      defaultMessage: \"controllerNameId\"\n    }))), __jsx(ListDes, null, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      value: plant === null || plant === void 0 ? void 0 : plant.name // onChange={(e: any) => handleHumiditySettings1Change(plant, 'name', e.target.value)}\n      ,\n      backgroundColor: \"#F7F7F7\" // intlInputLabelId=\"profileEmailField\"\n\n    }))), renderSoilSensor1(plant, i), renderSoilSensor2(plant, i), __jsx(PlantsPageContainer, null, __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"tempSensorId\",\n      defaultMessage: \"tempSensorId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.tempeture, \" \\xB0\")))), __jsx(PlantsPageContainer, null, __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      }\n    }, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"humedadAmbienteSensorId\",\n      defaultMessage: \"humedadAmbienteSensorId\"\n    }))), __jsx(ListDes, {\n      style: {\n        marginLeft: '10px'\n      }\n    }, __jsx(Text, null, plant === null || plant === void 0 ? void 0 : plant.airHumidity, \" %\")))));\n  }), userinfoMsg && __jsx(SuccessMsg, null, __jsx(FormattedMessage, {\n    id: \"userInfoSuccess\",\n    defaultMessage: userinfoMsg\n  })), __jsx(BlockTitle, null, __jsx(FormattedMessage, {\n    id: \"addController\",\n    defaultMessage: \"Your Plants\"\n  })), __jsx(Row, {\n    style: {\n      alignItems: 'flex-end',\n      marginBottom: '50px'\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    sm: 5,\n    md: 5,\n    lg: 5\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"plantNameField\",\n    defaultMessage: \"Name of the plant\"\n  })), __jsx(InputUpper, {\n    type: \"text\",\n    label: \"Name\",\n    name: \"name\",\n    value: name,\n    onChange: e => setPlantName(e.target.value),\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\" // intlInputLabelId=\"profileNameField\"\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 5,\n    md: 5,\n    lg: 5\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"controllerIdField\",\n    defaultMessage: \"ID of the controller\"\n  })), __jsx(InputUpper, {\n    type: \"number\",\n    label: \"Controller ID\",\n    name: \"controllerId\",\n    value: controllerId,\n    onChange: e => setControllerID(e.target.value),\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\" // intlInputLabelId=\"profileNameField\"\n\n  }))), __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: handleAddClick\n  }, __jsx(ButtonText, null, __jsx(FormattedMessage, {\n    id: \"addPlantButton\",\n    defaultMessage: \"Add plant\"\n  }))))));\n};\n\nexport default YourPlants;","map":null,"metadata":{},"sourceType":"module"}