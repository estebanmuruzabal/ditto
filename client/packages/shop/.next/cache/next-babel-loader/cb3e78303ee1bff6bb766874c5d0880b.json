{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/checkbox/checkbox.tsx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { StyledCheckBox, StyledCheckBoxLabel, StyledCheckBoxLabelText, StyledCheckBoxInput, StyledCheckBoxInputIndicator } from './checkbox.style';\n\nconst CheckBox = (_ref) => {\n  let {\n    className,\n    isChecked = false,\n    labelText,\n    id,\n    labelPosition = 'right',\n    disabled = false,\n    onChange\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"isChecked\", \"labelText\", \"id\", \"labelPosition\", \"disabled\", \"onChange\"]);\n\n  // use toggle hooks\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(isChecked);\n  console.log('isChecked', isChecked);\n  return __jsx(StyledCheckBox, {\n    className: `Mahdi Fashion__checkbox ${className}`.trim(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, __jsx(StyledCheckBoxLabel, {\n    htmlFor: id,\n    position: labelPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, labelText && __jsx(StyledCheckBoxLabelText, {\n    position: labelPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, labelText), __jsx(StyledCheckBoxInput, {\n    type: \"checkbox\",\n    className: \"checkbox-input\",\n    id: id,\n    checked: isChecked,\n    onChange: onChange,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), __jsx(StyledCheckBoxInputIndicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default CheckBox;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/checkbox/checkbox.tsx"],"names":["React","useState","StyledCheckBox","StyledCheckBoxLabel","StyledCheckBoxLabelText","StyledCheckBoxInput","StyledCheckBoxInputIndicator","CheckBox","className","isChecked","labelText","id","labelPosition","disabled","onChange","props","checked","setChecked","console","log","trim"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,cADF,EAEEC,mBAFF,EAGEC,uBAHF,EAIEC,mBAJF,EAKEC,4BALF,QAMO,kBANP;;AAmBA,MAAMC,QAAiC,GAAG,UASpC;AAAA,MATqC;AACzCC,IAAAA,SADyC;AAEzCC,IAAAA,SAAS,GAAG,KAF6B;AAGzCC,IAAAA,SAHyC;AAIzCC,IAAAA,EAJyC;AAKzCC,IAAAA,aAAa,GAAG,OALyB;AAMzCC,IAAAA,QAAQ,GAAG,KAN8B;AAOzCC,IAAAA;AAPyC,GASrC;AAAA,MADDC,KACC;;AACJ;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBhB,QAAQ,CAACQ,SAAD,CAAtC;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBV,SAAzB;AACA,SACE,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAG,2BAA0BD,SAAU,EAArC,CAAuCY,IAAvC,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAqB,IAAA,OAAO,EAAET,EAA9B;AAAkC,IAAA,QAAQ,EAAEC,aAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,SAAS,IACR,MAAC,uBAAD;AAAyB,IAAA,QAAQ,EAAEE,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,SADH,CAFJ,EAME,MAAC,mBAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,SAAS,EAAC,gBAFZ;AAGE,IAAA,EAAE,EAAEC,EAHN;AAIE,IAAA,OAAO,EAAEF,SAJX;AAKE,IAAA,QAAQ,EAAEK,QALZ;AAME,IAAA,QAAQ,EAAED,QANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAeE,MAAC,4BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF,CADF;AAqBD,CAlCD;;AAoCA,eAAeN,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport {\n  StyledCheckBox,\n  StyledCheckBoxLabel,\n  StyledCheckBoxLabelText,\n  StyledCheckBoxInput,\n  StyledCheckBoxInputIndicator,\n} from './checkbox.style';\n\ntype CheckBoxProps = {\n  id: string;\n  disabled?: boolean;\n  isChecked?: boolean;\n  labelText: string;\n  className?: string;\n  labelPosition?: 'left' | 'right';\n  [key: string]: unknown;\n  onChange: any\n};\n\nconst CheckBox: React.FC<CheckBoxProps> = ({\n  className,\n  isChecked = false,\n  labelText,\n  id,\n  labelPosition = 'right',\n  disabled = false,\n  onChange,\n  ...props\n}) => {\n  // use toggle hooks\n  const [checked, setChecked] = useState(isChecked);\n  console.log('isChecked', isChecked)\n  return (\n    <StyledCheckBox className={`Mahdi Fashion__checkbox ${className}`.trim()}>\n      <StyledCheckBoxLabel htmlFor={id} position={labelPosition}>\n        {labelText && (\n          <StyledCheckBoxLabelText position={labelPosition}>\n            {labelText}\n          </StyledCheckBoxLabelText>\n        )}\n        <StyledCheckBoxInput\n          type=\"checkbox\"\n          className=\"checkbox-input\"\n          id={id}\n          checked={isChecked}\n          onChange={onChange}\n          disabled={disabled}\n       \n        />\n        <StyledCheckBoxInputIndicator />\n      </StyledCheckBoxLabel>\n    </StyledCheckBox>\n  );\n};\n\nexport default CheckBox;\n"]},"metadata":{},"sourceType":"module"}