{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { FormattedMessage } from 'react-intl';\nimport Popover from 'components/popover/popover';\nimport { useQuery } from '@apollo/react-hooks';\nimport Logo from 'layouts/logo/logo';\nimport { MenuDown } from 'assets/icons/MenuDown';\nimport { CATEGORY_MENU_ITEMS, CATEGORY_MENU } from 'site-settings/site-navigation';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport ErrorMessage from 'components/error-message/error-message';\nimport * as categoryMenuIcons from 'assets/icons/category-menu-icons';\nimport { MainMenu, MenuItem, SelectedItem, Icon, Arrow, LeftMenuBox } from './left-menu.style';\n\nvar CategoryIcon = function CategoryIcon(_ref) {\n  var name = _ref.name;\n  var TagName = categoryMenuIcons[name];\n  return !!TagName ? __jsx(TagName, null) : __jsx(\"p\", null, \" \");\n};\n\nvar CategoryMenu = function CategoryMenu(props) {\n  var _useState = useState([]),\n      typeMenu = _useState[0],\n      setTypeMenu = _useState[1];\n\n  var handleOnClick = function handleOnClick(item) {\n    if (item.dynamic) {\n      Router.push('/[type]', \"\".concat(item.href));\n      props.onClick(item);\n      return;\n    }\n\n    Router.push(\"\".concat(item.href));\n    props.onClick(item);\n  };\n\n  useEffect(function () {\n    CATEGORY_MENU().then(function (res) {\n      setTypeMenu(res);\n    });\n    return;\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, typeMenu.map(function (item) {\n    return __jsx(MenuItem, _extends({\n      key: item.id\n    }, props, {\n      onClick: function onClick() {\n        return handleOnClick(item);\n      }\n    }), __jsx(CategoryIcon, {\n      name: item.icon\n    }), __jsx(FormattedMessage, {\n      id: item.id,\n      defaultMessage: item.defaultMessage\n    }));\n  }));\n};\n\nexport var LeftMenu = function LeftMenu(_ref2) {\n  var logo = _ref2.logo;\n  var router = useRouter();\n\n  var _useQuery = useQuery(GET_TYPE, {\n    variables: {\n      searchText: ''\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Loading...'\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message\n    });\n  }\n\n  ;\n  var typeMenu = data.types.items.map(function (item) {\n    return {\n      id: item.id,\n      href: \"/\".concat(item.slug),\n      defaultMessage: item.name,\n      icon: item.icon,\n      dynamic: true\n    };\n  });\n  var initialMenu = router.asPath == '/' ? typeMenu[0] : typeMenu.find(function (item) {\n    return item.href == router.asPath;\n  });\n\n  if (initialMenu) {\n    if (localStorage.getItem('myMenu')) {\n      localStorage.removeItem('myMenu');\n    }\n\n    localStorage.setItem('myMenu', JSON.stringify(initialMenu));\n  }\n\n  var _React$useState = React.useState(initialMenu !== null && initialMenu !== void 0 ? initialMenu : CATEGORY_MENU_ITEMS[0]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeMenu = _React$useState2[0],\n      setActiveMenu = _React$useState2[1];\n\n  return __jsx(LeftMenuBox, null, __jsx(Logo, {\n    imageUrl: logo,\n    alt: 'Shop Logo',\n    onClick: initialMenu ? initialMenu : JSON.parse(localStorage.getItem('myMenu'))\n  }), __jsx(MainMenu, null, __jsx(Popover, {\n    className: \"right\",\n    handler: __jsx(SelectedItem, null, __jsx(\"span\", null, __jsx(Icon, null, __jsx(CategoryIcon, {\n      name: activeMenu === null || activeMenu === void 0 ? void 0 : activeMenu.icon\n    })), __jsx(\"span\", null, __jsx(FormattedMessage, {\n      id: activeMenu === null || activeMenu === void 0 ? void 0 : activeMenu.id,\n      defaultMessage: activeMenu === null || activeMenu === void 0 ? void 0 : activeMenu.defaultMessage\n    }))), __jsx(Arrow, null, __jsx(MenuDown, null))),\n    content: __jsx(CategoryMenu, {\n      onClick: setActiveMenu\n    })\n  })));\n}; // import React, { useState, useEffect } from 'react';\n// import Router, { useRouter } from 'next/router';\n// import { FormattedMessage } from 'react-intl';\n// import Popover from 'components/popover/popover';\n// import { useQuery } from '@apollo/react-hooks';\n// import Logo from 'layouts/logo/logo';\n// import { MenuDown } from 'assets/icons/MenuDown';\n// import { CATEGORY_MENU_ITEMS,CATEGORY_MENU } from 'site-settings/site-navigation';\n// import { GET_TYPE } from 'graphql/query/type.query';\n// import ErrorMessage from 'components/error-message/error-message';\n// import * as categoryMenuIcons from 'assets/icons/category-menu-icons';\n// import {\n//   MainMenu,\n//   MenuItem,\n//   SelectedItem,\n//   Icon,\n//   Arrow,\n//   LeftMenuBox,\n// } from './left-menu.style';\n// const CategoryIcon = ({ name }) => {\n//   const TagName = categoryMenuIcons[name];\n//   return !!TagName ? <TagName /> : <p> </p>;\n// };\n// const CategoryMenu = (props: any) => {\n//   const [typeMenu, setTypeMenu] = useState([]);\n//   const handleOnClick = (item) => {\n//     if (item.dynamic) {\n//       Router.push('/[type]', `${item.href}`);\n//       props.onClick(item);\n//       return;\n//     }\n//     Router.push(`${item.href}`);\n//     props.onClick(item);\n//   };\n//   useEffect(() => {\n//     CATEGORY_MENU().then((res) => {\n//       setTypeMenu(res);\n//     })\n//     return;\n//   }, []);\n//   return (\n//     <div style={{ display: 'flex', flexDirection: 'column' }}>\n//       {typeMenu.map((item) => {\n//         return(\n//         <MenuItem key={item.id} {...props} onClick={() => handleOnClick(item)}>\n//           <CategoryIcon name={item.icon} />\n//           <FormattedMessage id={item.id} defaultMessage={item.defaultMessage} />\n//         </MenuItem>\n//       )})}\n//     </div>\n//   );\n// };\n// type Props = {\n//   logo: string;\n// };\n// export const LeftMenu: React.FC<Props> = ({ logo }) => {\n//   const router = useRouter();\n//   const { data, error, loading } = useQuery(\n//     GET_TYPE,\n//     {\n//       variables: {\n//         searchText: ''\n//       }\n//     }\n//   );\n//   if (loading) {\n//     return <ErrorMessage message={'Loading...'} />\n//   };\n//   if (error) {\n//     return (\n//       <ErrorMessage message={error.message} />\n//     );\n//   };\n//   const typeMenu = data.types.items.map((item) => {\n//     return({\n//       id: item.id,\n//       href: `/${item.slug}`,\n//       defaultMessage: item.name,\n//       icon: item.icon,\n//       dynamic: true,\n//     })\n//   })\n//   const initialMenu = router.asPath == '/' ? typeMenu[0] : typeMenu.find((item) => item.href == router.asPath);\n//   if(initialMenu){\n//     if(localStorage.getItem('myMenu')){\n//       localStorage.removeItem('myMenu');\n//     }\n//     localStorage.setItem('myMenu', JSON.stringify(initialMenu));\n//   }\n//   const [activeMenu, setActiveMenu] = React.useState(\n//     initialMenu ?? JSON.parse(localStorage.getItem('myMenu'))\n//   );\n//   return(\n//     <LeftMenuBox>\n//       <Logo\n//         imageUrl={logo}\n//         alt={'Shop Logo'}\n//         onClick={initialMenu ? initialMenu: JSON.parse(localStorage.getItem('myMenu'))}\n//       />\n//       <MainMenu>\n//         <Popover\n//           className=\"right\"\n//           handler={\n//             <SelectedItem>\n//               <span>\n//                 <Icon>\n//                   <CategoryIcon name={activeMenu?.icon} />\n//                 </Icon>\n//                 <span>\n//                   <FormattedMessage\n//                     id={activeMenu?.id}\n//                     defaultMessage={activeMenu?.defaultMessage}\n//                   />\n//                 </span>\n//               </span>\n//               <Arrow>\n//                 <MenuDown />\n//               </Arrow>\n//             </SelectedItem>\n//           }\n//           content={<CategoryMenu onClick={setActiveMenu} />}\n//         />\n//       </MainMenu>\n//     </LeftMenuBox>\n//   );\n// };","map":null,"metadata":{},"sourceType":"module"}