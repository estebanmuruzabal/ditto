{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/layouts/header/menu/left-menu/left-menu.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/react-hooks';\nimport Logo from 'layouts/logo/logo';\nimport { CATEGORY_MENU_ITEMS, CATEGORY_MENU } from 'site-settings/site-navigation';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport ErrorMessage from 'components/error-message/error-message';\nimport * as categoryMenuIcons from 'assets/icons/category-menu-icons';\nimport { MenuItem, LeftMenuBox } from './left-menu.style';\n\nconst CategoryIcon = ({\n  name\n}) => {\n  const TagName = categoryMenuIcons[name];\n  return !!TagName ? __jsx(TagName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 22\n    }\n  }) : __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 36\n    }\n  }, \" \");\n};\n\nconst CategoryMenu = props => {\n  const {\n    0: typeMenu,\n    1: setTypeMenu\n  } = useState([]);\n  const intl = useIntl();\n\n  const handleOnClick = item => {\n    if (item.dynamic) {\n      Router.push('/[type]', `${item.href}`);\n      props.onClick(item);\n      return;\n    }\n\n    Router.push(`${item.href}`);\n    props.onClick(item);\n  };\n\n  useEffect(() => {\n    CATEGORY_MENU().then(res => {\n      setTypeMenu(res);\n    });\n    return;\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, typeMenu.map(item => {\n    return __jsx(MenuItem, _extends({\n      key: item.id\n    }, props, {\n      onClick: () => handleOnClick(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }), __jsx(CategoryIcon, {\n      name: item.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }), __jsx(FormattedMessage, {\n      id: item.id,\n      defaultMessage: item.defaultMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }));\n  }));\n};\n\nexport const LeftMenu = ({\n  logo\n}) => {\n  const router = useRouter();\n  const intl = useIntl();\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(GET_TYPE, {\n    variables: {\n      searchText: ''\n    }\n  });\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: intl.formatMessage({\n        id: 'loading',\n        defaultMessage: 'Cargando...'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n  const typeMenu = data.types.items.map(item => {\n    return {\n      id: item.id,\n      href: `/${item.slug}`,\n      defaultMessage: item.name,\n      icon: item.icon,\n      dynamic: true\n    };\n  });\n  const initialMenu = router.asPath == '/' ? typeMenu[0] : typeMenu.find(item => item.href == router.asPath);\n\n  if (initialMenu) {\n    if (localStorage.getItem('myMenu')) {\n      localStorage.removeItem('myMenu');\n    }\n\n    localStorage.setItem('myMenu', JSON.stringify(initialMenu));\n  }\n\n  const [activeMenu, setActiveMenu] = React.useState(initialMenu !== null && initialMenu !== void 0 ? initialMenu : CATEGORY_MENU_ITEMS[0]);\n  return __jsx(LeftMenuBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, __jsx(Logo, {\n    imageUrl: logo,\n    alt: 'Shop Logo',\n    onClick: initialMenu ? initialMenu : JSON.parse(localStorage.getItem('myMenu')),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }));\n}; // import React, { useState, useEffect } from 'react';\n// import Router, { useRouter } from 'next/router';\n// import { FormattedMessage } from 'react-intl';\n// import Popover from 'components/popover/popover';\n// import { useQuery } from '@apollo/react-hooks';\n// import Logo from 'layouts/logo/logo';\n// import { MenuDown } from 'assets/icons/MenuDown';\n// import { CATEGORY_MENU_ITEMS,CATEGORY_MENU } from 'site-settings/site-navigation';\n// import { GET_TYPE } from 'graphql/query/type.query';\n// import ErrorMessage from 'components/error-message/error-message';\n// import * as categoryMenuIcons from 'assets/icons/category-menu-icons';\n// import {\n//   MainMenu,\n//   MenuItem,\n//   SelectedItem,\n//   Icon,\n//   Arrow,\n//   LeftMenuBox,\n// } from './left-menu.style';\n// const CategoryIcon = ({ name }) => {\n//   const TagName = categoryMenuIcons[name];\n//   return !!TagName ? <TagName /> : <p> </p>;\n// };\n// const CategoryMenu = (props: any) => {\n//   const [typeMenu, setTypeMenu] = useState([]);\n//   const handleOnClick = (item) => {\n//     if (item.dynamic) {\n//       Router.push('/[type]', `${item.href}`);\n//       props.onClick(item);\n//       return;\n//     }\n//     Router.push(`${item.href}`);\n//     props.onClick(item);\n//   };\n//   useEffect(() => {\n//     CATEGORY_MENU().then((res) => {\n//       setTypeMenu(res);\n//     })\n//     return;\n//   }, []);\n//   return (\n//     <div style={{ display: 'flex', flexDirection: 'column' }}>\n//       {typeMenu.map((item) => {\n//         return(\n//         <MenuItem key={item.id} {...props} onClick={() => handleOnClick(item)}>\n//           <CategoryIcon name={item.icon} />\n//           <FormattedMessage id={item.id} defaultMessage={item.defaultMessage} />\n//         </MenuItem>\n//       )})}\n//     </div>\n//   );\n// };\n// type Props = {\n//   logo: string;\n// };\n// export const LeftMenu: React.FC<Props> = ({ logo }) => {\n//   const router = useRouter();\n//   const { data, error, loading } = useQuery(\n//     GET_TYPE,\n//     {\n//       variables: {\n//         searchText: ''\n//       }\n//     }\n//   );\n//   if (loading) {\n//     return <ErrorMessage message={'Cargando...'} />\n//   };\n//   if (error) {\n//     return (\n//       <ErrorMessage message={error.message} />\n//     );\n//   };\n//   const typeMenu = data.types.items.map((item) => {\n//     return({\n//       id: item.id,\n//       href: `/${item.slug}`,\n//       defaultMessage: item.name,\n//       icon: item.icon,\n//       dynamic: true,\n//     })\n//   })\n//   const initialMenu = router.asPath == '/' ? typeMenu[0] : typeMenu.find((item) => item.href == router.asPath);\n//   if(initialMenu){\n//     if(localStorage.getItem('myMenu')){\n//       localStorage.removeItem('myMenu');\n//     }\n//     localStorage.setItem('myMenu', JSON.stringify(initialMenu));\n//   }\n//   const [activeMenu, setActiveMenu] = React.useState(\n//     initialMenu ?? JSON.parse(localStorage.getItem('myMenu'))\n//   );\n//   return(\n//     <LeftMenuBox>\n//       <Logo\n//         imageUrl={logo}\n//         alt={'Shop Logo'}\n//         onClick={initialMenu ? initialMenu: JSON.parse(localStorage.getItem('myMenu'))}\n//       />\n//       <MainMenu>\n//         <Popover\n//           className=\"right\"\n//           handler={\n//             <SelectedItem>\n//               <span>\n//                 <Icon>\n//                   <CategoryIcon name={activeMenu?.icon} />\n//                 </Icon>\n//                 <span>\n//                   <FormattedMessage\n//                     id={activeMenu?.id}\n//                     defaultMessage={activeMenu?.defaultMessage}\n//                   />\n//                 </span>\n//               </span>\n//               <Arrow>\n//                 <MenuDown />\n//               </Arrow>\n//             </SelectedItem>\n//           }\n//           content={<CategoryMenu onClick={setActiveMenu} />}\n//         />\n//       </MainMenu>\n//     </LeftMenuBox>\n//   );\n// };","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/layouts/header/menu/left-menu/left-menu.tsx"],"names":["React","useState","useEffect","Router","useRouter","FormattedMessage","useIntl","useQuery","Logo","CATEGORY_MENU_ITEMS","CATEGORY_MENU","GET_TYPE","ErrorMessage","categoryMenuIcons","MenuItem","LeftMenuBox","CategoryIcon","name","TagName","CategoryMenu","props","typeMenu","setTypeMenu","intl","handleOnClick","item","dynamic","push","href","onClick","then","res","display","flexDirection","map","id","icon","defaultMessage","LeftMenu","logo","router","data","error","loading","variables","searchText","formatMessage","message","types","items","slug","initialMenu","asPath","find","localStorage","getItem","removeItem","setItem","JSON","stringify","activeMenu","setActiveMenu","parse"],"mappings":"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":["import React, { useState, useEffect } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Popover from 'components/popover/popover';\nimport { useQuery } from '@apollo/react-hooks';\nimport Logo from 'layouts/logo/logo';\nimport { MenuDown } from 'assets/icons/MenuDown';\nimport { CATEGORY_MENU_ITEMS,CATEGORY_MENU } from 'site-settings/site-navigation';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport ErrorMessage from 'components/error-message/error-message';\nimport * as categoryMenuIcons from 'assets/icons/category-menu-icons';\nimport {\n  MainMenu,\n  MenuItem,\n  SelectedItem,\n  Icon,\n  Arrow,\n  LeftMenuBox,\n} from './left-menu.style';\n\nconst CategoryIcon = ({ name }) => {\n  const TagName = categoryMenuIcons[name];\n  return !!TagName ? <TagName /> : <p> </p>;\n};\n\nconst CategoryMenu = (props: any) => {\n\n  const [typeMenu, setTypeMenu] = useState([]);\n  const intl = useIntl();\n  const handleOnClick = (item) => {\n    if (item.dynamic) {\n      Router.push('/[type]', `${item.href}`);\n      props.onClick(item);\n      return;\n    }\n    Router.push(`${item.href}`);\n    props.onClick(item);\n  };\n\n  useEffect(() => {\n    CATEGORY_MENU().then((res) => {\n      setTypeMenu(res);\n    })\n    return;\n  }, []);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      {typeMenu.map((item) => {\n        return(\n        <MenuItem key={item.id} {...props} onClick={() => handleOnClick(item)}>\n          <CategoryIcon name={item.icon} />\n          <FormattedMessage id={item.id} defaultMessage={item.defaultMessage} />\n        </MenuItem>\n      )})}\n    </div>\n  );\n};\n\ntype Props = {\n  logo: string;\n};\n\nexport const LeftMenu: React.FC<Props> = ({ logo }) => {\n  const router = useRouter();\n  const intl = useIntl();\n  const { data, error, loading } = useQuery(\n    GET_TYPE,\n    {\n      variables: {\n        searchText: ''\n      }\n    }\n  );\n  if (loading) {\n    return <ErrorMessage message={intl.formatMessage({ id: 'loading', defaultMessage: 'Cargando...' })} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n  const typeMenu = data.types.items.map((item) => {\n    return({\n      id: item.id,\n      href: `/${item.slug}`,\n      defaultMessage: item.name,\n      icon: item.icon,\n      dynamic: true,\n    })\n  })\n  \n  const initialMenu = router.asPath == '/' ? typeMenu[0] : typeMenu.find((item) => item.href == router.asPath);\n  \n  if(initialMenu){\n    if(localStorage.getItem('myMenu')){\n      localStorage.removeItem('myMenu');\n    }\n    localStorage.setItem('myMenu', JSON.stringify(initialMenu));\n  }\n\n  const [activeMenu, setActiveMenu] = React.useState(\n    initialMenu ?? CATEGORY_MENU_ITEMS[0]\n  );\n\n  return(\n    <LeftMenuBox>\n      <Logo\n        imageUrl={logo}\n        alt={'Shop Logo'}\n        onClick={initialMenu ? initialMenu: JSON.parse(localStorage.getItem('myMenu'))}\n      />\n\n      {/* \n      BY NOW WE DONT WANT CATEGORIES CHANGES\n      <MainMenu>\n        <Popover\n          className=\"right\"\n          handler={\n            <SelectedItem>\n              <span>\n                <Icon>\n                  <CategoryIcon name={activeMenu?.icon} />\n                </Icon>\n                <span>\n                  <FormattedMessage\n                    id={activeMenu?.id}\n                    defaultMessage={activeMenu?.defaultMessage}\n                  />\n                </span>\n              </span>\n              <Arrow>\n                <MenuDown />\n              </Arrow>\n            </SelectedItem>\n          }\n          content={<CategoryMenu onClick={setActiveMenu} />}\n        />\n      </MainMenu> */}\n    </LeftMenuBox>\n  );\n};\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import Router, { useRouter } from 'next/router';\n// import { FormattedMessage } from 'react-intl';\n// import Popover from 'components/popover/popover';\n// import { useQuery } from '@apollo/react-hooks';\n// import Logo from 'layouts/logo/logo';\n// import { MenuDown } from 'assets/icons/MenuDown';\n// import { CATEGORY_MENU_ITEMS,CATEGORY_MENU } from 'site-settings/site-navigation';\n// import { GET_TYPE } from 'graphql/query/type.query';\n// import ErrorMessage from 'components/error-message/error-message';\n// import * as categoryMenuIcons from 'assets/icons/category-menu-icons';\n// import {\n//   MainMenu,\n//   MenuItem,\n//   SelectedItem,\n//   Icon,\n//   Arrow,\n//   LeftMenuBox,\n// } from './left-menu.style';\n\n// const CategoryIcon = ({ name }) => {\n//   const TagName = categoryMenuIcons[name];\n//   return !!TagName ? <TagName /> : <p> </p>;\n// };\n\n// const CategoryMenu = (props: any) => {\n\n//   const [typeMenu, setTypeMenu] = useState([]);\n\n//   const handleOnClick = (item) => {\n//     if (item.dynamic) {\n//       Router.push('/[type]', `${item.href}`);\n//       props.onClick(item);\n//       return;\n//     }\n//     Router.push(`${item.href}`);\n//     props.onClick(item);\n//   };\n\n//   useEffect(() => {\n//     CATEGORY_MENU().then((res) => {\n//       setTypeMenu(res);\n//     })\n//     return;\n//   }, []);\n\n//   return (\n//     <div style={{ display: 'flex', flexDirection: 'column' }}>\n//       {typeMenu.map((item) => {\n//         return(\n//         <MenuItem key={item.id} {...props} onClick={() => handleOnClick(item)}>\n//           <CategoryIcon name={item.icon} />\n//           <FormattedMessage id={item.id} defaultMessage={item.defaultMessage} />\n//         </MenuItem>\n//       )})}\n//     </div>\n//   );\n// };\n\n// type Props = {\n//   logo: string;\n// };\n\n// export const LeftMenu: React.FC<Props> = ({ logo }) => {\n//   const router = useRouter();\n//   const { data, error, loading } = useQuery(\n//     GET_TYPE,\n//     {\n//       variables: {\n//         searchText: ''\n//       }\n//     }\n//   );\n//   if (loading) {\n//     return <ErrorMessage message={'Cargando...'} />\n//   };\n\n//   if (error) {\n//     return (\n//       <ErrorMessage message={error.message} />\n//     );\n//   };\n//   const typeMenu = data.types.items.map((item) => {\n//     return({\n//       id: item.id,\n//       href: `/${item.slug}`,\n//       defaultMessage: item.name,\n//       icon: item.icon,\n//       dynamic: true,\n//     })\n//   })\n//   const initialMenu = router.asPath == '/' ? typeMenu[0] : typeMenu.find((item) => item.href == router.asPath);\n//   if(initialMenu){\n//     if(localStorage.getItem('myMenu')){\n//       localStorage.removeItem('myMenu');\n//     }\n//     localStorage.setItem('myMenu', JSON.stringify(initialMenu));\n//   }\n\n//   const [activeMenu, setActiveMenu] = React.useState(\n//     initialMenu ?? JSON.parse(localStorage.getItem('myMenu'))\n//   );\n  \n//   return(\n//     <LeftMenuBox>\n//       <Logo\n//         imageUrl={logo}\n//         alt={'Shop Logo'}\n//         onClick={initialMenu ? initialMenu: JSON.parse(localStorage.getItem('myMenu'))}\n//       />\n//       <MainMenu>\n//         <Popover\n//           className=\"right\"\n//           handler={\n//             <SelectedItem>\n//               <span>\n//                 <Icon>\n//                   <CategoryIcon name={activeMenu?.icon} />\n//                 </Icon>\n//                 <span>\n//                   <FormattedMessage\n//                     id={activeMenu?.id}\n//                     defaultMessage={activeMenu?.defaultMessage}\n//                   />\n//                 </span>\n//               </span>\n//               <Arrow>\n//                 <MenuDown />\n//               </Arrow>\n//             </SelectedItem>\n//           }\n//           content={<CategoryMenu onClick={setActiveMenu} />}\n//         />\n//       </MainMenu>\n//     </LeftMenuBox>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}