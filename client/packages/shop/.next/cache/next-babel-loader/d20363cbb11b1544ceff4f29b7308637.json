{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { Button, Wrapper, Heading, SubHeading } from './authentication-form.style';\nimport { useMutation } from '@apollo/react-hooks';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Input } from 'components/forms/input';\nimport { PHONE_VERIFICATION_CHECK_MUTATION } from 'graphql/mutation/signup';\nimport Router, { useRouter } from 'next/router';\nimport styled from \"styled-components\";\nexport var Container = styled.div.withConfig({\n  displayName: \"otpForm__Container\",\n  componentId: \"sc-196twzv-0\"\n})([\"padding:40px 60px;@media (max-width:768px){padding:40px 30px;}\"]);\nexport default function OtpModal() {\n  var router = useRouter();\n  var intl = useIntl();\n\n  var _useContext = useContext(AuthContext),\n      authDispatch = _useContext.authDispatch;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      otp = _React$useState2[0],\n      setOtp = _React$useState2[1];\n\n  var _useMutation = useMutation(PHONE_VERIFICATION_CHECK_MUTATION, {\n    onCompleted: function onCompleted(data) {\n      var _data$phoneVerificati = data.phoneVerificationCheck,\n          access_token = _data$phoneVerificati.access_token,\n          user = _data$phoneVerificati.user;\n\n      if (true) {\n        localStorage.removeItem('phone_number');\n        localStorage.setItem('access_token', \"\".concat(access_token));\n        authDispatch({\n          type: 'SIGNIN_SUCCESS',\n          user: user\n        });\n        closeModal();\n        Router.push('/[type]', router.asPath);\n      }\n    },\n    onError: function onError(error) {\n      setOtp('');\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      signinMeMutation = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error,\n      data = _useMutation2$.data;\n\n  var submitForm = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.next = 3;\n              return signinMeMutation({\n                variables: {\n                  verification_code: otp,\n                  phone: localStorage.getItem('phone_number')\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitForm(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Wrapper, null, __jsx(Container, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"otpForm\",\n    defaultMessage: \"Verify Phone Number\"\n  })), __jsx(SubHeading, null, __jsx(FormattedMessage, {\n    id: \"otpText\",\n    defaultMessage: \"Login with your phone number & password\"\n  })), __jsx(\"form\", {\n    onSubmit: submitForm\n  }, __jsx(Input, {\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'verificationCodePlaceholder',\n      defaultMessage: 'Verification Code'\n    }),\n    value: otp,\n    onChange: function onChange(e) {\n      return setOtp(e.target.value);\n    },\n    required: true,\n    height: \"48px\",\n    backgroundColor: \"#F7F7F7\",\n    mb: \"10px\"\n  }), __jsx(Button, {\n    variant: \"primary\",\n    size: \"big\",\n    style: {\n      width: '100%'\n    },\n    type: \"submit\"\n  }, \"Verify Now\")), loading && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\"\n    }\n  }, \"Loading...\"), error && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\",\n      color: \"red\"\n    }\n  }, \" \", error.message)));\n}","map":null,"metadata":{},"sourceType":"module"}