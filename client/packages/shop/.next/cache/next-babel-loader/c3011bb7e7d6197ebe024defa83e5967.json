{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { closeModal } from '@redq/reuse-modal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getCookie, setCookie } from 'utils/session';\nimport { Wrapper, Container, Heading, OfferSection, Offer, Button } from './location-modal.style';\nimport { GiftBox } from 'assets/icons/GiftBox'; // import { GoogleMap, useJsApiLoader, Marker } from \"@react-google-maps/api\";\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n\nvar googleApiKey = process.env.GOOGLE_API_KEY;\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\"; // import { useJsApiLoader } from '@react-google-maps/api';\n\nexport default function LocationModal(_ref) {\n  var isPickUp = _ref.isPickUp;\n\n  // Your existing state variables and functions here\n  var _useState = useState(\"\"),\n      address = _useState[0],\n      setAddress = _useState[1];\n\n  var intl = useIntl(); // Handle place selection\n  // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: \"YOUR_API_KEY\"\n  // })\n  // const handleSelect = async (address) => {\n  //   console.log('address',address)\n  //   setAddress(address);\n  //   const results = await geocodeByAddress(address);\n  //   const latLng = await getLatLng(results[0]);\n  // };\n\n  var handleZipCode = function handleZipCode() {\n    setCookie('zip_code', address);\n    closeModal();\n  };\n\n  var handleSelect = function handleSelect(address) {\n    geocodeByAddress(address).then(function (results) {\n      return getLatLng(results[0]);\n    }).then(function (latLng) {\n      console.log('Success', latLng);\n      setAddress(address);\n    })[\"catch\"](function (error) {\n      return console.error('Error', error);\n    });\n  }; // const fetchCurrentPosition = () => {\n  //   navigator.geolocation.getCurrentPosition(\n  //     function(position) {\n  //       var pos = new google.maps.LatLng(\n  //         position.coords.latitude,\n  //         position.coords.longitude\n  //       );\n  //       console.log(position.coords);\n  //       google.maps.geometry.poly.containsLocation(pos, refPoly.current.polygon)\n  //         ? setShowBtn(true)\n  //         : setShowBtn(false);\n  //     },\n  //     function(error) {\n  //       console.log(error);\n  //     }\n  //   );\n  // };\n\n\n  useEffect(function () {\n    if (!getCookie('first_visit')) {\n      setCookie('first_visit', true);\n    }\n  }, []);\n  console.log('addresss', address);\n  return __jsx(Wrapper, null, __jsx(Container, null, __jsx(Heading, null, isPickUp ? __jsx(FormattedMessage, {\n    id: \"pickupModalheading\",\n    defaultMessage: \"Select Your Location\"\n  }) : __jsx(FormattedMessage, {\n    id: \"deliveryModalheading\",\n    defaultMessage: \"Select Your Location\"\n  })), __jsx(PlacesAutocomplete, {\n    value: address,\n    onChange: function onChange(e) {\n      return setAddress(e);\n    },\n    onSelect: handleSelect,\n    searchOptions: {\n      types: [],\n      componentRestrictions: {\n        country: \"us\"\n      }\n    }\n  }, function (_ref2) {\n    var getInputProps = _ref2.getInputProps,\n        suggestions = _ref2.suggestions,\n        getSuggestionItemProps = _ref2.getSuggestionItemProps,\n        loading = _ref2.loading;\n    return __jsx(\"div\", null, __jsx(\"input\", getInputProps({\n      placeholder: \"Enter address\",\n      className: \"location-search-input\",\n      style: {\n        display: 'block',\n        width: '220px',\n        padding: '0px 8px',\n        appearance: 'none',\n        fontFamily: \"'Lato', sans-serif\",\n        fontSize: 'base',\n        lineHeight: 'inherit',\n        border: '1px solid',\n        borderColor: '#f1f1f1',\n        borderRadius: '3px',\n        backgroundColor: 'white',\n        color: 'text.bold',\n        height: '48px',\n        transition: 'all 0.25s ease',\n        // mb: 3,\n        '&:focus': {\n          borderColor: '#009E7F'\n        }\n      }\n    })), __jsx(\"div\", {\n      className: \"autocomplete-dropdown-container\"\n    }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map(function (suggestion) {\n      var style = suggestion.active ? {\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\"\n      };\n      return __jsx(\"div\", getSuggestionItemProps(suggestion, {\n        style: style\n      }), suggestion.description);\n    })));\n  }), __jsx(Button, {\n    fullwidth: true,\n    radius: 100,\n    onClick: handleZipCode\n  }, __jsx(FormattedMessage, {\n    id: \"continueBtn\",\n    defaultMessage: \"Continue\"\n  }))), __jsx(OfferSection, null, __jsx(GiftBox, null), __jsx(Offer, null, __jsx(FormattedMessage, {\n    id: \"locationModalFooter\",\n    defaultMessage: \"Free Delivery For 1st Order\",\n    values: {\n      number: 1\n    }\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}