{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { FormattedMessage } from 'react-intl';\nimport { Text, TextHighlighted, Container, ThumbsContainer, Thumb, ThumbInner, Img } from './upload.style';\nimport { UploadIcon } from 'assets/icons/UploadIcon';\n\nvar Uploader = function Uploader(_ref) {\n  var onChange = _ref.onChange,\n      imageURL = _ref.imageURL,\n      intlUploadText = _ref.intlUploadText;\n\n  var _useState = useState(imageURL ? [{\n    name: 'demo',\n    preview: imageURL\n  }] : []),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useDropzone = useDropzone({\n    accept: 'image/*',\n    multiple: false,\n    onDrop: useCallback(function (acceptedFiles) {\n      setFiles(acceptedFiles.map(function (file) {\n        return Object.assign(file, {\n          preview: URL.createObjectURL(file)\n        });\n      }));\n      onChange(acceptedFiles);\n    }, [onChange])\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps;\n\n  var thumbs = files.map(function (file) {\n    return __jsx(Thumb, {\n      key: file.name\n    }, __jsx(ThumbInner, null, __jsx(Img, {\n      src: file.preview,\n      alt: file.name\n    })));\n  });\n  useEffect(function () {\n    return function () {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach(function (file) {\n        return URL.revokeObjectURL(file.preview);\n      });\n    };\n  }, [files]);\n  return __jsx(\"section\", {\n    className: \"container uploader\"\n  }, __jsx(Container, getRootProps(), __jsx(\"input\", getInputProps()), __jsx(UploadIcon, null), __jsx(Text, null, intlUploadText ? __jsx(FormattedMessage, {\n    id: intlUploadText\n  }) : __jsx(React.Fragment, null, __jsx(TextHighlighted, null, \"Drag/Upload\"), \" your file here\"))), thumbs && __jsx(ThumbsContainer, null, thumbs));\n};\n\nexport default Uploader;","map":null,"metadata":{},"sourceType":"module"}