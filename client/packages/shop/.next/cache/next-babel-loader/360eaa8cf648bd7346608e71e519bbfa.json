{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Col } from 'react-styled-flexboxgrid';\nimport { openModal } from '@redq/reuse-modal';\nimport Router from 'next/router';\nimport RadioCardTWO from 'components/radio-card/radio-card-two';\nimport RadioCard from 'components/radio-card/radio-card';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { DELETE_ADDRESS, SETPRIMARY_ADDRESS } from 'graphql/mutation/address';\nimport { UPDATE_USER } from 'graphql/mutation/user';\nimport { CHANGE_PASSWORD } from 'graphql/mutation/changePassword';\nimport { DELETE_CARD } from 'graphql/mutation/card';\nimport { DELETE_PHONENUMBER, SETPRIMARY_PHONENUMBER } from 'graphql/mutation/phone';\nimport { SettingsForm, SettingsFormContent, HeadingSection, Title, Row, ButtonGroup, Input, SuccessMsg, InputUpper } from './settings.style';\nimport RadioGroupTwo from 'components/radio-group/radio-group-two';\nimport RadioGroupThree from 'components/radio-group/radio-group-three';\nimport UpdateAddressTwo from 'components/address-card/address-card-two';\nimport UpdateContact from 'components/contact-card/contact-card';\nimport { Button } from 'components/button/button';\nimport { UPDATE_ME } from 'graphql/mutation/me';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label } from 'components/forms/label';\n\nconst SettingsContent = ({\n  deviceType\n}) => {\n  var _state$oldPassword, _state$newPassword, _state$confirmPasswor;\n\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    0: userinfoMsg,\n    1: setUserinfoMsg\n  } = useState('');\n  const {\n    0: passwordChangeMsg,\n    1: setPasswordChangeMsg\n  } = useState('');\n  const {\n    authState: {\n      isStaff,\n      isGrower\n    },\n    authDispatch\n  } = React.useContext(AuthContext);\n  const [updateMeMutation] = useMutation(UPDATE_ME);\n  const [deletePaymentCardMutation] = useMutation(DELETE_CARD);\n  const [updateUserMutation] = useMutation(UPDATE_USER);\n  const [changePasswordMutation] = useMutation(CHANGE_PASSWORD);\n  const [deletePhoneNumberMutation] = useMutation(DELETE_PHONENUMBER);\n  const [setprimaryPhoneNumberMutation] = useMutation(SETPRIMARY_PHONENUMBER);\n  const [setprimaryAddressMutation] = useMutation(SETPRIMARY_ADDRESS);\n  const [deleteAddressMutation] = useMutation(DELETE_ADDRESS);\n  const intl = useIntl();\n  const passwordEmptyFields = intl.formatMessage({\n    id: 'passwordEmptyFields',\n    defaultMessage: 'passwordEmptyFields'\n  });\n  const {\n    delivery_address,\n    card,\n    name,\n    email,\n    id,\n    phones,\n    plants,\n    role\n  } = state;\n\n  const handleChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch({\n      type: 'HANDLE_ON_INPUT_CHANGE',\n      payload: {\n        value,\n        field: name\n      }\n    });\n  }; // Add or edit modal\n\n\n  const handleModal = (modalComponent, modalProps = {}, className = 'add-address-modal') => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  const handleEditDelete = async (item, index, type, name) => {\n    if (type === 'edit') {\n      const modalComponent = name === 'address' ? UpdateAddressTwo : UpdateContact;\n      handleModal(modalComponent, {\n        item,\n        id\n      });\n    } else {\n      switch (name) {\n        case 'payment':\n          dispatch({\n            type: 'DELETE_CARD',\n            payload: item.id\n          });\n          return await deletePaymentCardMutation({\n            variables: {\n              cardId: JSON.stringify(item.id)\n            }\n          });\n\n        case 'contact':\n          if (phones.length > 1) {\n            dispatch({\n              type: 'DELETE_CONTACT',\n              payload: item.id\n            });\n            return await deletePhoneNumberMutation({\n              variables: {\n                id,\n                phoneId: item.id\n              }\n            });\n          } else {\n            return null;\n          }\n\n        case 'address':\n          if (delivery_address.length > 1) {\n            dispatch({\n              type: 'DELETE_ADDRESS',\n              payload: item.id\n            });\n            return await deleteAddressMutation({\n              variables: {\n                id,\n                addressId: item.id\n              }\n            });\n          } else {\n            return null;\n          }\n\n        default:\n          return false;\n      }\n    }\n  };\n\n  const handlePrimary = async (item, name) => {\n    switch (name) {\n      case 'contact':\n        dispatch({\n          type: 'SET_PRIMARY_CONTACT',\n          payload: item.id\n        });\n        return await setprimaryPhoneNumberMutation({\n          variables: {\n            id,\n            phoneId: item.id\n          }\n        });\n\n      case 'address':\n        dispatch({\n          type: 'SET_PRIMARY_ADDRESS',\n          payload: item.id\n        });\n        return await setprimaryAddressMutation({\n          variables: {\n            id,\n            addressId: item.id\n          }\n        });\n\n      default:\n        return false;\n    }\n  };\n\n  const handleSave = async () => {\n    const {\n      name,\n      email\n    } = state;\n    await updateUserMutation({\n      variables: {\n        id,\n        name,\n        email\n      }\n    });\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  const handleSavePassord = async () => {\n    const {\n      oldPassword,\n      newPassword,\n      confirmPassword\n    } = state;\n    const hasEmptyFields = !oldPassword || !newPassword || !confirmPassword;\n\n    if (hasEmptyFields) {\n      setPasswordChangeMsg(passwordEmptyFields);\n      return;\n    } else {\n      setPasswordChangeMsg('');\n    }\n\n    await changePasswordMutation({\n      variables: {\n        id,\n        old_password: oldPassword,\n        new_password: newPassword,\n        confirm_password: confirmPassword\n      }\n    });\n\n    if (false) {\n      localStorage.removeItem('access_token');\n      authDispatch({\n        type: 'SIGN_OUT'\n      });\n      Router.push('/');\n    }\n\n    setPasswordChangeMsg('Loadding...');\n  };\n\n  const hasEmptyFields = ((_state$oldPassword = state.oldPassword) === null || _state$oldPassword === void 0 ? void 0 : _state$oldPassword.length) === 0 || ((_state$newPassword = state.newPassword) === null || _state$newPassword === void 0 ? void 0 : _state$newPassword.length) === 0 || ((_state$confirmPasswor = state.confirmPassword) === null || _state$confirmPasswor === void 0 ? void 0 : _state$confirmPasswor.length) === 0;\n  return __jsx(SettingsForm, null, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"profilePageTitle\",\n    defaultMessage: \"Your Profile\"\n  })), (isStaff || isGrower) && __jsx(Title, null, \"[\", role, \"]\")), __jsx(Row, {\n    style: {\n      alignItems: 'flex-end',\n      marginBottom: '50px'\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    sm: 5,\n    md: 5,\n    lg: 5\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"profileNameField\",\n    defaultMessage: \"Your Name\"\n  })), __jsx(InputUpper, {\n    type: \"text\",\n    label: \"Name\",\n    name: \"name\",\n    value: name,\n    onChange: handleChange,\n    backgroundcolor: \"#F7F7F7\",\n    height: \"48px\",\n    marginbottom: \"10px\" // intlInputLabelId=\"profileNameField\"\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 5,\n    md: 5,\n    lg: 5\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"profileEmailField\",\n    defaultMessage: \"Your Email\"\n  })), __jsx(Input, {\n    type: \"email\",\n    name: \"email\",\n    label: \"Email Address\",\n    value: email,\n    onChange: handleChange,\n    backgroundColor: \"#F7F7F7\",\n    marginBottom: \"10px\" // intlInputLabelId=\"profileEmailField\"\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 2\n  }, __jsx(Button, {\n    size: \"big\",\n    style: {\n      width: '100%',\n      marginBottom: '10px'\n    },\n    onClick: handleSave\n  }, __jsx(FormattedMessage, {\n    id: \"profileSaveBtn\",\n    defaultMessage: \"Save\"\n  })))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"contactNumberTItle\",\n    defaultMessage: \"Contact Numbers\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroupThree, {\n    items: phones,\n    component: (item, index) => __jsx(RadioCard, {\n      id: index,\n      key: index,\n      title: item.is_primary ? intl.formatMessage({\n        id: 'primaryId',\n        defaultMessage: 'Primary'\n      }) : intl.formatMessage({\n        id: 'secundaryId',\n        defaultMessage: 'Secondary'\n      }),\n      content: item.number,\n      checked: item.is_primary === true,\n      onChange: () => handlePrimary(item, 'contact'),\n      name: \"contact\",\n      onEdit: () => handleEditDelete(item, index, 'edit', 'contact'),\n      onDelete: () => handleEditDelete(item, index, 'delete', 'contact')\n    }),\n    secondaryComponent: __jsx(Button, {\n      size: \"big\",\n      variant: \"outlined\",\n      type: \"button\",\n      className: \"add-button\",\n      onClick: () => handleModal(UpdateContact, {\n        item: {},\n        id\n      }, 'add-contact-modal')\n    }, __jsx(FormattedMessage, {\n      id: \"addContactBtn\",\n      defaultMessage: \"Add Contact\"\n    }))\n  }))))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12,\n    style: {\n      position: 'relative'\n    }\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"deliveryAddresTitle\",\n    defaultMessage: \"Delivery Address\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroupTwo, {\n    items: delivery_address,\n    component: (item, index) => __jsx(RadioCardTWO, {\n      id: index,\n      key: index,\n      address: item.address,\n      instructions: item.instructions,\n      location: item.location,\n      title: item.title,\n      name: \"address\",\n      isChecked: item.is_primary === true,\n      onChange: () => handlePrimary(item, 'address'),\n      onEdit: () => handleEditDelete(item, index, 'edit', 'address'),\n      onDelete: () => handleEditDelete(item, index, 'delete', 'address')\n    }),\n    secondaryComponent: __jsx(Button, {\n      size: \"big\",\n      variant: \"outlined\",\n      type: \"button\",\n      className: \"add-button\",\n      onClick: () => handleModal(UpdateAddressTwo, {\n        item: {},\n        id\n      }, 'add-address-modal')\n    }, __jsx(FormattedMessage, {\n      id: (delivery_address === null || delivery_address === void 0 ? void 0 : delivery_address.length) === 3 ? \"fullDeliveryAddressesMsg\" : \"addAddressBtn\",\n      defaultMessage: \"Add Address\"\n    }))\n  }))))), __jsx(Row, {\n    style: {\n      alignItems: 'flex-end',\n      marginBottom: '50px'\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"changePasswordTitle\",\n    defaultMessage: \"Change Password\"\n  }))))), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 3\n  }, __jsx(Input, {\n    type: \"password\"\n    /* label='Old Password' */\n    ,\n    placeholder: intl.formatMessage({\n      id: 'oldPasswordId',\n      defaultMessage: 'Old password'\n    }),\n    name: \"oldPassword\",\n    value: state.oldPassword || '',\n    onChange: handleChange,\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\",\n    marginBottom: \"10px\"\n    /* intlInputLabelId=\"profileNameField\" */\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 3\n  }, __jsx(Input, {\n    type: \"password\",\n    label: \"New Password\",\n    placeholder: intl.formatMessage({\n      id: 'newPasswordId',\n      defaultMessage: 'New password'\n    }),\n    name: \"newPassword\",\n    value: state.newPassword || '',\n    onChange: handleChange,\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\",\n    marginBottom: \"10px\" // intlInputLabelId=\"profileNameField\"\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 3\n  }, __jsx(Input, {\n    type: \"password\",\n    name: \"confirmPassword\",\n    placeholder: intl.formatMessage({\n      id: 'confirmPasswordId',\n      defaultMessage: 'Confirm password'\n    }),\n    value: state.confirmPassword || '',\n    onChange: handleChange,\n    backgroundColor: \"#F7F7F7\",\n    marginBottom: \"10px\" // intlInputLabelId=\"profileEmailField\"\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 3\n  }, passwordChangeMsg === passwordEmptyFields && __jsx(SuccessMsg, null, __jsx(FormattedMessage, {\n    id: \"passwordEmptyFields\",\n    defaultMessage: passwordEmptyFields\n  })), !passwordChangeMsg && __jsx(Button, {\n    size: \"big\",\n    style: {\n      width: '100%',\n      marginBottom: '10px'\n    },\n    onClick: handleSavePassord\n  }, __jsx(FormattedMessage, {\n    id: \"profileSaveBtn\",\n    defaultMessage: \"Save\"\n  })), passwordChangeMsg && __jsx(Button, {\n    size: \"big\",\n    style: {\n      width: '100%'\n    },\n    onClick: handleSavePassord\n  }, __jsx(FormattedMessage, {\n    id: \"profileSaveBtn\",\n    defaultMessage: \"Loading..\"\n  }))))));\n};\n\nexport default SettingsContent;","map":null,"metadata":{},"sourceType":"module"}