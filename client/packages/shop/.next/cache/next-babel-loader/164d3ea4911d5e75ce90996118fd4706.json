{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/location-modal/location-modal.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { closeModal } from '@redq/reuse-modal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getCookie, setCookie } from 'utils/session';\nimport { Wrapper, Container, Heading, OfferSection, Offer, Button } from './location-modal.style';\nimport { GiftBox } from 'assets/icons/GiftBox';\nvar googleApiKey = process.env.GOOGLE_API_KEY; // import PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n// import { useJsApiLoader } from '@react-google-maps/api';\n\nexport default function LocationModal(_ref) {\n  _s();\n\n  var isPickUp = _ref.isPickUp;\n\n  // Your existing state variables and functions here\n  var _useState = useState(\"\"),\n      address = _useState[0],\n      setAddress = _useState[1];\n\n  var intl = useIntl(); // Handle place selection\n  // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: \"YOUR_API_KEY\"\n  // })\n  // const handleSelect = async (address) => {\n  //   console.log('address',address)\n  //   setAddress(address);\n  //   const results = await geocodeByAddress(address);\n  //   const latLng = await getLatLng(results[0]);\n  // };\n\n  var handleZipCode = function handleZipCode() {\n    setCookie('zip_code', address);\n    closeModal();\n  };\n\n  var handleSelect = function handleSelect(address) {// geocodeByAddress(address)\n    //   .then(results => getLatLng(results[0]))\n    //   .then(latLng => {\n    //     console.log('Success', latLng)\n    //     setAddress(address)\n    //   })\n    //   .catch(error => console.error('Error', error));\n  }; // const handleSelect = address => {\n  //   geocodeByAddress(address)\n  //     .then(results => getLatLng(results[0]))\n  //     .then(latLng => {\n  //       console.log('Success', latLng)\n  //       setDeliveryAddress(address)\n  //     })\n  //     .catch(error => console.error('Error', error));\n  // };\n  // const isPointInPolygon = (latitude, longitude, polygon) => {\n  //   if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n  //     throw new TypeError('Invalid latitude or longitude. Numbers are expected')\n  //   } else if (!polygon || !Array.isArray(polygon)) {\n  //     throw new TypeError('Invalid polygon. Array with locations expected')\n  //   } else if (polygon.length === 0) {\n  //     throw new TypeError('Invalid polygon. Non-empty Array expected')\n  //   }\n  //   const x = latitude; const y = longitude\n  //   let inside = false\n  //   for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n  //     const xi = polygon[i][0]; const yi = polygon[i][1]\n  //     const xj = polygon[j][0]; const yj = polygon[j][1]\n  //     const intersect = ((yi > y) !== (yj > y)) &&\n  //             (x < (xj - xi) * (y - yi) / (yj - yi) + xi)\n  //     if (intersect) inside = !inside\n  //   }\n  //   return inside\n  // };\n  // const dogsBeachPolygon = [\n  //   { latitude: 32.7502030, longitude: -117.2432460},\n  //   { latitude: 32.7489451, longitude: -117.2523153},\n  //   { latitude: 32.7541973, longitude: -117.2525931},\n  //   { latitude: 32.7542674, longitude: -117.2460937},\n  // ]\n\n\n  console.log('isInside:', isPointInPolygon(32.7449888, -117.2263579, dogsBeachPolygon));\n\n  var fetchCurrentPosition = function fetchCurrentPosition() {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      var pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n      console.log(position.coords);\n      google.maps.geometry.poly.containsLocation(pos, refPoly.current.polygon) ? setShowBtn(true) : setShowBtn(false);\n    }, function (error) {\n      console.log(error);\n    });\n  };\n\n  useEffect(function () {\n    if (!getCookie('first_visit')) {\n      setCookie('first_visit', true);\n    }\n  }, []);\n  console.log('addresss', address);\n  return __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, isPickUp ? __jsx(FormattedMessage, {\n    id: \"pickupModalheading\",\n    defaultMessage: \"Select Your Location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }) : __jsx(FormattedMessage, {\n    id: \"deliveryModalheading\",\n    defaultMessage: \"Select Your Location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  })), __jsx(Button, {\n    fullwidth: true,\n    radius: 100,\n    onClick: handleZipCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"continueBtn\",\n    defaultMessage: \"Continue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }))), __jsx(OfferSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }\n  }, __jsx(GiftBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }), __jsx(Offer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"locationModalFooter\",\n    defaultMessage: \"Free Delivery For 1st Order\",\n    values: {\n      number: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_s(LocationModal, \"DXJdLjn5CVWdKf+eurS7x8SDmwc=\", false, function () {\n  return [useIntl];\n});\n\n_c = LocationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationModal\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/location-modal/location-modal.tsx"],"names":["React","useState","useEffect","closeModal","FormattedMessage","useIntl","getCookie","setCookie","Wrapper","Container","Heading","OfferSection","Offer","Button","GiftBox","googleApiKey","process","env","GOOGLE_API_KEY","LocationModal","isPickUp","address","setAddress","intl","handleZipCode","handleSelect","console","log","isPointInPolygon","dogsBeachPolygon","fetchCurrentPosition","navigator","geolocation","getCurrentPosition","position","pos","google","maps","LatLng","coords","latitude","longitude","geometry","poly","containsLocation","refPoly","current","polygon","setShowBtn","error","number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { closeModal } from '@redq/reuse-modal';\nimport MaskedInput from 'react-text-mask';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getCookie, setCookie } from 'utils/session';\nimport {\n  Wrapper,\n  Container,\n  LogoWrapper,\n  Heading,\n  SubHeading,\n  OfferSection,\n  Offer,\n  Button,\n  Input,\n} from './location-modal.style';\nimport { GiftBox } from 'assets/icons/GiftBox';\nimport { GoogleMap, useJsApiLoader, Marker } from \"@react-google-maps/api\";\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport {\n  setKey,\n  setDefaults,\n  setLanguage,\n  setRegion,\n  fromAddress,\n  fromLatLng,\n  fromPlaceId,\n  setLocationType,\n  geocode,\n  RequestType,\n} from \"react-geocode\";\nconst googleApiKey = process.env.GOOGLE_API_KEY;\n\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n// import { useJsApiLoader } from '@react-google-maps/api';\n\n\nexport default function LocationModal({ isPickUp }) {\n  // Your existing state variables and functions here\n  const [address, setAddress] = useState(\"\");\n  const intl = useIntl();\n  // Handle place selection\n  \n  // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: \"YOUR_API_KEY\"\n  // })\n  \n  // const handleSelect = async (address) => {\n  //   console.log('address',address)\n  //   setAddress(address);\n  //   const results = await geocodeByAddress(address);\n  //   const latLng = await getLatLng(results[0]);\n  // };\n  \n  const handleZipCode = () => {\n    setCookie('zip_code', address);\n    closeModal();\n  };\n\n  const handleSelect = address => {\n    // geocodeByAddress(address)\n    //   .then(results => getLatLng(results[0]))\n    //   .then(latLng => {\n    //     console.log('Success', latLng)\n    //     setAddress(address)\n    //   })\n    //   .catch(error => console.error('Error', error));\n\n  };\n\n// const handleSelect = address => {\n  //   geocodeByAddress(address)\n  //     .then(results => getLatLng(results[0]))\n  //     .then(latLng => {\n  //       console.log('Success', latLng)\n  //       setDeliveryAddress(address)\n  //     })\n  //     .catch(error => console.error('Error', error));\n\n  // };\n\n  // const isPointInPolygon = (latitude, longitude, polygon) => {\n  //   if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n  //     throw new TypeError('Invalid latitude or longitude. Numbers are expected')\n  //   } else if (!polygon || !Array.isArray(polygon)) {\n  //     throw new TypeError('Invalid polygon. Array with locations expected')\n  //   } else if (polygon.length === 0) {\n  //     throw new TypeError('Invalid polygon. Non-empty Array expected')\n  //   }\n  \n  //   const x = latitude; const y = longitude\n  \n  //   let inside = false\n  //   for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n  //     const xi = polygon[i][0]; const yi = polygon[i][1]\n  //     const xj = polygon[j][0]; const yj = polygon[j][1]\n  \n  //     const intersect = ((yi > y) !== (yj > y)) &&\n  //             (x < (xj - xi) * (y - yi) / (yj - yi) + xi)\n  //     if (intersect) inside = !inside\n  //   }\n  \n  //   return inside\n  // };\n\n  // const dogsBeachPolygon = [\n  //   { latitude: 32.7502030, longitude: -117.2432460},\n  //   { latitude: 32.7489451, longitude: -117.2523153},\n  //   { latitude: 32.7541973, longitude: -117.2525931},\n  //   { latitude: 32.7542674, longitude: -117.2460937},\n  // ]\n\n  console.log('isInside:', isPointInPolygon(32.7449888, -117.2263579, dogsBeachPolygon))\n  \n  const fetchCurrentPosition = () => {\n    navigator.geolocation.getCurrentPosition(\n      function(position) {\n        var pos = new google.maps.LatLng(\n          position.coords.latitude,\n          position.coords.longitude\n        );\n\n        console.log(position.coords);\n        google.maps.geometry.poly.containsLocation(pos, refPoly.current.polygon)\n          ? setShowBtn(true)\n          : setShowBtn(false);\n      },\n      function(error) {\n        console.log(error);\n      }\n    );\n  };\n\n  useEffect(() => {\n    if (!getCookie('first_visit')) {\n      setCookie('first_visit', true);\n    }\n  }, []);\n  console.log('addresss', address)\n\n\n  return (\n    <Wrapper>\n      <Container>\n        <Heading>\n          { isPickUp ? (\n            <FormattedMessage\n              id=\"pickupModalheading\"\n              defaultMessage=\"Select Your Location\"\n            />\n          ) : (\n            <FormattedMessage\n              id=\"deliveryModalheading\"\n              defaultMessage=\"Select Your Location\"\n            />\n          )}\n        </Heading>\n        {/* <SubHeading>\n          <FormattedMessage\n            id=\"locationModalSubHeading\"\n            defaultMessage=\"You have to select your location for deliver service perpous\"\n          />\n        </SubHeading> */}\n        {/* <PlacesAutocomplete\n          value={address}\n          onChange={(e) => setAddress(e)}\n          onSelect={handleSelect}\n          searchOptions={{\n            types: [],\n            componentRestrictions: { country: \"us\" },\n          }}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: \"Enter address\",\n                  className: \"location-search-input\",\n                  style: {\n                    display: 'block',\n                    width: '220px',\n\n                    padding:'0px 8px',\n                    appearance: 'none',\n                    fontFamily: `'Lato', sans-serif`,\n                    fontSize: 'base',\n                    lineHeight: 'inherit',\n                    border: '1px solid',\n                    borderColor: '#f1f1f1',\n                    borderRadius: '3px',\n                    backgroundColor: 'white',\n                    color: 'text.bold',\n                    height: '48px',\n                    transition: 'all 0.25s ease',\n                    // mb: 3,\n                    '&:focus': {\n                      borderColor: '#009E7F',\n                    },\n                  },\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion) => {\n                  const style = suggestion.active\n                    ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                    : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                  return (\n                    <div {...getSuggestionItemProps(suggestion, { style })}>\n                      {suggestion.description}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete> */}\n        <Button\n          fullwidth\n          radius={100}\n          onClick={handleZipCode}\n        >\n          <FormattedMessage id='continueBtn' defaultMessage='Continue' />\n        </Button>\n      </Container>\n      <OfferSection>\n        <GiftBox />\n        <Offer>\n          <FormattedMessage\n            id=\"locationModalFooter\"\n            defaultMessage=\"Free Delivery For 1st Order\"\n            values={{ number: 1 }}\n          />\n        </Offer>\n      </OfferSection>\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}