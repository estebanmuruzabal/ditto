{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nvar Reading = function Reading(_ref) {\n  _s();\n\n  var _data$getUser, _data$getUser$plants, _data$getUser$plants$, _data$getUser$plants$2;\n\n  var errorId = _ref.errorId,\n      plantSelected = _ref.plant,\n      settingType = _ref.settingType,\n      handleSettingsChange = _ref.handleSettingsChange,\n      onDeleteSchedule = _ref.onDeleteSchedule,\n      data1 = _ref.data,\n      openTab = _ref.openTab,\n      setOpenTab = _ref.setOpenTab,\n      handleDeleteSensor = _ref.handleDeleteSensor;\n  var setting = plantSelected.sensors.find(function (sensor) {\n    return sensor.settingType === settingType;\n  });\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 5000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var sensorIndex = setting === null || setting === void 0 ? void 0 : setting.settingType[(setting === null || setting === void 0 ? void 0 : setting.settingType.length) - 1];\n  console.log('sensorIndex', sensorIndex);\n  var plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(function (plant) {\n    return plant.plantId === plantSelected.plantId;\n  });\n  console.log('plantIndex', plantIndex);\n  var reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors[sensorIndex]) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.reading;\n  console.log('reading:', reading);\n  console.log('---------');\n  console.log('---------');\n  var readingFormatted = reading >= -5 && reading < 0 ? 0 + ' % ðŸ’§' : reading >= 0 && reading <= 100 && reading ? reading + ' % ðŸ’§' : 'Disconected';\n  return __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, reading);\n};\n\n_s(Reading, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Reading;\nexport default Reading;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","Reading","errorId","plantSelected","plant","settingType","handleSettingsChange","onDeleteSchedule","data1","data","openTab","setOpenTab","handleDeleteSensor","setting","sensors","find","sensor","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","loading","error","sensorIndex","length","console","log","plantIndex","getUser","plants","findIndex","plantId","reading","readingFormatted"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAcA,IAAMC,OAAwB,GAAG,SAA3BA,OAA2B,OAAmJ;AAAA;;AAAA;;AAAA,MAAhJC,OAAgJ,QAAhJA,OAAgJ;AAAA,MAAhIC,aAAgI,QAAvIC,KAAuI;AAAA,MAAjHC,WAAiH,QAAjHA,WAAiH;AAAA,MAApGC,oBAAoG,QAApGA,oBAAoG;AAAA,MAA9EC,gBAA8E,QAA9EA,gBAA8E;AAAA,MAAtDC,KAAsD,QAA5DC,IAA4D;AAAA,MAA/CC,OAA+C,QAA/CA,OAA+C;AAAA,MAAtCC,UAAsC,QAAtCA,UAAsC;AAAA,MAA1BC,kBAA0B,QAA1BA,kBAA0B;AAChL,MAAMC,OAAO,GAAGV,aAAa,CAACW,OAAd,CAAsBC,IAAtB,CAA2B,UAACC,MAAD;AAAA,WAAsBA,MAAM,CAACX,WAAP,KAAuBA,WAA7C;AAAA,GAA3B,CAAhB;;AADgL,kBAG/IN,QAAQ,CAACC,2BAAD,EAA8B;AACnEiB,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAHuI;AAAA,MAGxKC,OAHwK,aAGxKA,OAHwK;AAAA,MAG/JC,KAH+J,aAG/JA,KAH+J;AAAA,MAGxJZ,IAHwJ,aAGxJA,IAHwJ;;AAShL,MAAMa,WAAW,GAAGT,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAER,WAAT,CAAqB,CAAAQ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAER,WAAT,CAAqBkB,MAArB,IAA8B,CAAnD,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,WAA3B;AACA,MAAMI,UAAU,GAAGjB,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEkB,OAAT,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,SAAvB,CAAiC,UAACzB,KAAD;AAAA,WAAgBA,KAAK,CAAC0B,OAAN,KAAkB3B,aAAa,CAAC2B,OAAhD;AAAA,GAAjC,CAAnB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,UAA1B;AACA,MAAMK,OAAO,GAAGtB,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEkB,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,oFAAG,sBAAkCZ,OAAlC,CAA0CQ,WAA1C,CAAH,2DAAG,uBAAwDS,OAAxE;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBM,OAAxB;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,MAAMO,gBAAgB,GAAID,OAAO,IAAI,CAAC,CAAZ,IAAiBA,OAAO,GAAG,CAA5B,GAAiC,IAAI,OAArC,GAAgDA,OAAO,IAAI,CAAX,IAAgBA,OAAO,IAAI,GAA3B,IAAkCA,OAAnC,GAA8CA,OAAO,GAAG,OAAxD,GAAkE,aAA1I;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYA,OAAZ,CADJ;AAGH,CArBD;;GAAM9B,O;UAG+BF,Q;;;KAH/BE,O;AAuBN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  data?: any;\n  plant: any;\n  openTab: string;\n  errorId: string;\n  setOpenTab: (settingType: string) => void;\n  handleDeleteSensor: (plant: any, settingType: string) => void;\n  settingType: SensorsTypes;\n  handleSettingsChange: (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => void;\n  onDeleteSchedule: (plant: any, settingType: SensorsTypes, position: number) => void;\n}\n\nconst Reading: React.FC<Props> = ({ errorId, plant: plantSelected, settingType, handleSettingsChange, onDeleteSchedule, data: data1, openTab, setOpenTab, handleDeleteSensor  }) => {\n    const setting = plantSelected.sensors.find((sensor: ISetting) => sensor.settingType === settingType);\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 5000,\n      });\n    \n    const sensorIndex = setting?.settingType[setting?.settingType.length - 1];\n    console.log('sensorIndex', sensorIndex)\n    const plantIndex = data?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plantSelected.plantId);            \n    console.log('plantIndex', plantIndex)\n    const reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    console.log('reading:', reading)\n    console.log('---------')\n    console.log('---------')\n    const readingFormatted = (reading >= -5 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n    return (\n        <Text bold>{reading}</Text>\n    );\n};\n\nexport default Reading;\n"]},"metadata":{},"sourceType":"module"}