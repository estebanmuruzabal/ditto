{"ast":null,"code":"import { locales, rtlLocales, defaultLocale } from './language.config';\nimport Cookie from 'js-cookie';\nexport function isLocale(tested) {\n  return locales.some(locale => locale === tested);\n}\nexport function isRTL(tested) {\n  return rtlLocales.some(locale => locale === tested);\n}\nexport function getInitialLocale() {\n  // preference from the previous session\n  const localSetting = Cookie.get('locale');\n\n  if (localSetting && isLocale(localSetting)) {\n    return localSetting;\n  } // the language setting of the browser\n  // const [browserSetting] = navigator.language.split('-');\n  // if (isLocale(browserSetting)) {\n  //   return browserSetting;\n  // }\n\n\n  return defaultLocale;\n}","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/contexts/language/language.utils.ts"],"names":["locales","rtlLocales","defaultLocale","Cookie","isLocale","tested","some","locale","isRTL","getInitialLocale","localSetting","get"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,UAAlB,EAA8BC,aAA9B,QAAmD,mBAAnD;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAUA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAAoD;AACzD,SAAOL,OAAO,CAACM,IAAR,CAAcC,MAAD,IAAYA,MAAM,KAAKF,MAApC,CAAP;AACD;AAED,OAAO,SAASG,KAAT,CAAeH,MAAf,EAAiD;AACtD,SAAOJ,UAAU,CAACK,IAAX,CAAiBC,MAAD,IAAYA,MAAM,KAAKF,MAAvC,CAAP;AACD;AAED,OAAO,SAASI,gBAAT,GAAoC;AACzC;AACA,QAAMC,YAAY,GAAGP,MAAM,CAACQ,GAAP,CAAW,QAAX,CAArB;;AACA,MAAID,YAAY,IAAIN,QAAQ,CAACM,YAAD,CAA5B,EAA4C;AAC1C,WAAOA,YAAP;AACD,GALwC,CAOzC;AACA;AACA;AACA;AACA;;;AAEA,SAAOR,aAAP;AACD","sourcesContent":["import { locales, rtlLocales, defaultLocale } from './language.config';\nimport Cookie from 'js-cookie';\n\nexport type Locale = typeof locales[number];\n\nexport type Strings = {\n  [key in Locale]: {\n    [key: string]: string;\n  };\n};\n\nexport function isLocale(tested: string): tested is Locale {\n  return locales.some((locale) => locale === tested);\n}\n\nexport function isRTL(tested: string): tested is Locale {\n  return rtlLocales.some((locale) => locale === tested);\n}\n\nexport function getInitialLocale(): Locale {\n  // preference from the previous session\n  const localSetting = Cookie.get('locale');\n  if (localSetting && isLocale(localSetting)) {\n    return localSetting;\n  }\n\n  // the language setting of the browser\n  // const [browserSetting] = navigator.language.split('-');\n  // if (isLocale(browserSetting)) {\n  //   return browserSetting;\n  // }\n\n  return defaultLocale;\n}\n"]},"metadata":{},"sourceType":"module"}