{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/HumidityReading.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\n\nvar HumidityReading = function HumidityReading(_ref) {\n  _s();\n\n  var _data$getUser, _data$getUser$plants, _data$getUser$plants$, _data$getUser$plants$2, _data$getUser$plants$3, _data$getUser$plants$4;\n\n  var module = _ref.module,\n      plantId = _ref.plantId,\n      latestDataFetched = _ref.latestDataFetched;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data; // const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n\n\n  var plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(function (plant) {\n    return plant.plantId === plantId;\n  });\n  var sensorIndex = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.findIndex(function (sensor) {\n    return sensor.settingType === module.settingType;\n  });\n  var reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$3 = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$3 === void 0 ? void 0 : (_data$getUser$plants$4 = _data$getUser$plants$3.sensors[sensorIndex]) === null || _data$getUser$plants$4 === void 0 ? void 0 : _data$getUser$plants$4.reading; // console.log('data?.getUser.plants[plantIndex]?.sensor', data?.getUser.plants[plantIndex].sensors, module.settingType)\n  // console.log('plantIndex', plantIndex)\n  // console.log('reading', reading)\n  // if (reading > -5 && reading <= 0) reading = 0;\n  // if (reading >= 100 && reading < 110) reading = 100;\n  // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n  // const readingFormatted = (module.reading >= 0 && module.reading <= 110) ? `${module.reading} % ðŸ’§` : 'Disconected';  \n  // console.log(\"module.reading\", module.reading, reading)\n\n  return __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"\".concat(reading, \" % \\uD83D\\uDCA7\"));\n};\n\n_s(HumidityReading, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", true);\n\n_c = HumidityReading;\nexport default HumidityReading;\n\nvar _c;\n\n$RefreshReg$(_c, \"HumidityReading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/HumidityReading.tsx"],"names":["React","Text","HumidityReading","module","plantId","latestDataFetched","useQuery","GET_LOGGED_IN_USER_SETTINGS","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","loading","error","data","plantIndex","getUser","plants","findIndex","plant","sensorIndex","sensors","sensor","settingType","reading"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,yBAArB;;AAQA,IAAMC,eAAgC,GAAG,SAAnCA,eAAmC,OAA6C;AAAA;;AAAA;;AAAA,MAA1CC,MAA0C,QAA1CA,MAA0C;AAAA,MAAlCC,OAAkC,QAAlCA,OAAkC;AAAA,MAAzBC,iBAAyB,QAAzBA,iBAAyB;;AAAA,kBAEjDC,QAAQ,CAACC,2BAAD,EAA8B;AACnEC,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAFyC;AAAA,MAE1EC,OAF0E,aAE1EA,OAF0E;AAAA,MAEjEC,KAFiE,aAEjEA,KAFiE;AAAA,MAE1DC,IAF0D,aAE1DA,IAF0D,EAShF;;;AACF,MAAMC,UAAU,GAAGD,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEE,OAAT,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,SAAvB,CAAiC,UAACC,KAAD;AAAA,WAAgBA,KAAK,CAACd,OAAN,KAAkBA,OAAlC;AAAA,GAAjC,CAAnB;AACA,MAAMe,WAAW,GAAGN,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEE,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,oFAAG,sBAAkCM,OAArC,2DAAG,uBAA2CH,SAA3C,CAAqD,UAACI,MAAD;AAAA,WAAiBA,MAAM,CAACC,WAAP,KAAuBnB,MAAM,CAACmB,WAA/C;AAAA,GAArD,CAApB;AACA,MAAIC,OAAO,GAAGV,IAAH,aAAGA,IAAH,iDAAGA,IAAI,CAAEE,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,qFAAG,uBAAkCM,OAAlC,CAA0CD,WAA1C,CAAH,2DAAG,uBAAwDI,OAAtE,CAZkF,CAalF;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAeA,OAAf,qBADJ;AAGH,CA3BD;;GAAMrB,e;;KAAAA,e;AA6BN,eAAeA,eAAf","sourcesContent":["import React from 'react';\nimport { Text } from '../../your-plants.style';\n\ninterface Props {\n  module: any;\n  plantId: any;\n  latestDataFetched: any;\n}\n\nconst HumidityReading: React.FC<Props> = ({ module, plantId, latestDataFetched  }) => {\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 10000,\n      });\n    \n    \n      // const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n    const plantIndex = data?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plantId);\n    const sensorIndex = data?.getUser.plants[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n    let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    // console.log('data?.getUser.plants[plantIndex]?.sensor', data?.getUser.plants[plantIndex].sensors, module.settingType)\n    // console.log('plantIndex', plantIndex)\n    // console.log('reading', reading)\n    \n    // if (reading > -5 && reading <= 0) reading = 0;\n    // if (reading >= 100 && reading < 110) reading = 100;\n\n\n    // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n    // const readingFormatted = (module.reading >= 0 && module.reading <= 110) ? `${module.reading} % ðŸ’§` : 'Disconected';  \n    // console.log(\"module.reading\", module.reading, reading)\n    return (\n        <Text bold>{`${reading} % ðŸ’§`}</Text>\n    );\n};\n\nexport default HumidityReading;\n"]},"metadata":{},"sourceType":"module"}