{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/market/market.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useRef, useEffect, useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantPageWrapper } from './market.style';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context'; // import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\n// import { GeolocateControl } from \"mapbox-gl\";\n\nimport Map, { GeolocateControl } from 'react-map-gl';\n\nvar DittoMarket = function DittoMarket(_ref) {\n  _s();\n\n  var deviceType = _ref.deviceType,\n      userRefetch = _ref.userRefetch;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useContext2 = useContext(AuthContext),\n      authDispatch = _useContext2.authDispatch;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      location = _React$useState2[0],\n      setLocation = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      mensen = _React$useState4[0],\n      setMensen = _React$useState4[1];\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      _useQuery$data = _useQuery.data,\n      data = _useQuery$data === void 0 ? {} : _useQuery$data;\n\n  var geoControlRef = useRef();\n  useEffect(function () {\n    var _geoControlRef$curren;\n\n    // Activate as soon as the control is loaded\n    (_geoControlRef$curren = geoControlRef.current) === null || _geoControlRef$curren === void 0 ? void 0 : _geoControlRef$curren.trigger();\n  }, [geoControlRef.current]);\n  useEffect(function () {\n    if ('geolocation' in navigator) {\n      // Retrieve latitude & longitude coordinates from `navigator.geolocation` Web API\n      navigator.geolocation.getCurrentPosition(function (_ref2) {\n        var coords = _ref2.coords;\n        var la = coords.la,\n            lo = coords.lo;\n        setLocation({\n          latitude: latitude,\n          longitude: longitude\n        });\n      });\n    }\n  }, []);\n  useEffect(function () {\n    // Fetch data from API if `location` object is set\n    if (location) {\n      fetchApiData(location);\n    }\n  }, [location]);\n\n  var fetchApiData = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {\n      var latitude, longitude, res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              latitude = _ref3.latitude, longitude = _ref3.longitude;\n              _context.next = 3;\n              return fetch(\"https://openmensa.org/api/v2/canteens?near[lat]=\".concat(latitude, \"&near[lng]=\").concat(longitude, \"&near[dist]=50000\"));\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              setMensen(data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchApiData(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n  return __jsx(PlantPageWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, __jsx(Map, {\n    mapboxAccessToken: \"pk.eyJ1IjoiZXN0ZWJhbm11cnV6YWJhbCIsImEiOiJjbG4ybGZzYmcwMWQwMmlvMDVrbHhheno3In0.EZPhoOcmHwM3BFhGkrQ2-A\",\n    initialViewState: {\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    },\n    mapStyle: \"mapbox://styles/mapbox/streets-v9\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(GeolocateControl, {\n    ref: geoControlRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  })));\n};\n\n_s(DittoMarket, \"5CNptgWo1RthwjV27uBG2UTnbbE=\", false, function () {\n  return [useQuery];\n});\n\n_c = DittoMarket;\nexport default DittoMarket;\n\nvar _c;\n\n$RefreshReg$(_c, \"DittoMarket\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/market/market.tsx"],"names":["React","useRef","useEffect","useContext","useQuery","ErrorMessage","PlantPageWrapper","GET_LOGGED_IN_USER","ProfileContext","AuthContext","Map","GeolocateControl","DittoMarket","deviceType","userRefetch","state","dispatch","authDispatch","useState","location","setLocation","mensen","setMensen","notifyOnNetworkStatusChange","fetchPolicy","loading","error","data","geoControlRef","current","trigger","navigator","geolocation","getCurrentPosition","coords","la","lo","latitude","longitude","fetchApiData","fetch","res","json","message","zoom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {useRef, useEffect, useContext} from 'react';\nimport Link from 'next/link';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport ErrorMessage from 'components/error-message/error-message';\n\nimport {\n  PlantsPageContainer,\n  PlantPageWrapper,\n} from './market.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER, GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\n// import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\n// import { GeolocateControl } from \"mapbox-gl\";\nimport Map, {GeolocateControl} from 'react-map-gl';\n\ntype DittoMarketProps = {\n  data?: any;\n  userRefetch: any;\n  index?: Number;\n  Router?: any;\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst DittoMarket: React.FC<DittoMarketProps> = ({ deviceType, userRefetch }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const {authDispatch} = useContext<any>(AuthContext);\n  const [location, setLocation] = React.useState();\n  const [mensen, setMensen] = React.useState([]);\n  const { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    // pollInterval: 5000,\n  });\n  const geoControlRef = useRef<mapboxgl.GeolocateControl>();\n\n  useEffect(() => {\n    // Activate as soon as the control is loaded\n    geoControlRef.current?.trigger();\n  }, [geoControlRef.current]);\n\n  useEffect(() => {\n    if('geolocation' in navigator) {\n        // Retrieve latitude & longitude coordinates from `navigator.geolocation` Web API\n        navigator.geolocation.getCurrentPosition(({ coords }) => {\n            const { la, lo } = coords;\n            setLocation({ latitude, longitude });\n        })\n    }\n  }, []);\n\n  useEffect(() => {\n    // Fetch data from API if `location` object is set\n    if (location) {\n        fetchApiData(location);\n    }\n}, [location]);\n\n  const fetchApiData = async ({ latitude, longitude }) => {\n    const res = await fetch(`https://openmensa.org/api/v2/canteens?near[lat]=${latitude}&near[lng]=${longitude}&near[dist]=50000`);\n    const data = await res.json();\n    setMensen(data);\n  };\n\n\n  if (loading) {\n    return <ErrorMessage message={'Cargando...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  return (\n    <PlantPageWrapper>\n      {/* <PlantsPageContainer> */}\n        <Map\n          mapboxAccessToken=\"pk.eyJ1IjoiZXN0ZWJhbm11cnV6YWJhbCIsImEiOiJjbG4ybGZzYmcwMWQwMmlvMDVrbHhheno3In0.EZPhoOcmHwM3BFhGkrQ2-A\"\n          initialViewState={{\n            longitude: -100,\n            latitude: 40,\n            zoom: 3.5\n          }}\n          mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n        >\n          <GeolocateControl ref={geoControlRef} />\n        </Map>\n      {/* </PlantsPageContainer> */}\n    </PlantPageWrapper>\n  );\n};\n\nexport default DittoMarket;\n"]},"metadata":{},"sourceType":"module"}