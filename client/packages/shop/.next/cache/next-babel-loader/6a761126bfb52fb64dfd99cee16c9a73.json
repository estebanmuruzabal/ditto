{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nvar AirHumidityReading = function AirHumidityReading(_ref) {\n  var _data$getUser, _data$getUser$plants, _data$getUser$plants$, _data$getUser$plants$2, _data$getUser$plants$3, _data$getUser$plants$4;\n\n  var module = _ref.module,\n      plantId = _ref.plantId;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 1000,\n\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(function (plant) {\n    return plant.plantId === plantId;\n  });\n  var sensorIndex = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.findIndex(function (sensor) {\n    return sensor.settingType === module.settingType;\n  });\n  var reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$3 = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$3 === void 0 ? void 0 : (_data$getUser$plants$4 = _data$getUser$plants$3.sensors[sensorIndex]) === null || _data$getUser$plants$4 === void 0 ? void 0 : _data$getUser$plants$4.reading;\n  return __jsx(Text, {\n    bold: true\n  }, reading, \" ppm\");\n};\n\nexport default AirHumidityReading;","map":null,"metadata":{},"sourceType":"module"}