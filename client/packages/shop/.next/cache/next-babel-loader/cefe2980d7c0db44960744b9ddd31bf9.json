{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/components/address-card/address-card-two.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_ADDRESS, UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './address-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage } from 'react-intl'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nvar FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    var ID = props.item.id;\n    var addressItem = props.item.item;\n    return {\n      id: ID || null,\n      addressId: addressItem.id || null,\n      title: addressItem.title || '',\n      address: addressItem.address || '',\n      division: addressItem.division || '',\n      district: addressItem.district || '',\n      region: addressItem.region || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    title: Yup.string().required('Title is required!'),\n    address: Yup.string().required('Address is required')\n  }),\n  handleSubmit: function handleSubmit(values) {// do submitting things\n  }\n});\n\nvar UpdateAddressTwo = function UpdateAddressTwo(props) {\n  _s();\n\n  var isValid = props.isValid,\n      item = props.item,\n      values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n  var ID = item.id;\n  var newAddressid = null;\n  var addressItem = item.item;\n  var addressValue = {\n    id: ID,\n    addressId: addressItem.id,\n    title: values.title,\n    address: values.address,\n    division: values.division,\n    district: values.district,\n    region: values.region\n  };\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useMutation = useMutation(UPDATE_ADDRESS),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateAddressMutation = _useMutation2[0];\n\n  var _useMutation3 = useMutation(ADD_ADDRESS),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      addAddressMutation = _useMutation4[0];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var id, addressId, title, address, division, district, region, _yield$addAddressMuta, data, updateAddressData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isValid) {\n                _context.next = 18;\n                break;\n              }\n\n              id = addressValue.id, addressId = addressValue.addressId, title = addressValue.title, address = addressValue.address, division = addressValue.division, district = addressValue.district, region = addressValue.region;\n\n              if (!(Object.keys(addressItem).length === 0)) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 5;\n              return addAddressMutation({\n                variables: {\n                  id: id,\n                  title: title,\n                  address: address,\n                  division: division,\n                  district: district,\n                  region: region\n                }\n              });\n\n            case 5:\n              _yield$addAddressMuta = _context.sent;\n              data = _yield$addAddressMuta.data;\n              newAddressid = data.addDeliveryAddress.id;\n              addressValue.id = data.addDeliveryAddress.id;\n              dispatch({\n                type: 'ADD_ADDRESS',\n                payload: addressValue\n              });\n              closeModal();\n              _context.next = 18;\n              break;\n\n            case 13:\n              _context.next = 15;\n              return updateAddressMutation({\n                variables: {\n                  id: id,\n                  addressId: addressId,\n                  title: title,\n                  address: address,\n                  division: division,\n                  district: district,\n                  region: region\n                }\n              });\n\n            case 15:\n              updateAddressData = _context.sent;\n              dispatch({\n                type: 'UPDATE_ADDRESS',\n                payload: {\n                  value: addressValue,\n                  id: addressItem.id\n                }\n              });\n              closeModal();\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  'Edit Address';\n  var formattedMessage = addressItem && addressItem.id ? __jsx(FormattedMessage, {\n    id: \"editAddressId\",\n    defaultMessage: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 60\n    }\n  }) : __jsx(FormattedMessage, {\n    id: \"editAddressId\",\n    defaultMessage: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 120\n    }\n  });\n  return __jsx(Form, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, formattedMessage), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"title\",\n    type: \"text\",\n    placeholder: \"Enter Title\",\n    error: touched.title && errors.title,\n    value: values.title,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"district\",\n    type: \"text\",\n    placeholder: \"Enter District\",\n    error: touched.district && errors.district,\n    value: values.district,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"division\",\n    type: \"text\",\n    placeholder: \"Enter Division\",\n    error: touched.division && errors.division,\n    value: values.division,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"region\",\n    type: \"text\",\n    placeholder: \"Enter Region\",\n    error: touched.region && errors.region,\n    value: values.region,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"address\",\n    as: \"textarea\",\n    placeholder: \"Enter Address\",\n    error: touched.address && errors.address,\n    value: values.address,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    style: {\n      width: '100%',\n      height: '44px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedAddressId\",\n    defaultMessage: \"Save Address\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(UpdateAddressTwo, \"B8k0q/aUy0NRA9UGxWSVMZrsZkY=\", false, function () {\n  return [useMutation, useMutation];\n});\n\n_c = UpdateAddressTwo;\nexport default _c2 = FormEnhancer(UpdateAddressTwo);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UpdateAddressTwo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/components/address-card/address-card-two.tsx"],"names":["React","useContext","Yup","withFormik","Form","closeModal","TextField","Button","useMutation","ADD_ADDRESS","UPDATE_ADDRESS","FieldWrapper","Heading","ProfileContext","FormattedMessage","FormEnhancer","mapPropsToValues","props","ID","item","id","addressItem","addressId","title","address","division","district","region","validationSchema","object","shape","string","required","handleSubmit","values","UpdateAddressTwo","isValid","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","newAddressid","addressValue","state","dispatch","updateAddressMutation","addAddressMutation","Object","keys","length","variables","data","addDeliveryAddress","type","payload","updateAddressData","value","formattedMessage","width","height"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_ADDRESS, UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './address-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage } from 'react-intl';\n\n// Shape of form values\ninterface FormValues {\n  id: any | null;\n  addressId: any | null,\n  title: string;\n  address: string;\n  division?: string;\n  district?: string;\n  region?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n  id?: any | null;\n}\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: (props) => {\n    const ID = props.item.id;\n    const addressItem = props.item.item;\n    return {\n      id: ID || null,\n      addressId: addressItem.id || null,\n      title: addressItem.title || '',\n      address: addressItem.address || '',\n      division: addressItem.division || '',\n      district: addressItem.district || '',\n      region: addressItem.region || '',\n    };\n  },\n  validationSchema: Yup.object().shape({\n    title: Yup.string().required('Title is required!'),\n    address: Yup.string().required('Address is required'),\n  }),\n  handleSubmit: (values) => {\n    // do submitting things\n  },\n});\n\nconst UpdateAddressTwo = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n\n    handleReset,\n    isSubmitting,\n  } = props;\n  const ID = item.id;\n  let newAddressid = null;\n  const addressItem = item.item;\n  const addressValue = {\n    id: ID,\n    addressId: addressItem.id, \n    title: values.title,\n    address: values.address,\n    division: values.division,\n    district: values.district,\n    region: values.region\n  };\n  const { state, dispatch } = useContext(ProfileContext);\n\n  const [updateAddressMutation] = useMutation(UPDATE_ADDRESS);\n  const [addAddressMutation] = useMutation(ADD_ADDRESS);\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      const {id, addressId, title, address, division, district, region} = addressValue;\n      if(Object.keys(addressItem).length === 0){\n        const {data}  = await addAddressMutation({\n          variables: { \n            id,\n            title,\n            address, \n            division,\n            district,\n            region\n           },\n        });\n        newAddressid = data.addDeliveryAddress.id;\n        addressValue.id = data.addDeliveryAddress.id;\n        dispatch({\n          type: 'ADD_ADDRESS',\n          payload: addressValue \n        });\n        closeModal();\n      }else{\n        const updateAddressData = await updateAddressMutation({\n          variables: { \n            id,\n            addressId,\n            title,\n            address, \n            division,\n            district,\n            region\n           }\n        });\n        dispatch({\n          type: 'UPDATE_ADDRESS',\n          payload: { value: addressValue, id: addressItem.id }\n\n        });\n        closeModal();\n      }\n    }\n  };\n  'Edit Address'\n  const formattedMessage = addressItem && addressItem.id ? <FormattedMessage id=\"editAddressId\" defaultMessage=\"\" /> : <FormattedMessage id=\"editAddressId\" defaultMessage=\"\" />\n  return (\n    <Form>\n      <Heading>{formattedMessage}</Heading>\n      <FieldWrapper>\n        <TextField\n          id=\"title\"\n          type=\"text\"\n          placeholder=\"Enter Title\"\n          error={touched.title && errors.title}\n          value={values.title}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n      <FieldWrapper>\n        <TextField\n          id=\"district\"\n          type=\"text\"\n          placeholder=\"Enter District\"\n          error={touched.district && errors.district}\n          value={values.district}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n      <FieldWrapper>\n        <TextField\n          id=\"division\"\n          type=\"text\"\n          placeholder=\"Enter Division\"\n          error={touched.division && errors.division}\n          value={values.division}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n      <FieldWrapper>\n        <TextField\n          id=\"region\"\n          type=\"text\"\n          placeholder=\"Enter Region\"\n          error={touched.region && errors.region}\n          value={values.region}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n      <FieldWrapper>\n        <TextField\n          id=\"address\"\n          as=\"textarea\"\n          placeholder=\"Enter Address\"\n          error={touched.address && errors.address}\n          value={values.address}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n\n      <Button\n        onClick={handleSubmit}\n        type=\"submit\"\n        style={{ width: '100%', height: '44px' }}\n      >\n        <FormattedMessage id=\"savedAddressId\" defaultMessage=\"Save Address\" />\n      </Button>\n    </Form>\n  );\n};\n\nexport default FormEnhancer(UpdateAddressTwo);\n"]},"metadata":{},"sourceType":"module"}