{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_ADDRESS, UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './address-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nvar FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    var ID = props.item.id;\n    var addressItem = props.item.item;\n    return {\n      id: ID || null,\n      addressId: addressItem.id || null,\n      title: addressItem.title || '',\n      address: addressItem.address || '',\n      division: addressItem.division || '',\n      district: addressItem.district || '',\n      region: addressItem.region || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    title: Yup.string().required('Required!'),\n    address: Yup.string().required('Required')\n  }),\n  handleSubmit: function handleSubmit(values) {// do submitting things\n  }\n});\n\nvar UpdateAddressTwo = function UpdateAddressTwo(props) {\n  var isValid = props.isValid,\n      item = props.item,\n      values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n  var ID = item.id;\n  var newAddressid = null;\n  var addressItem = item.item;\n  var addressValue = {\n    id: ID,\n    addressId: addressItem.id,\n    title: values.title,\n    address: values.address,\n    division: values.division,\n    district: values.district,\n    region: values.region\n  };\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var intl = useIntl();\n\n  var _useMutation = useMutation(UPDATE_ADDRESS),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateAddressMutation = _useMutation2[0];\n\n  var _useMutation3 = useMutation(ADD_ADDRESS),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      addAddressMutation = _useMutation4[0];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var id, addressId, title, address, division, district, region, _yield$addAddressMuta, data, updateAddressData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isValid) {\n                _context.next = 18;\n                break;\n              }\n\n              id = addressValue.id, addressId = addressValue.addressId, title = addressValue.title, address = addressValue.address, division = addressValue.division, district = addressValue.district, region = addressValue.region;\n\n              if (!(Object.keys(addressItem).length === 0)) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 5;\n              return addAddressMutation({\n                variables: {\n                  id: id,\n                  title: title,\n                  address: address,\n                  division: division,\n                  district: district,\n                  region: region\n                }\n              });\n\n            case 5:\n              _yield$addAddressMuta = _context.sent;\n              data = _yield$addAddressMuta.data;\n              newAddressid = data.addDeliveryAddress.id;\n              addressValue.id = data.addDeliveryAddress.id;\n              dispatch({\n                type: 'ADD_ADDRESS',\n                payload: addressValue\n              });\n              closeModal();\n              _context.next = 18;\n              break;\n\n            case 13:\n              _context.next = 15;\n              return updateAddressMutation({\n                variables: {\n                  id: id,\n                  addressId: addressId,\n                  title: title,\n                  address: address,\n                  division: division,\n                  district: district,\n                  region: region\n                }\n              });\n\n            case 15:\n              updateAddressData = _context.sent;\n              dispatch({\n                type: 'UPDATE_ADDRESS',\n                payload: {\n                  value: addressValue,\n                  id: addressItem.id\n                }\n              });\n              closeModal();\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Form, null, __jsx(Heading, null, intl.formatMessage({\n    id: (addressItem === null || addressItem === void 0 ? void 0 : addressItem.id) ? 'editAddressId' : 'addNewAddressId',\n    defaultMessage: 'Address name'\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"title\",\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'addressRefId',\n      defaultMessage: 'Address name'\n    }),\n    error: touched.title && errors.title,\n    value: values.title,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"division\",\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'localidadId',\n      defaultMessage: 'Localidad'\n    }),\n    error: touched.division && errors.division,\n    value: values.division,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"region\",\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'provinciaId',\n      defaultMessage: 'Provincia'\n    }),\n    error: touched.region && errors.region,\n    value: values.region,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"address\",\n    as: \"textarea\",\n    placeholder: intl.formatMessage({\n      id: 'addressId',\n      defaultMessage: 'Direcci√≥n'\n    }),\n    error: touched.address && errors.address,\n    value: values.address,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    style: {\n      width: '100%',\n      height: '44px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedAddressId\",\n    defaultMessage: \"Save Address\"\n  })));\n};\n\nexport default FormEnhancer(UpdateAddressTwo);","map":null,"metadata":{},"sourceType":"module"}