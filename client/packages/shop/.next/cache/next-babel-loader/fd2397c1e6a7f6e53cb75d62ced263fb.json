{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, WeekContainer, DayContainer, TextSpaced, CardButtons, ActionButton, Text, Status, Type, ActionsButtons, Row, ScheduleTimeContainer, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getDayShortName, getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport HumidityReading from './HumidityReading'; // import { useQuery } from '@apollo/react-hooks';\n// const { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n//     notifyOnNetworkStatusChange: true,\n//     fetchPolicy: \"network-only\",\n//     // pollInterval: 5000,\n//   });\n\nvar SoilHumiditySensor = function SoilHumiditySensor(_ref) {\n  var _relayOneSelected$val, _relayOneSelected$val2, _setting$relayTwoAuto, _relayOneSelected$val3, _relayTwoSelected$val, _relayTwoSelected$val2, _relayTwoSelected$val3, _setting$scheduledOnT, _relayOneSelected$val4, _setting$logs;\n\n  var errorId = _ref.errorId,\n      plant = _ref.plant,\n      settingType = _ref.settingType,\n      handleSettingsChange = _ref.handleSettingsChange,\n      onDeleteSchedule = _ref.onDeleteSchedule,\n      data = _ref.data,\n      openTab = _ref.openTab,\n      setOpenTab = _ref.setOpenTab,\n      handleDeleteSensor = _ref.handleDeleteSensor;\n  var setting = plant.sensors.find(function (module) {\n    return module.settingType === settingType;\n  });\n  var intl = useIntl();\n\n  var _useState = useState(false),\n      editIsOn = _useState[0],\n      setEditIsOn = _useState[1];\n\n  var selectedMode = humidityModeOptions.find(function (option) {\n    return option.value === setting.mode;\n  });\n  var selectedManualState = manualModeOptions.find(function (option) {\n    return option.value === setting.relayOneWorking;\n  });\n  var relayOneSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayOneIdRelated;\n  });\n  var relayTwoSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayTwoIdRelated;\n  });\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '120px',\n        textAlign: 'left'\n      });\n    }\n  }; // const tabIsOpen = openTab === settingType;\n\n  var tabIsOpen = true;\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-time-schedule-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  return __jsx(PlantsSensorContainer, {\n    style: {\n      height: tabIsOpen ? '100%' : '82px'\n    },\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setOpenTab(tabIsOpen ? '' : settingType);\n    }\n  }, __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Type, {\n    bold: true\n  }, getSettingTypeText(setting === null || setting === void 0 ? void 0 : setting.settingType))), __jsx(ListDes, null, __jsx(CardButtons, {\n    className: \"button-wrapper\"\n  }, editIsOn ? __jsx(ActionButton, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setEditIsOn(!editIsOn);\n    },\n    className: \"edit-btn\"\n  }, __jsx(CheckMark, null)) : __jsx(ActionButton, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setEditIsOn(!editIsOn);\n    },\n    className: \"edit-btn\"\n  }, __jsx(PencilIcon, null)), __jsx(ActionButton, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      handleDeleteSensor(plant, settingType);\n    },\n    className: \"delete-btn\"\n  }, __jsx(CloseIcon, null))))), (setting === null || setting === void 0 ? void 0 : setting.mode) === HumiditySensorMode.NONE && !!openTab && __jsx(ListItem, null, __jsx(Status, null, __jsx(FormattedMessage, {\n    id: \"modoRequiredWarningText\",\n    defaultMessage: \"modoRequiredWarningText\"\n  }))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"soilHumidityId\",\n    defaultMessage: \"soilHumidityId\"\n  }))), __jsx(ListDes, null, __jsx(HumidityReading, {\n    settingType: settingType,\n    plant: plant\n  }))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"plantName\",\n    defaultMessage: \"plantName\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: setting.name,\n    placeholder: intl.formatMessage({\n      id: 'plantNameRequiredNameId',\n      defaultMessage: 'plantNameRequiredNameId'\n    }),\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'name', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\" // intlInputLabelId=\"profileEmailField\"\n\n  }) : __jsx(Text, {\n    bold: true\n  }, setting === null || setting === void 0 ? void 0 : setting.name))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"humidityModeId\",\n    defaultMessage: \"humidityModeId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'mode', e.value, settingType);\n    },\n    value: selectedMode,\n    options: humidityModeOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(Text, {\n    style: {\n      width: 'max-content',\n      textOverflow: 'ellipsis'\n    },\n    bold: true\n  }, (selectedMode === null || selectedMode === void 0 ? void 0 : selectedMode.value.length) > 1 ? selectedMode.label : '-'))), (setting === null || setting === void 0 ? void 0 : setting.mode) !== HumiditySensorMode.NONE && __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"notifyChangesId\",\n    defaultMessage: \"notifyChangesId\"\n  }))), __jsx(ListDes, null, __jsx(Switch, {\n    disabled: false,\n    checked: setting.whatsappWarningsOn,\n    labelPosition: 'right' // className,\n    ,\n    onUpdate: function onUpdate() {\n      return handleSettingsChange(plant, 'whatsappWarningsOn', !setting.whatsappWarningsOn, settingType);\n    }\n  }))), setting.mode === HumiditySensorMode.IRRIGATE_ON_DEMAND && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"minHumidityId\",\n    defaultMessage: \"minHumidityId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"minWarning\",\n    value: setting.minWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'minWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\")) : __jsx(Text, {\n    bold: true\n  }, setting.minWarning >= 0 && setting.minWarning <= 100 ? setting === null || setting === void 0 ? void 0 : setting.minWarning : '-', \" %\"), errorId === 'minWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  })))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: (relayOneSelected === null || relayOneSelected === void 0 ? void 0 : (_relayOneSelected$val = relayOneSelected.value) === null || _relayOneSelected$val === void 0 ? void 0 : _relayOneSelected$val.length) > 0 ? 'asociatedToId' : 'asociateRelayToId',\n    defaultMessage: \"asociateRelayToId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType);\n    },\n    value: relayOneSelected,\n    options: fourRelaysOptions // inputFocusOnClick={false}\n    // focusInputOnMenuOpen={false}\n    ,\n    isSearchable: false,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(React.Fragment, null, __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated) : '-', \"  \", (setting === null || setting === void 0 ? void 0 : setting.relayOneWorking) ? '[ON]' : '[OFF]'))))), setting.mode === HumiditySensorMode.SEEDS_POOL_IRRIGATION && __jsx(React.Fragment, null, __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"maxHumidityId\",\n    defaultMessage: \"maxHumidityId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"maxWarning\",\n    value: setting.maxWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'maxWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\"), errorId === 'maxWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  }))) : __jsx(Text, {\n    bold: true\n  }, setting.maxWarning >= 0 && setting.maxWarning <= 100 ? setting === null || setting === void 0 ? void 0 : setting.maxWarning : '-', \" %\"))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"minHumidityId\",\n    defaultMessage: \"minHumidityId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"minWarning\",\n    value: setting.minWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'minWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\"), errorId === 'minWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  }))) : __jsx(Text, {\n    bold: true\n  }, setting.minWarning >= 0 && setting.minWarning <= 100 ? setting === null || setting === void 0 ? void 0 : setting.minWarning : '-', \" %\"))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: (relayOneSelected === null || relayOneSelected === void 0 ? void 0 : (_relayOneSelected$val2 = relayOneSelected.value) === null || _relayOneSelected$val2 === void 0 ? void 0 : _relayOneSelected$val2.length) > 0 ? 'asociatedToId' : 'asociateRelayOneId',\n    defaultMessage: \"asociateRelayOneId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType);\n    },\n    value: relayOneSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated) : '-', \"  \", (setting === null || setting === void 0 ? void 0 : setting.relayOneWorking) ? '[ON]' : '[OFF]'))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"asociateRelayTwoId\",\n    defaultMessage: \"asociateRelayTwoId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayTwoIdRelated', e.value, settingType);\n    },\n    value: relayTwoSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated) : '-'))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"irrigationTimeId\",\n    defaultMessage: \"irrigationTimeId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Input, {\n    type: \"number\",\n    name: \"relayOneAutomatedTimeToRun\",\n    value: setting.relayOneAutomatedTimeToRun,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneAutomatedTimeToRun', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\"\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneAutomatedTimeToRun) >= 0 ? setting.relayOneAutomatedTimeToRun + ' mins' : '-'))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"irrigationEvacuationTimeId\",\n    defaultMessage: \"irrigationEvacuationTimeId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Input, {\n    type: \"number\",\n    name: \"relayTwoAutomatedTimeToRun\",\n    value: setting.relayTwoAutomatedTimeToRun,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayTwoAutomatedTimeToRun', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\"\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : (_setting$relayTwoAuto = setting.relayTwoAutomatedTimeToRun) === null || _setting$relayTwoAuto === void 0 ? void 0 : _setting$relayTwoAuto.length) > 0 ? setting.relayTwoAutomatedTimeToRun + ' mins' : '-')))), (setting.mode === HumiditySensorMode.IRRIGATE_SPECIFICT_AMOUNT_ON_DEMAND || setting.mode === HumiditySensorMode.IRRIGATE_SPECIFICT_AMOUNT_WITH_DOUBLE_ACTION) && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"minHumidityId\",\n    defaultMessage: \"minHumidityId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Row, null, __jsx(Input, {\n    type: \"number\",\n    name: \"minWarning\",\n    value: setting.minWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'minWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\"\n  }), __jsx(Porcentage, null, \"%\")) : __jsx(Text, {\n    bold: true\n  }, setting.minWarning >= 0 && setting.minWarning <= 100 ? setting === null || setting === void 0 ? void 0 : setting.minWarning : '-', \" %\"), errorId === 'minWarning' && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\"\n  })))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: (relayOneSelected === null || relayOneSelected === void 0 ? void 0 : (_relayOneSelected$val3 = relayOneSelected.value) === null || _relayOneSelected$val3 === void 0 ? void 0 : _relayOneSelected$val3.length) > 0 ? 'asociatedToId' : 'asociateRelay1Id',\n    defaultMessage: \"asociateRelay1Id\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType);\n    },\n    value: relayOneSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(React.Fragment, null, __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated) : '-', \"  \", (setting === null || setting === void 0 ? void 0 : setting.relayOneWorking) ? '[ON]' : '[OFF]')))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"irrigationTimeId\",\n    defaultMessage: \"irrigationTimeId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Input, {\n    type: \"number\",\n    name: \"relayOneAutomatedTimeToRun\",\n    value: setting.relayOneAutomatedTimeToRun,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneAutomatedTimeToRun', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\"\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneAutomatedTimeToRun) >= 0 ? setting.relayOneAutomatedTimeToRun + ' mins' : '-'))), setting.mode === HumiditySensorMode.IRRIGATE_SPECIFICT_AMOUNT_WITH_DOUBLE_ACTION && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: (relayTwoSelected === null || relayTwoSelected === void 0 ? void 0 : (_relayTwoSelected$val = relayTwoSelected.value) === null || _relayTwoSelected$val === void 0 ? void 0 : _relayTwoSelected$val.length) > 0 ? 'asociatedToId' : 'asociateRelay2Id',\n    defaultMessage: \"asociateRelay2Id\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayTwoIdRelated', e.value, settingType);\n    },\n    value: relayTwoSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated) : '-', \"  \", (setting === null || setting === void 0 ? void 0 : setting.relayTwoWorking) ? '[ON]' : '[OFF]')))), (setting.mode === HumiditySensorMode.SCHEDULE || setting.mode === HumiditySensorMode.SCHEDULE_DOUBLE_ACTION) && __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: (relayTwoSelected === null || relayTwoSelected === void 0 ? void 0 : (_relayTwoSelected$val2 = relayTwoSelected.value) === null || _relayTwoSelected$val2 === void 0 ? void 0 : _relayTwoSelected$val2.length) > 0 ? 'asociatedToId' : 'asociateRelay1Id',\n    defaultMessage: \"asociateRelay1Id\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType);\n    },\n    value: relayOneSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated) : '-', \"  \", (setting === null || setting === void 0 ? void 0 : setting.relayOneWorking) ? '[ON]' : '[OFF]'))), setting.mode === HumiditySensorMode.SCHEDULE_DOUBLE_ACTION && __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: (relayTwoSelected === null || relayTwoSelected === void 0 ? void 0 : (_relayTwoSelected$val3 = relayTwoSelected.value) === null || _relayTwoSelected$val3 === void 0 ? void 0 : _relayTwoSelected$val3.length) > 0 ? 'asociatedToId' : 'asociateRelay2Id',\n    defaultMessage: \"asociateRelay2Id\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayTwoIdRelated', e.value, settingType);\n    },\n    value: relayTwoSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated) : '-', \"  \", (setting === null || setting === void 0 ? void 0 : setting.relayTwoWorking) ? '[ON]' : '[OFF]'))), setting === null || setting === void 0 ? void 0 : (_setting$scheduledOnT = setting.scheduledOnTimes) === null || _setting$scheduledOnT === void 0 ? void 0 : _setting$scheduledOnT.map(function (schedule, i) {\n    return __jsx(WeekContainer, null, __jsx(ListDes, {\n      style: {\n        flexDirection: 'row',\n        display: 'flex',\n        paddingBottom: '10px'\n      }\n    }, WeekDays.map(function (day) {\n      return __jsx(DayContainer, {\n        key: i + '-day--humidity-1container',\n        style: {\n          backgroundColor: schedule.daysToRepeat.includes(day) ? '#c2b0b0' : 'transparent'\n        } // onClick={() => setDay(day)}\n\n      }, getDayShortName(day));\n    })), __jsx(ScheduleTimeContainer, null, __jsx(TextSpaced, null, \" \", __jsx(FormattedMessage, {\n      id: \"desdeId\",\n      defaultMessage: \"desdeId\"\n    }), \" \"), __jsx(TextSpaced, {\n      bold: true\n    }, schedule.startTime), __jsx(TextSpaced, null, \" \", __jsx(FormattedMessage, {\n      id: \"aId\",\n      defaultMessage: \"aId\"\n    }), \" \"), __jsx(TextSpaced, {\n      bold: true\n    }, schedule.endTime), __jsx(ActionsButtons, {\n      className: \"button-wrapper\"\n    }, __jsx(ActionButton, {\n      onClick: function onClick(e) {\n        var _data$getUser;\n\n        handleModal(AddTimeSchedule, {\n          settingType: settingType,\n          plant: plant,\n          id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n          schedulePosition: i\n        });\n        e.stopPropagation();\n      },\n      className: \"edit-btn\"\n    }, __jsx(PencilIcon, null)), __jsx(ActionButton, {\n      onClick: function onClick() {\n        return onDeleteSchedule(plant, settingType, i);\n      },\n      className: \"delete-btn\"\n    }, __jsx(CloseIcon, null)), __jsx(TextSpaced, {\n      bold: true\n    }, schedule.enabled ? '' : '⏹️'))));\n  }), __jsx(Button, {\n    size: \"small\",\n    variant: \"outlined\",\n    style: {\n      marginLeft: '10px'\n    },\n    type: \"button\",\n    className: \"add-button\",\n    onClick: function onClick() {\n      var _data$getUser2;\n\n      return handleModal(AddTimeSchedule, {\n        name: 'add-humidity-1-schedule',\n        plant: plant,\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n        settingType: settingType\n      });\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addTimeScheduleId\",\n    defaultMessage: \"addTimeScheduleId\"\n  }))), setting.mode === HumiditySensorMode.MANUAL && __jsx(React.Fragment, null, __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    }\n  }, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: \"manualModeStateId\",\n    defaultMessage: \"manualModeStateId\"\n  }))), __jsx(ListDes, null, __jsx(Switch, {\n    disabled: false,\n    checked: setting.relayOneWorking,\n    labelPosition: 'right' // className,\n    ,\n    onUpdate: function onUpdate() {\n      return handleSettingsChange(plant, 'relayOneWorking', !setting.relayOneWorking, settingType);\n    }\n  }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, null, __jsx(FormattedMessage, {\n    id: (relayOneSelected === null || relayOneSelected === void 0 ? void 0 : (_relayOneSelected$val4 = relayOneSelected.value) === null || _relayOneSelected$val4 === void 0 ? void 0 : _relayOneSelected$val4.length) > 0 ? 'asociatedToId' : 'asociateRelayToId',\n    defaultMessage: \"asociateRelayToId\"\n  }))), __jsx(ListDes, null, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType);\n    },\n    value: relayOneSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed'\n  }) : __jsx(React.Fragment, null, __jsx(Text, {\n    bold: true\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated) : '-', \"  \", (setting === null || setting === void 0 ? void 0 : setting.relayOneWorking) ? '[ON]' : '[OFF]'))))), (setting === null || setting === void 0 ? void 0 : (_setting$logs = setting.logs) === null || _setting$logs === void 0 ? void 0 : _setting$logs.length) > 0 && __jsx(HumidityLogsGraph, {\n    data: setting.logs\n  }));\n};\n\nexport default SoilHumiditySensor;","map":null,"metadata":{},"sourceType":"module"}