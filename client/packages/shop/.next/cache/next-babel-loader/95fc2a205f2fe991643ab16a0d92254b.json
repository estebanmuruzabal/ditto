{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { CartPopupBody, PopupHeader, PopupItemCount, CloseButton, CheckoutButtonWrapper, CheckoutButton, Title, TitleDisabled, PriceBox, NoProductMsg, NoProductImg, ItemWrapper, ProductQuantityExceededMsg } from './cart.style';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { ShoppingBagLarge } from 'assets/icons/ShoppingBagLarge';\nimport { NoCartBag } from 'assets/icons/NoCartBag';\nimport { CURRENCY } from 'utils/constant';\nimport { FormattedMessage } from 'react-intl';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useCart } from 'contexts/cart/use-cart';\nimport { CartItem } from 'components/cart-item/cart-item';\n\nconst Cart = ({\n  style,\n  className,\n  onCloseBtnClick,\n  scrollbarHeight\n}) => {\n  const {\n    items,\n    coupon,\n    addItem,\n    removeItem,\n    removeItemFromCart,\n    cartItemsCount,\n    calculatePrice,\n    applyCoupon\n  } = useCart();\n  const {\n    0: couponText,\n    1: setCoupon\n  } = useState('');\n  const {\n    0: displayCoupon,\n    1: showCoupon\n  } = useState(false);\n  const {\n    0: showProductQuantityExceededMsg,\n    1: setShowProductQuantityExceededMsg\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    isRtl\n  } = useLocale();\n\n  const handleChange = e => {\n    setCoupon(e.currentTarget.value);\n  };\n\n  const showProductQuantityExceededMsgFor5Sec = () => {\n    setShowProductQuantityExceededMsg(true);\n    setTimeout(() => {\n      setShowProductQuantityExceededMsg(false);\n    }, 1500);\n  };\n\n  const addOneMore = item => {\n    item.quantity < item.product_quantity ? addItem(item) : showProductQuantityExceededMsgFor5Sec();\n  };\n\n  const toggleCoupon = () => {\n    showCoupon(true);\n  };\n\n  return __jsx(CartPopupBody, {\n    className: className,\n    style: style\n  }, __jsx(PopupHeader, null, __jsx(PopupItemCount, null, __jsx(ShoppingBagLarge, {\n    width: \"19px\",\n    height: \"24px\"\n  }), __jsx(\"span\", null, cartItemsCount, \"\\xA0\", cartItemsCount > 1 ? __jsx(FormattedMessage, {\n    id: \"cartItems\",\n    defaultMessage: \"items\"\n  }) : __jsx(FormattedMessage, {\n    id: \"cartItem\",\n    defaultMessage: \"item\"\n  }))), __jsx(CloseButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(CloseIcon, null))), __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: scrollbarHeight,\n    renderView: props => __jsx(\"div\", _extends({}, props, {\n      style: _objectSpread(_objectSpread({}, props.style), {}, {\n        marginLeft: isRtl ? props.style.marginRight : 0,\n        marginRight: isRtl ? 0 : props.style.marginRight\n      })\n    }))\n  }, __jsx(ItemWrapper, {\n    className: \"items-wrapper\"\n  }, showProductQuantityExceededMsg && __jsx(ProductQuantityExceededMsg, null, __jsx(FormattedMessage, {\n    id: \"productStockLimit\",\n    defaultMessage: \"There is no more availability of this product\"\n  })), !!cartItemsCount ? items.map(item => {\n    return __jsx(CartItem, {\n      key: `cartItem-${item.id}`,\n      onIncrement: () => addItem(item),\n      onDecrement: () => item.quantity === 1 ? removeItemFromCart(item) : removeItem(item),\n      onRemove: () => removeItemFromCart(item),\n      data: item\n    });\n  }) : __jsx(React.Fragment, null, __jsx(NoProductImg, null, __jsx(NoCartBag, null)), __jsx(NoProductMsg, null, __jsx(FormattedMessage, {\n    id: \"noProductFound\",\n    defaultMessage: \"No products found\"\n  }))))), __jsx(CheckoutButtonWrapper, null, cartItemsCount !== 0 ? __jsx(Link, {\n    href: \"/checkout\"\n  }, __jsx(CheckoutButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(React.Fragment, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, calculatePrice())))) : __jsx(CheckoutButton, null, __jsx(React.Fragment, null, __jsx(TitleDisabled, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, calculatePrice())))));\n};\n\nexport default Cart;","map":null,"metadata":{},"sourceType":"module"}