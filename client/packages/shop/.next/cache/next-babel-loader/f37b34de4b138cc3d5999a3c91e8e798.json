{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/authentication-form/register.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Link from 'next/link';\nimport { useMutation } from '@apollo/react-hooks';\nimport us from 'react-phone-input-2/lang/es.json';\nimport { Input } from 'components/forms/input';\nimport { Button, Wrapper, Container, Heading, SubHeading, HelperText, Offer, LinkButton, SubrequirementContainer, Dot, Requirement } from './authentication-form.style';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { SIGNUP_MUTATION } from 'graphql/mutation/signup';\nimport PhoneInput from 'react-phone-input-2';\nexport default function SignOutModal() {\n  _s();\n\n  var _jsx;\n\n  var intl = useIntl();\n\n  var _useContext = useContext(AuthContext),\n      authState = _useContext.authState,\n      authDispatch = _useContext.authDispatch;\n\n  var toggleSignInForm = function toggleSignInForm() {\n    authDispatch({\n      type: 'SIGNIN'\n    });\n  };\n\n  var toggleOtpForm = function toggleOtpForm() {\n    authDispatch({\n      type: 'OTP_VERIFICATION'\n    });\n  }; //signup\n\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      phone = _React$useState2[0],\n      setPhone = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      password = _React$useState4[0],\n      setPassword = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      name = _React$useState6[0],\n      setName = _React$useState6[1];\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      email = _React$useState8[0],\n      setEmail = _React$useState8[1];\n\n  var _React$useState9 = React.useState(''),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      repeatPassword = _React$useState10[0],\n      setRepeatPassword = _React$useState10[1];\n\n  var _React$useState11 = React.useState(null),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      errorMessage = _React$useState12[0],\n      setErrorMessage = _React$useState12[1];\n\n  var _useMutation = useMutation(SIGNUP_MUTATION, {\n    onCompleted: function onCompleted(data) {\n      if (true) {\n        localStorage.setItem('phone_number', \"\".concat(phone));\n        toggleOtpForm();\n      }\n\n      setErrorMessage(null);\n    },\n    onError: function onError(error) {\n      setPassword('');\n      setRepeatPassword('');\n      if ((error === null || error === void 0 ? void 0 : error.toString()) && (error === null || error === void 0 ? void 0 : error.toString().includes('User already registered'))) setErrorMessage(intl.formatMessage({\n        id: 'userAlreadyRegistered',\n        defaultMessage: 'User already registered'\n      }));else if ((error === null || error === void 0 ? void 0 : error.toString()) && (error === null || error === void 0 ? void 0 : error.toString().includes('Incorrect length'))) setErrorMessage(intl.formatMessage({\n        id: 'atLeast6Char',\n        defaultMessage: 'MÃ­nimo 6 caracteres'\n      }));else setErrorMessage(error === null || error === void 0 ? void 0 : error.toString());\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      signupMeMutation = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  var handlePhoneChange = function handlePhoneChange(value, data, event, formattedValue) {\n    setPhone(value);\n  };\n\n  var hasMinLength = function hasMinLength() {\n    return password.length >= 6;\n  };\n\n  var passwordsAreEqual = function passwordsAreEqual() {\n    return password === repeatPassword;\n  }; // private hasSecurity() {\n  //   let securityChecks = 0;\n  //   // @ts-ignore\n  //   securityChecks += this.hasLowerCase() + this.hasUpperCase() + this.hasDigit() + this.hasSpecialChar();\n  //   return securityChecks >= 3;\n  // }\n  // private hasLowerCase() {\n  //   return !!this.state.password.match(new RegExp('[a-z]'));\n  // }\n  // private hasUpperCase() {\n  //   return !!this.state.password.match(new RegExp('[A-Z]'));\n  // }\n  // private hasDigit() {\n  //   return !!this.state.password.match(new RegExp('[0-9]'));\n  // }\n  // private hasSpecialChar() {\n  //   return !!this.state.password.match(/[\\~\\`\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\+\\=\\_\\-\\{\\}\\[\\]\\\\|\\:\\;\\\"\\'\\?\\/\\<\\>\\,\\.]/);\n  // }\n\n\n  var upperCaseEverything = function upperCaseEverything(str) {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      // You do not need to check if i is larger than splitStr length, as your for does that for you\n      // Assign it back to the array\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    } // Directly return the joined string\n\n\n    return splitStr.join(' ');\n  };\n\n  var setErrorFor5Sec = function setErrorFor5Sec(messageId) {\n    var error = intl.formatMessage({\n      id: messageId,\n      defaultMessage: 'Please check the form'\n    });\n    setErrorMessage(error);\n    setTimeout(function () {\n      return setErrorMessage(null);\n    }, 1500);\n    return null;\n  };\n\n  return __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"signUpBtnText\",\n    defaultMessage: \"Sign Up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  })), __jsx(SubHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"signUpText\",\n    defaultMessage: \"Every fill is required except for email in sign up. We promess no spam, only purchases confirmations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  })), __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n\n                if (passwordsAreEqual()) {\n                  _context.next = 4;\n                  break;\n                }\n\n                setErrorFor5Sec('passShouldBeEqual');\n                return _context.abrupt(\"return\");\n\n              case 4:\n                _context.next = 6;\n                return signupMeMutation({\n                  variables: {\n                    phone: phone,\n                    password: password,\n                    name: name\n                  }\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    width: \"100%\",\n    value: upperCaseEverything(name),\n    onChange: function onChange(e) {\n      return setName(upperCaseEverything(e.target.value));\n    },\n    placeholder: intl.formatMessage({\n      id: 'namePlaceholder',\n      defaultMessage: 'Complete name'\n    }),\n    oninvalid: \"this.setCustomValidity('Please Enter valid email')\",\n    oninput: \"setCustomValidity('')\",\n    height: \"48px\",\n    backgroundColor: \"#F7F7F7\",\n    mb: \"10px\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), __jsx(Input, {\n    type: \"email\",\n    name: \"email\",\n    width: \"100%\",\n    placeholder: intl.formatMessage({\n      id: 'emailSignUpPlaceholder',\n      defaultMessage: 'Email address'\n    }),\n    value: email,\n    onChange: function onChange(e) {\n      return setEmail(e.target.value);\n    },\n    backgroundColor: \"#F7F7F7\",\n    marginBottom: \"10px\" // intlInputLabelId=\"profileEmailField\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 12\n    }\n  }), __jsx(PhoneInput, (_jsx = {\n    inputProps: {\n      name: 'Numero de telefono',\n      required: true,\n      autoFocus: false\n    },\n    containerStyle: {\n      textAlign: \"left\"\n    },\n    inputStyle: {\n      backgroundColor: \"#F7F7F7\",\n      height: \"48px\",\n      marginBottom: \"10px\",\n      width: \"100%\"\n    },\n    onlyCountries: ['us'],\n    localization: us,\n    country: 'us',\n    masks: {\n      us: '(...) ...-....'\n    }\n  }, _defineProperty(_jsx, \"country\", 'us'), _defineProperty(_jsx, \"masks\", {\n    ar: '(...) ...-....'\n  }), _defineProperty(_jsx, \"value\", phone), _defineProperty(_jsx, \"onChange\", handlePhoneChange), _defineProperty(_jsx, \"__self\", this), _defineProperty(_jsx, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 13\n  }), _jsx)), __jsx(Input, {\n    type: \"text\",\n    name: \"password\",\n    value: password,\n    onChange: function onChange(e) {\n      return setPassword(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'passwordPlaceholderRegister',\n      defaultMessage: 'Password (min 6 characters)'\n    }),\n    height: \"48px\",\n    width: \"100%\",\n    backgroundColor: \"#F7F7F7\",\n    mb: \"10px\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }), __jsx(Input, {\n    type: \"text\",\n    name: \"password\",\n    width: \"100%\",\n    value: repeatPassword,\n    onChange: function onChange(e) {\n      return setRepeatPassword(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'passwordRepeatPlaceholder',\n      defaultMessage: 'Password (min 6 characters)'\n    }),\n    height: \"48px\",\n    backgroundColor: \"#F7F7F7\",\n    mb: \"10px\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }), !hasMinLength && __jsx(SubrequirementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }, __jsx(Dot, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }), __jsx(Requirement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  }, intl.formatMessage({\n    id: 'atLeast6Char',\n    defaultMessage: 'At least 6 characters'\n  }))), !passwordsAreEqual && __jsx(SubrequirementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }, __jsx(Dot, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 17\n    }\n  }), __jsx(Requirement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 17\n    }\n  }, intl.formatMessage({\n    id: 'passShouldBeEqual',\n    defaultMessage: 'Passwords does not match'\n  }))), __jsx(HelperText, {\n    style: {\n      padding: '20px 0 30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"tramsText\",\n    defaultMessage: \"By signing up, you agree to Ditto's\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 15\n    }\n  }), \"\\xA0\", __jsx(Link, {\n    href: \"/terms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"termsConditionText\",\n    defaultMessage: \"Terms & Conditions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 19\n    }\n  })))), __jsx(Button, {\n    variant: \"primary\",\n    size: \"big\",\n    width: \"100%\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"registerBtn\",\n    defaultMessage: \"Continue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 15\n    }\n  }))), loading && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 23\n    }\n  }, intl.formatMessage({\n    id: 'loading',\n    defaultMessage: 'Cargando...'\n  })), (error || errorMessage) && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\",\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 39\n    }\n  }, errorMessage), __jsx(Offer, {\n    style: {\n      padding: '20px 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"alreadyHaveAccount\",\n    defaultMessage: \"Already have an account?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 11\n    }\n  }), ' ', __jsx(LinkButton, {\n    onClick: toggleSignInForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"loginBtnText\",\n    defaultMessage: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }\n  })))));\n}\n\n_s(SignOutModal, \"u/28A3My6HOck4qGsuTgoXN5l/8=\", false, function () {\n  return [useIntl, useMutation];\n});\n\n_c = SignOutModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignOutModal\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/authentication-form/register.tsx"],"names":["React","useContext","Link","useMutation","us","Input","Button","Wrapper","Container","Heading","SubHeading","HelperText","Offer","LinkButton","SubrequirementContainer","Dot","Requirement","AuthContext","FormattedMessage","useIntl","SIGNUP_MUTATION","PhoneInput","SignOutModal","intl","authState","authDispatch","toggleSignInForm","type","toggleOtpForm","useState","phone","setPhone","password","setPassword","name","setName","email","setEmail","repeatPassword","setRepeatPassword","errorMessage","setErrorMessage","onCompleted","data","localStorage","setItem","onError","error","toString","includes","formatMessage","id","defaultMessage","signupMeMutation","loading","handlePhoneChange","value","event","formattedValue","hasMinLength","length","passwordsAreEqual","upperCaseEverything","str","splitStr","toLowerCase","split","i","charAt","toUpperCase","substring","join","setErrorFor5Sec","messageId","setTimeout","e","preventDefault","variables","target","required","autoFocus","textAlign","backgroundColor","height","marginBottom","width","ar","padding","marginTop","color"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport Link from 'next/link';\nimport { useMutation } from '@apollo/react-hooks';\nimport us from 'react-phone-input-2/lang/es.json'\nimport { Input } from 'components/forms/input';\n\nimport {\n  Button,\n  Wrapper,\n  Container,\n  Heading,\n  SubHeading,\n  HelperText,\n  Offer,\n  LinkButton,\n  SubrequirementContainer,\n  Dot,\n  Requirement\n} from './authentication-form.style';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { SIGNUP_MUTATION } from 'graphql/mutation/signup';\nimport PhoneInput from 'react-phone-input-2'\nimport startsWith from 'lodash.startswith';\nimport Router from 'next/router';\n\nexport default function SignOutModal() {\n  const intl = useIntl();\n  const { authState, authDispatch } = useContext<any>(AuthContext);\n  const toggleSignInForm = () => {\n    authDispatch({\n      type: 'SIGNIN',\n    });\n  };\n\n  const toggleOtpForm = () => {\n    authDispatch({\n      type: 'OTP_VERIFICATION',\n    });\n  };\n\n  //signup\n  const [phone, setPhone] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [name, setName] = React.useState('');\n  const [email, setEmail] = React.useState('');\n  const [repeatPassword, setRepeatPassword] = React.useState('');\n  \n  const [errorMessage, setErrorMessage] = React.useState(null);\n\n  const [\n    signupMeMutation,\n    { \n      loading,\n      error\n    }\n  ] = useMutation(SIGNUP_MUTATION,{\n    onCompleted: (data) => {\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('phone_number', `${phone}`);\n        toggleOtpForm();\n      }\n      setErrorMessage(null)\n    },\n    onError: (error) => {\n      setPassword('');\n      setRepeatPassword('');\n      if (error?.toString() && error?.toString().includes('User already registered')) setErrorMessage(intl.formatMessage({ id: 'userAlreadyRegistered', defaultMessage: 'User already registered' }))\n      else if (error?.toString() && error?.toString().includes('Incorrect length')) setErrorMessage(intl.formatMessage({ id: 'atLeast6Char', defaultMessage: 'MÃ­nimo 6 caracteres' }))\n      else setErrorMessage(error?.toString())\n    }\n  });\n\n  const handlePhoneChange = (value, data, event, formattedValue) => {\n    setPhone(value)\n  }\n\n  const hasMinLength = () => {\n    return password.length >= 6;\n  }\n  const passwordsAreEqual = () => {\n    return password === repeatPassword;\n  }\n\n  // private hasSecurity() {\n  //   let securityChecks = 0;\n  //   // @ts-ignore\n  //   securityChecks += this.hasLowerCase() + this.hasUpperCase() + this.hasDigit() + this.hasSpecialChar();\n  //   return securityChecks >= 3;\n  // }\n\n  // private hasLowerCase() {\n  //   return !!this.state.password.match(new RegExp('[a-z]'));\n  // }\n\n  // private hasUpperCase() {\n  //   return !!this.state.password.match(new RegExp('[A-Z]'));\n  // }\n\n  // private hasDigit() {\n  //   return !!this.state.password.match(new RegExp('[0-9]'));\n  // }\n\n  // private hasSpecialChar() {\n  //   return !!this.state.password.match(/[\\~\\`\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\+\\=\\_\\-\\{\\}\\[\\]\\\\|\\:\\;\\\"\\'\\?\\/\\<\\>\\,\\.]/);\n  // }\n\n  const upperCaseEverything = (str) => {\n    var splitStr = str.toLowerCase().split(' ');\n    for (var i = 0; i < splitStr.length; i++) {\n        // You do not need to check if i is larger than splitStr length, as your for does that for you\n        // Assign it back to the array\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     \n    }\n    // Directly return the joined string\n    return splitStr.join(' '); \n }\n\n  const setErrorFor5Sec = (messageId) => {\n    const error = intl.formatMessage({ id: messageId, defaultMessage: 'Please check the form' })\n      setErrorMessage(error)\n      setTimeout(() => setErrorMessage(null), 1500)\n      return null;\n  };\n\n  return (\n    <Wrapper>\n      <Container>\n        <Heading>\n          <FormattedMessage id='signUpBtnText' defaultMessage='Sign Up' />\n        </Heading>\n        <SubHeading>\n          <FormattedMessage\n            id='signUpText'\n            defaultMessage='Every fill is required except for email in sign up. We promess no spam, only purchases confirmations'\n          />\n        </SubHeading>\n          <form method=\"post\" onSubmit={\n            async (e) => {\n                e.preventDefault();\n                if (!passwordsAreEqual()) { setErrorFor5Sec('passShouldBeEqual');return; }\n                \n                await signupMeMutation({\n                  variables: {phone, password, name}\n                });\n              }\n            }\n          >\n            <Input\n              type=\"text\"\n              name=\"name\"\n              width='100%'\n              value={upperCaseEverything(name)}\n              onChange={(e) => setName(upperCaseEverything(e.target.value))}\n              placeholder={intl.formatMessage({\n                id: 'namePlaceholder',\n                defaultMessage: 'Complete name',\n              })}\n              oninvalid=\"this.setCustomValidity('Please Enter valid email')\"\n              oninput=\"setCustomValidity('')\"\n              height='48px'\n              backgroundColor='#F7F7F7'\n              mb='10px'\n              required\n          />\n           <Input\n              type='email'\n              name='email'\n              width='100%'\n              placeholder={intl.formatMessage({ id: 'emailSignUpPlaceholder', defaultMessage: 'Email address' })}\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              backgroundColor='#F7F7F7'\n              marginBottom='10px'\n              // intlInputLabelId=\"profileEmailField\"\n            />\n           {/* <Input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder={intl.formatMessage({\n                id: 'namePlaceholder',\n                defaultMessage: 'DirecciÃ³n de correo',\n              })}\n              oninvalid=\"this.setCustomValidity('Please Enter valid email')\"\n              oninput=\"setCustomValidity('')\"\n              height='48px'\n              backgroundColor='#F7F7F7'\n              mb='10px'\n              required\n            /> */}\n            <PhoneInput\n              inputProps={{\n                name: 'Numero de telefono',\n                required: true,\n                autoFocus: false\n              }}\n              containerStyle={{textAlign: \"left\"}}\n              inputStyle={{backgroundColor: \"#F7F7F7\", height: \"48px\", marginBottom: \"10px\", width: \"100%\"}}\n              onlyCountries={['us']}\n              localization={us}\n              country={'us'}\n              masks={{us: '(...) ...-....'}}\n              country={'us'}\n              masks={{ar: '(...) ...-....'}}\n              value={phone}\n              onChange={handlePhoneChange}\n            />\n            <Input\n              type=\"text\"\n              name=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder={intl.formatMessage({\n                id: 'passwordPlaceholderRegister',\n                defaultMessage: 'Password (min 6 characters)',\n              })}\n              height='48px'\n              width='100%'\n              backgroundColor='#F7F7F7'\n              mb='10px'\n              required\n            />\n            <Input\n              type=\"text\"\n              name=\"password\"\n              width='100%'\n              value={repeatPassword}\n              onChange={(e) => setRepeatPassword(e.target.value)}\n              placeholder={intl.formatMessage({\n                id: 'passwordRepeatPlaceholder',\n                defaultMessage: 'Password (min 6 characters)',\n              })}\n              height='48px'\n              backgroundColor='#F7F7F7'\n              mb='10px'\n              required\n            />\n             {!hasMinLength && (\n              <SubrequirementContainer>\n                <Dot />\n                <Requirement>{intl.formatMessage({ id: 'atLeast6Char', defaultMessage: 'At least 6 characters' })}</Requirement>\n              </SubrequirementContainer>\n            )}\n\n             {!passwordsAreEqual && (\n              <SubrequirementContainer>\n                <Dot />\n                <Requirement>{intl.formatMessage({ id: 'passShouldBeEqual', defaultMessage: 'Passwords does not match' })}</Requirement>\n              </SubrequirementContainer>\n            )}\n            {/*\n            {!this.hasSecurity() && (\n              <div>\n                <SubrequirementContainer>\n                  <Dot />\n                  <Requirement>{lang.t('CHANGE_PASSWORD.AT_LEAST_CATEGORIES')}</Requirement>\n                </SubrequirementContainer>\n                {!this.hasLowerCase() && (\n                  <SubrequirementContainer>\n                    <Dot />\n                    <Requirement>{lang.t('CHANGE_PASSWORD.LOWERCASE_LETTER')}</Requirement>\n                  </SubrequirementContainer>\n                )}\n                {!this.hasUpperCase() && (\n                  <SubrequirementContainer>\n                    <Dot />\n                    <Requirement>{lang.t('CHANGE_PASSWORD.UPPERCASE_LETTR')}</Requirement>\n                  </SubrequirementContainer>\n                )}\n                {!this.hasDigit() && (\n                  <SubrequirementContainer>\n                    <Dot />\n                    <Requirement>{lang.t('CHANGE_PASSWORD.DIGIT')}</Requirement>\n                  </SubrequirementContainer>\n                )}\n                {!this.hasSpecialChar() && (\n                  <SubrequirementContainer>\n                    <Dot />\n                    <Requirement>{lang.t('CHANGE_PASSWORD.SPECIAL_CHAR')}</Requirement>\n                  </SubrequirementContainer>\n                )}\n                </div>\n              )} */}\n            <HelperText style={{ padding: '20px 0 30px' }}>\n              <FormattedMessage\n                id='tramsText'\n                defaultMessage=\"By signing up, you agree to Ditto's\"\n              />\n              &nbsp;\n              <Link href='/terms'>\n                <a>\n                  <FormattedMessage\n                    id='termsConditionText'\n                    defaultMessage='Terms &amp; Conditions'\n                  />\n                </a>\n              </Link>\n            </HelperText>\n            <Button variant='primary' size='big' width='100%' type='submit'>\n              <FormattedMessage id='registerBtn' defaultMessage='Continue' />\n            </Button>\n          </form>\n          {loading && <p style={{\n            marginTop: \"15px\"\n          }}>{intl.formatMessage({ id: 'loading', defaultMessage: 'Cargando...' })}</p>}\n          {(error || errorMessage) && <p style={{\n            marginTop: \"15px\",\n            color: \"red\"\n          }}>{errorMessage}</p>}\n        <Offer style={{ padding: '20px 0' }}>\n          <FormattedMessage\n            id='alreadyHaveAccount'\n            defaultMessage='Already have an account?'\n          />{' '}\n          <LinkButton onClick={toggleSignInForm}>\n            <FormattedMessage id='loginBtnText' defaultMessage='Login' />\n          </LinkButton>\n        </Offer>\n      </Container>\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}