{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { CartPopupBody, PopupHeader, PopupItemCount, CloseButton, CheckoutButtonWrapper, CheckoutButton, Title, TitleDisabled, PriceBox, NoProductMsg, NoProductImg, ItemWrapper, ProductQuantityExceededMsg, MinOrderText } from './cart.style';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { ShoppingBagLarge } from 'assets/icons/ShoppingBagLarge';\nimport { NoCartBag } from 'assets/icons/NoCartBag';\nimport { CURRENCY } from 'utils/constant';\nimport { FormattedMessage } from 'react-intl';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useCart } from 'contexts/cart/use-cart';\nimport { CartItem } from 'components/cart-item/cart-item';\n\nvar Cart = function Cart(_ref) {\n  var style = _ref.style,\n      className = _ref.className,\n      onCloseBtnClick = _ref.onCloseBtnClick,\n      scrollbarHeight = _ref.scrollbarHeight;\n\n  var _useCart = useCart(),\n      items = _useCart.items,\n      coupon = _useCart.coupon,\n      addItem = _useCart.addItem,\n      removeItem = _useCart.removeItem,\n      removeItemFromCart = _useCart.removeItemFromCart,\n      cartItemsCount = _useCart.cartItemsCount,\n      calculatePrice = _useCart.calculatePrice,\n      applyCoupon = _useCart.applyCoupon;\n\n  var _useState = useState(''),\n      couponText = _useState[0],\n      setCoupon = _useState[1];\n\n  var _useState2 = useState(false),\n      displayCoupon = _useState2[0],\n      showCoupon = _useState2[1];\n\n  var _useState3 = useState(false),\n      showProductQuantityExceededMsg = _useState3[0],\n      setShowProductQuantityExceededMsg = _useState3[1];\n\n  var _useState4 = useState(''),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useLocale = useLocale(),\n      isRtl = _useLocale.isRtl;\n\n  var totalPrice = calculatePrice();\n\n  var handleChange = function handleChange(e) {\n    setCoupon(e.currentTarget.value);\n  };\n\n  var showProductQuantityExceededMsgFor5Sec = function showProductQuantityExceededMsgFor5Sec() {\n    setShowProductQuantityExceededMsg(true);\n    setTimeout(function () {\n      setShowProductQuantityExceededMsg(false);\n    }, 1500);\n  };\n\n  var addOneMore = function addOneMore(item) {\n    item.quantity < item.product_quantity ? addItem(item) : showProductQuantityExceededMsgFor5Sec();\n  };\n\n  var toggleCoupon = function toggleCoupon() {\n    showCoupon(true);\n  };\n\n  return __jsx(CartPopupBody, {\n    className: className,\n    style: style\n  }, __jsx(PopupHeader, null, __jsx(PopupItemCount, null, __jsx(ShoppingBagLarge, {\n    width: \"19px\",\n    height: \"24px\"\n  }), __jsx(\"span\", null, cartItemsCount, \"\\xA0\", cartItemsCount > 1 ? __jsx(FormattedMessage, {\n    id: \"cartItems\",\n    defaultMessage: \"items\"\n  }) : __jsx(FormattedMessage, {\n    id: \"cartItem\",\n    defaultMessage: \"item\"\n  }))), __jsx(CloseButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(CloseIcon, null))), __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: scrollbarHeight,\n    renderView: function renderView(props) {\n      return __jsx(\"div\", _extends({}, props, {\n        style: _objectSpread(_objectSpread({}, props.style), {}, {\n          marginLeft: isRtl ? props.style.marginRight : 0,\n          marginRight: isRtl ? 0 : props.style.marginRight\n        })\n      }));\n    }\n  }, __jsx(ItemWrapper, {\n    className: \"items-wrapper\"\n  }, showProductQuantityExceededMsg && __jsx(ProductQuantityExceededMsg, null, __jsx(FormattedMessage, {\n    id: \"productStockLimit\",\n    defaultMessage: \"There is no more availability of this product\"\n  })), !!cartItemsCount ? items.map(function (item) {\n    return __jsx(CartItem, {\n      key: \"cartItem-\".concat(item.id),\n      onIncrement: function onIncrement() {\n        return addItem(item);\n      },\n      onDecrement: function onDecrement() {\n        return item.quantity === 1 ? removeItemFromCart(item) : removeItem(item);\n      },\n      onRemove: function onRemove() {\n        return removeItemFromCart(item);\n      },\n      data: item\n    });\n  }) : __jsx(React.Fragment, null, __jsx(NoProductImg, null, __jsx(NoCartBag, null)), __jsx(NoProductMsg, null, __jsx(FormattedMessage, {\n    id: \"noProductFound\",\n    defaultMessage: \"No products found\"\n  }))))), __jsx(CheckoutButtonWrapper, null, cartItemsCount !== 0 ? __jsx(React.Fragment, null, totalPrice > 10 ? __jsx(Link, {\n    href: \"/checkout\"\n  }, __jsx(CheckoutButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(React.Fragment, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, totalPrice)))) : __jsx(React.Fragment, null, __jsx(MinOrderText, null, \"Add at least $\".concat(Number(10 - totalPrice).toFixed(2), \" to reach the order minimum of $10.00\")), __jsx(CheckoutButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(React.Fragment, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"navlinkChecko\",\n    defaultMessage: \"Continue shopping\"\n  })), __jsx(PriceBox, null, CURRENCY, totalPrice))))) : __jsx(CheckoutButton, null, __jsx(React.Fragment, null, __jsx(TitleDisabled, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, totalPrice)))));\n};\n\nexport default Cart;","map":null,"metadata":{},"sourceType":"module"}