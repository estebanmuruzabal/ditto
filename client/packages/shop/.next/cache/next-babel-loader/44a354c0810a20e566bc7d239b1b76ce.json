{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { BannerIcon, BannerText, CardWrapper, Container, DeliveryMethods, DeliveryText, Heading, Input, LocationContent, Offer, OfferSection, Options, SubHeaderWrapper, Wrapper } from './sub-header.style';\nimport { useLocale } from 'contexts/language/language.provider';\nimport DeliveryIcon from 'assets/images/locationIcon.webp';\nimport { useMedia } from 'utils/use-media';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport PopoverBigger from 'components/popover-bigger/popover-bigger';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleDown, faChevronCircleUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { DeliveryMethodsConstants } from 'utils/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { DELIVERY_METHOD } from 'graphql/query/delivery';\nimport { GiftBox } from 'assets/icons/GiftBox';\nimport Checkbox from 'components/checkbox/checkbox';\nimport { getCookie, setCookie } from 'utils/session';\n\nconst LocationMenu = ({\n  deliveryMethodSaved,\n  isOpen\n}) => {\n  var _deliveryMethodSaved$, _deliveryMethodSaved$2, _deliveryMethodSaved$3, _deliveryMethodSaved$4, _deliveryMethodSaved$5, _deliveryMethodSaved$6, _deliveryMethodSaved$7, _deliveryMethodSaved$8, _deliveryMethodSaved$9;\n\n  const mobile = useMedia('(max-width: 580px)');\n  const address = mobile ? deliveryMethodSaved === null || deliveryMethodSaved === void 0 ? void 0 : (_deliveryMethodSaved$ = deliveryMethodSaved.details) === null || _deliveryMethodSaved$ === void 0 ? void 0 : (_deliveryMethodSaved$2 = _deliveryMethodSaved$.split('|')) === null || _deliveryMethodSaved$2 === void 0 ? void 0 : _deliveryMethodSaved$2[0].substring(0, (deliveryMethodSaved === null || deliveryMethodSaved === void 0 ? void 0 : (_deliveryMethodSaved$3 = deliveryMethodSaved.details) === null || _deliveryMethodSaved$3 === void 0 ? void 0 : (_deliveryMethodSaved$4 = _deliveryMethodSaved$3.split('|')) === null || _deliveryMethodSaved$4 === void 0 ? void 0 : (_deliveryMethodSaved$5 = _deliveryMethodSaved$4[0]) === null || _deliveryMethodSaved$5 === void 0 ? void 0 : _deliveryMethodSaved$5.length) - 6) : deliveryMethodSaved === null || deliveryMethodSaved === void 0 ? void 0 : (_deliveryMethodSaved$6 = deliveryMethodSaved.details) === null || _deliveryMethodSaved$6 === void 0 ? void 0 : (_deliveryMethodSaved$7 = _deliveryMethodSaved$6.split('|')) === null || _deliveryMethodSaved$7 === void 0 ? void 0 : _deliveryMethodSaved$7[0];\n  const time = deliveryMethodSaved === null || deliveryMethodSaved === void 0 ? void 0 : (_deliveryMethodSaved$8 = deliveryMethodSaved.details) === null || _deliveryMethodSaved$8 === void 0 ? void 0 : (_deliveryMethodSaved$9 = _deliveryMethodSaved$8.split('|')) === null || _deliveryMethodSaved$9 === void 0 ? void 0 : _deliveryMethodSaved$9[1];\n  const intl = useIntl();\n  const defaultText = intl.formatMessage({\n    id: 'defaultDeliveryPickupText',\n    defaultMessage: 'check here'\n  });\n  return __jsx(LocationContent, null, isOpen ? __jsx(FontAwesomeIcon, {\n    icon: faChevronCircleDown,\n    className: \"fas fa-chevron-down\",\n    style: {\n      color: \"black\"\n    }\n  }) : __jsx(FontAwesomeIcon, {\n    icon: faChevronCircleUp,\n    className: \"fas fa-chevron-up\",\n    style: {\n      color: \"black\"\n    }\n  }), __jsx(DeliveryText, null, deliveryMethodSaved ? (deliveryMethodSaved === null || deliveryMethodSaved === void 0 ? void 0 : deliveryMethodSaved.isPickUp) ? DeliveryMethodsConstants.PICKUP : DeliveryMethodsConstants.DELIVERY : defaultText), (deliveryMethodSaved === null || deliveryMethodSaved === void 0 ? void 0 : deliveryMethodSaved.name) && address && __jsx(React.Fragment, null, \"|\", __jsx(BannerIcon, null, __jsx(\"img\", {\n    src: DeliveryIcon,\n    alt: \"\"\n  })), __jsx(BannerText, null, `${deliveryMethodSaved.name} - ${address}`)));\n};\n\nconst SubHeader = (_ref) => {\n  var _deliverData$delivery;\n\n  let props = Object.assign({}, _ref);\n  const {\n    location\n  } = useLocale();\n  const mobile = useMedia('(max-width: 580px)');\n  const intl = useIntl();\n  const [deliveryMethodTypeSelected, setDeliveryMethodType] = React.useState();\n  const [deliveryMethodSaved, setDeliveryMethodSaved] = React.useState();\n  const [deliveryMethodSelected, setDeliveryMethod] = React.useState(undefined);\n  const {\n    data: deliverData\n  } = useQuery(DELIVERY_METHOD);\n  const deliveryMethods = deliverData === null || deliverData === void 0 ? void 0 : (_deliverData$delivery = deliverData.deliveryMethods) === null || _deliverData$delivery === void 0 ? void 0 : _deliverData$delivery.items; // const [address, setDeliveryAddress] = useState(\"\");\n\n  const [zipCode, setZipCode] = React.useState('');\n  const [searchResult, setSearchResult] = React.useState([]);\n  useEffect(() => {\n    if (getCookie('deliveryMethodSaved') && !deliveryMethodSaved) {\n      const deliveryMethodSaved = JSON.parse(getCookie('deliveryMethodSaved'));\n      setDeliveryMethodSaved(deliveryMethodSaved);\n    }\n  }, []);\n\n  const setDeliveryMethodAndSaveCookie = deli => {\n    setDeliveryMethod(deli);\n    setDeliveryMethodSaved(deli); // if (getCookie('first_visit')) {\n\n    setCookie('deliveryMethodSaved', deli); // }\n  };\n\n  const searchDeliveryZipCode = (e, deli) => {\n    handleOnFocus(e);\n    setZipCode(deli);\n    const deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(deliveryMethod => {\n      return !deliveryMethod.isPickUp;\n    });\n    const methodFound = deliveryOptionsMethods.filter(method => method.name.includes(zipCode));\n    e.stopPropagation();\n    setSearchResult(deli ? methodFound : null);\n  };\n\n  const searchPickupZipCode = (e, deli) => {\n    handleOnFocus(e);\n    setZipCode(deli);\n    const pickUpOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(deliveryMethod => {\n      return deliveryMethod.isPickUp === true;\n    });\n    const methodFound = pickUpOptionsMethods.filter(method => method.details.includes(zipCode));\n    e.stopPropagation();\n    setSearchResult(deli ? methodFound : null);\n  };\n\n  const setDelivery = (e, deli) => {\n    e.stopPropagation();\n    setDeliveryMethodType(deli);\n    setSearchResult(null);\n    setZipCode('');\n  };\n\n  const handleOnFocus = event => {\n    event.preventDefault();\n    event.stopPropagation();\n  }; // deliveryMethodSelected\n\n\n  const isPickUpSelected = deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP;\n  const isDeliverySelected = deliveryMethodTypeSelected === DeliveryMethodsConstants.DELIVERY;\n  return __jsx(SubHeaderWrapper, {\n    className: props.className,\n    id: \"layout-header\"\n  }, __jsx(PopoverBigger, {\n    direction: \"left\",\n    className: \"user-pages-dropdown\",\n    openHandler: __jsx(LocationMenu, {\n      isOpen: false,\n      deliveryMethodSaved: deliveryMethodSaved\n    }),\n    closeHandler: __jsx(LocationMenu, {\n      isOpen: true,\n      deliveryMethodSaved: deliveryMethodSaved\n    }),\n    content: __jsx(DeliveryMethods, null, __jsx(Options, null, __jsx(CardWrapper, {\n      color: isPickUpSelected ? '#0d1136' : '#e4f4fc',\n      onClick: e => setDelivery(e, DeliveryMethodsConstants.PICKUP)\n    }, \"Pickup\"), __jsx(CardWrapper, {\n      color: isDeliverySelected ? '#0d1136' : '#e4f4fc',\n      onClick: e => setDelivery(e, DeliveryMethodsConstants.DELIVERY)\n    }, \"Delivery\")), __jsx(Wrapper, null, __jsx(Container, null, __jsx(Heading, {\n      onClick: e => handleOnFocus(e)\n    }, isPickUpSelected ? __jsx(FormattedMessage, {\n      id: \"pickupModalheading\",\n      defaultMessage: \"Select Your Location\"\n    }) : __jsx(FormattedMessage, {\n      id: \"deliveryModalheading\",\n      defaultMessage: \"Select Your Location\"\n    })), __jsx(\"div\", {\n      onClick: e => handleOnFocus(e)\n    }, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      onFocus: e => handleOnFocus(e),\n      placeholder: \"ZIP Code\",\n      value: zipCode // we have to change the onChange because the is no one for the controller name actualy\n      ,\n      onChange: e => isPickUpSelected ? searchPickupZipCode(e, e.target.value) : searchDeliveryZipCode(e, e.target.value),\n      width: \"197px\",\n      height: \"34.5px\"\n    })), (searchResult === null || searchResult === void 0 ? void 0 : searchResult.length) === 0 && zipCode.length > 4 && __jsx(DeliveryText, null, deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP ? 'No Dittos Pickup Locations found, yet, sorry' : 'Sorry, we dont deliver there, yet..'), (searchResult === null || searchResult === void 0 ? void 0 : searchResult.length) ? searchResult.map((result, i) => {\n      return __jsx(Checkbox, {\n        keyName: `${i}-results`,\n        isChecked: (deliveryMethodSelected === null || deliveryMethodSelected === void 0 ? void 0 : deliveryMethodSelected.id) === result.id,\n        labelText: `${result.name} - ${result.details}`,\n        id: `result-${i}`,\n        onChange: e => {\n          setDeliveryMethodAndSaveCookie((deliveryMethodSelected === null || deliveryMethodSelected === void 0 ? void 0 : deliveryMethodSelected.id) === result.id ? null : result);\n        }\n      });\n    }) : ''), __jsx(OfferSection, null, __jsx(GiftBox, null), __jsx(Offer, null, __jsx(FormattedMessage, {\n      id: \"locationModalFooter\",\n      defaultMessage: \"Free Delivery For 1st Order\",\n      values: {\n        number: 1\n      }\n    })))))\n  }));\n};\n\nexport default SubHeader;","map":null,"metadata":{},"sourceType":"module"}