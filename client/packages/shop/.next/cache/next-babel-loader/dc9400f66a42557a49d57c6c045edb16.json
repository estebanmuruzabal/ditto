{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/authentication-form/register.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Link from 'next/link';\nimport { useMutation } from '@apollo/react-hooks'; // import us from 'react-phone-input-2/lang/es.json'\n\nimport ar from 'react-phone-input-2/lang/es.json';\nimport { Input } from 'components/forms/input';\nimport { Button, Wrapper, Container, Heading, HelperText, Offer, LinkButton, SubrequirementContainer, Dot, Requirement } from './authentication-form.style';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { SIGNUP_MUTATION } from 'graphql/mutation/signup';\nimport PhoneInput from 'react-phone-input-2';\nimport { currentLng } from 'utils/constant';\nexport default function SignOutModal() {\n  const intl = useIntl();\n  const {\n    authState,\n    authDispatch\n  } = useContext(AuthContext);\n\n  const toggleSignInForm = () => {\n    authDispatch({\n      type: 'SIGNIN'\n    });\n  };\n\n  const toggleOtpForm = () => {\n    authDispatch({\n      type: 'OTP_VERIFICATION'\n    });\n  }; //signup\n\n\n  const [phone, setPhone] = React.useState('');\n  const [password, setPassword] = React.useState('123456');\n  const [name, setName] = React.useState('');\n  const [email, setEmail] = React.useState('');\n  const [repeatPassword, setRepeatPassword] = React.useState('');\n  const [errorMessage, setErrorMessage] = React.useState(null);\n  const [signupMeMutation, {\n    loading,\n    error\n  }] = useMutation(SIGNUP_MUTATION, {\n    onCompleted: data => {\n      if (false) {\n        localStorage.setItem('phone_number', `${phone}`);\n        toggleOtpForm();\n      }\n\n      setErrorMessage(null);\n    },\n    onError: error => {\n      setPassword('');\n      setRepeatPassword('');\n      if ((error === null || error === void 0 ? void 0 : error.toString()) && (error === null || error === void 0 ? void 0 : error.toString().includes('User already registered'))) setErrorMessage(intl.formatMessage({\n        id: 'userAlreadyRegistered',\n        defaultMessage: 'User already registered'\n      }));else if ((error === null || error === void 0 ? void 0 : error.toString()) && (error === null || error === void 0 ? void 0 : error.toString().includes('Incorrect length'))) setErrorMessage(intl.formatMessage({\n        id: 'atLeast6Char',\n        defaultMessage: 'MÃ­nimo 6 caracteres'\n      }));else setErrorMessage(error === null || error === void 0 ? void 0 : error.toString());\n    }\n  });\n\n  const handlePhoneChange = (value, data, event, formattedValue) => {\n    setPhone(value);\n  };\n\n  const hasMinLength = () => {\n    return password.length >= 6;\n  };\n\n  const passwordsAreEqual = () => {\n    return password === repeatPassword;\n  };\n\n  const startsWith54 = () => {\n    return password[0] === '5' && password[1] === '4';\n  }; // private hasSecurity() {\n  //   let securityChecks = 0;\n  //   // @ts-ignore\n  //   securityChecks += this.hasLowerCase() + this.hasUpperCase() + this.hasDigit() + this.hasSpecialChar();\n  //   return securityChecks >= 3;\n  // }\n  // private hasLowerCase() {\n  //   return !!this.state.password.match(new RegExp('[a-z]'));\n  // }\n  // private hasUpperCase() {\n  //   return !!this.state.password.match(new RegExp('[A-Z]'));\n  // }\n  // private hasDigit() {\n  //   return !!this.state.password.match(new RegExp('[0-9]'));\n  // }\n  // private hasSpecialChar() {\n  //   return !!this.state.password.match(/[\\~\\`\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\+\\=\\_\\-\\{\\}\\[\\]\\\\|\\:\\;\\\"\\'\\?\\/\\<\\>\\,\\.]/);\n  // }\n\n\n  const upperCaseEverything = str => {\n    var splitStr = str.toLowerCase().split(' ');\n\n    for (var i = 0; i < splitStr.length; i++) {\n      // You do not need to check if i is larger than splitStr length, as your for does that for you\n      // Assign it back to the array\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    } // Directly return the joined string\n\n\n    return splitStr.join(' ');\n  };\n\n  const setErrorFor5Sec = messageId => {\n    const error = intl.formatMessage({\n      id: messageId,\n      defaultMessage: 'Please check the form'\n    });\n    setErrorMessage(error);\n    setTimeout(() => setErrorMessage(null), 1500);\n    return null;\n  };\n\n  return __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"completeBtnText\",\n    defaultMessage: \"Sign Up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  })), __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: async e => {\n      e.preventDefault(); // if (!passwordsAreEqual()) { setErrorFor5Sec('passShouldBeEqual');return; }\n\n      await signupMeMutation({\n        variables: {\n          phone,\n          password,\n          name\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    width: \"100%\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    placeholder: intl.formatMessage({\n      id: 'namePlaceholder',\n      defaultMessage: 'Complete name'\n    }),\n    oninvalid: \"this.setCustomValidity('Please Enter valid name')\",\n    oninput: \"setCustomValidity('')\",\n    height: \"48px\",\n    backgroundColor: \"#F7F7F7\",\n    mb: \"10px\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }), __jsx(PhoneInput, {\n    inputProps: {\n      name: 'Numero de telefono',\n      required: true,\n      autoFocus: false\n    },\n    containerStyle: {\n      textAlign: \"left\"\n    },\n    inputStyle: {\n      backgroundColor: \"#F7F7F7\",\n      height: \"48px\",\n      marginBottom: \"10px\",\n      width: \"100%\"\n    },\n    onlyCountries: [currentLng],\n    localization: ar,\n    country: currentLng,\n    masks: {\n      ar: '(...) ...-....'\n    },\n    value: phone,\n    onChange: handlePhoneChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }), !startsWith54 && __jsx(SubrequirementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 15\n    }\n  }, __jsx(Dot, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }), __jsx(Requirement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, intl.formatMessage({\n    id: 'passShouldBeEqual',\n    defaultMessage: 'Passwords does not match'\n  }))), __jsx(HelperText, {\n    style: {\n      padding: '20px 0 30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"tramsText\",\n    defaultMessage: \"By signing up, you agree to Ditto's\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 15\n    }\n  }), \"\\xA0\", __jsx(Link, {\n    href: \"/terms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 15\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"termsConditionText\",\n    defaultMessage: \"Terms & Conditions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 19\n    }\n  })))), __jsx(Button, {\n    variant: \"primary\",\n    size: \"big\",\n    width: \"100%\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }\n  }, loading ? __jsx(FormattedMessage, {\n    id: \"loadingBtn\",\n    defaultMessage: \"Continue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 26\n    }\n  }) : __jsx(FormattedMessage, {\n    id: \"registerBtn\",\n    defaultMessage: \"Continue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 91\n    }\n  }))), (error || errorMessage) && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\",\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 39\n    }\n  }, errorMessage), __jsx(Offer, {\n    style: {\n      padding: '20px 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"alreadyHaveAccount\",\n    defaultMessage: \"Already have an account?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 11\n    }\n  }), ' ', __jsx(LinkButton, {\n    onClick: toggleSignInForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"loginBtnText\",\n    defaultMessage: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/authentication-form/register.tsx"],"names":["React","useContext","Link","useMutation","ar","Input","Button","Wrapper","Container","Heading","HelperText","Offer","LinkButton","SubrequirementContainer","Dot","Requirement","AuthContext","FormattedMessage","useIntl","SIGNUP_MUTATION","PhoneInput","currentLng","SignOutModal","intl","authState","authDispatch","toggleSignInForm","type","toggleOtpForm","phone","setPhone","useState","password","setPassword","name","setName","email","setEmail","repeatPassword","setRepeatPassword","errorMessage","setErrorMessage","signupMeMutation","loading","error","onCompleted","data","localStorage","setItem","onError","toString","includes","formatMessage","id","defaultMessage","handlePhoneChange","value","event","formattedValue","hasMinLength","length","passwordsAreEqual","startsWith54","upperCaseEverything","str","splitStr","toLowerCase","split","i","charAt","toUpperCase","substring","join","setErrorFor5Sec","messageId","setTimeout","e","preventDefault","variables","target","required","autoFocus","textAlign","backgroundColor","height","marginBottom","width","padding","marginTop","color"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport Link from 'next/link';\nimport { useMutation } from '@apollo/react-hooks';\n// import us from 'react-phone-input-2/lang/es.json'\nimport ar from 'react-phone-input-2/lang/es.json'\nimport { Input } from 'components/forms/input';\n\nimport {\n  Button,\n  Wrapper,\n  Container,\n  Heading,\n  SubHeading,\n  HelperText,\n  Offer,\n  LinkButton,\n  SubrequirementContainer,\n  Dot,\n  Requirement\n} from './authentication-form.style';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { SIGNUP_MUTATION } from 'graphql/mutation/signup';\nimport PhoneInput from 'react-phone-input-2'\nimport { currentLng } from 'utils/constant';\n\nexport default function SignOutModal() {\n  const intl = useIntl();\n  const { authState, authDispatch } = useContext<any>(AuthContext);\n  const toggleSignInForm = () => {\n    authDispatch({\n      type: 'SIGNIN',\n    });\n  };\n\n  const toggleOtpForm = () => {\n    authDispatch({\n      type: 'OTP_VERIFICATION',\n    });\n  };\n\n  //signup\n  const [phone, setPhone] = React.useState('');\n  const [password, setPassword] = React.useState('123456');\n  const [name, setName] = React.useState('');\n  const [email, setEmail] = React.useState('');\n  const [repeatPassword, setRepeatPassword] = React.useState('');\n  \n  const [errorMessage, setErrorMessage] = React.useState(null);\n\n  const [\n    signupMeMutation,\n    { \n      loading,\n      error\n    }\n  ] = useMutation(SIGNUP_MUTATION,{\n    \n    onCompleted: (data) => {\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('phone_number', `${phone}`);\n        toggleOtpForm();\n      }\n      setErrorMessage(null)\n    },\n    onError: (error) => {\n      setPassword('');\n      setRepeatPassword('');\n      if (error?.toString() && error?.toString().includes('User already registered')) setErrorMessage(intl.formatMessage({ id: 'userAlreadyRegistered', defaultMessage: 'User already registered' }))\n      else if (error?.toString() && error?.toString().includes('Incorrect length')) setErrorMessage(intl.formatMessage({ id: 'atLeast6Char', defaultMessage: 'MÃ­nimo 6 caracteres' }))\n      else setErrorMessage(error?.toString())\n    }\n  });\n\n  const handlePhoneChange = (value, data, event, formattedValue) => {\n    setPhone(value)\n  }\n\n  const hasMinLength = () => {\n    return password.length >= 6;\n  }\n  const passwordsAreEqual = () => {\n    return password === repeatPassword;\n  }\n\n  const startsWith54 = () => {\n    return password[0] === '5' && password[1] === '4';\n  }\n\n  // private hasSecurity() {\n  //   let securityChecks = 0;\n  //   // @ts-ignore\n  //   securityChecks += this.hasLowerCase() + this.hasUpperCase() + this.hasDigit() + this.hasSpecialChar();\n  //   return securityChecks >= 3;\n  // }\n\n  // private hasLowerCase() {\n  //   return !!this.state.password.match(new RegExp('[a-z]'));\n  // }\n\n  // private hasUpperCase() {\n  //   return !!this.state.password.match(new RegExp('[A-Z]'));\n  // }\n\n  // private hasDigit() {\n  //   return !!this.state.password.match(new RegExp('[0-9]'));\n  // }\n\n  // private hasSpecialChar() {\n  //   return !!this.state.password.match(/[\\~\\`\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\+\\=\\_\\-\\{\\}\\[\\]\\\\|\\:\\;\\\"\\'\\?\\/\\<\\>\\,\\.]/);\n  // }\n\n  const upperCaseEverything = (str) => {\n    var splitStr = str.toLowerCase().split(' ');\n    for (var i = 0; i < splitStr.length; i++) {\n        // You do not need to check if i is larger than splitStr length, as your for does that for you\n        // Assign it back to the array\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     \n    }\n    // Directly return the joined string\n    return splitStr.join(' '); \n }\n\n  const setErrorFor5Sec = (messageId) => {\n    const error = intl.formatMessage({ id: messageId, defaultMessage: 'Please check the form' })\n      setErrorMessage(error)\n      setTimeout(() => setErrorMessage(null), 1500)\n      return null;\n  };\n\n  return (\n    <Wrapper>\n      <Container>\n        <Heading>\n          <FormattedMessage id='completeBtnText' defaultMessage='Sign Up' />\n        </Heading>\n        {/* <SubHeading>\n          <FormattedMessage\n            id='signUpText'\n            defaultMessage=''\n          />\n        </SubHeading> */}\n          <form method=\"post\" onSubmit={\n            async (e) => {\n                e.preventDefault();\n                // if (!passwordsAreEqual()) { setErrorFor5Sec('passShouldBeEqual');return; }\n                \n                await signupMeMutation({\n                  variables: {phone, password, name}\n                });\n              }\n            }\n          >\n            <Input\n              type=\"text\"\n              name=\"name\"\n              width='100%'\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder={intl.formatMessage({\n                id: 'namePlaceholder',\n                defaultMessage: 'Complete name',\n              })}\n              oninvalid=\"this.setCustomValidity('Please Enter valid name')\"\n              oninput=\"setCustomValidity('')\"\n              height='48px'\n              backgroundColor='#F7F7F7'\n              mb='10px'\n              required\n          />\n           {/* <Input\n              type='email'\n              name='email'\n              width='100%'\n              placeholder={intl.formatMessage({ id: 'emailSignUpPlaceholder', defaultMessage: 'Email address' })}\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              backgroundColor='#F7F7F7'\n              marginBottom='10px'\n              required\n              // intlInputLabelId=\"profileEmailField\"\n            /> */}\n           {/* <Input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder={intl.formatMessage({\n                id: 'namePlaceholder',\n                defaultMessage: 'DirecciÃ³n de correo',\n              })}\n              oninvalid=\"this.setCustomValidity('Please Enter valid email')\"\n              oninput=\"setCustomValidity('')\"\n              height='48px'\n              backgroundColor='#F7F7F7'\n              mb='10px'\n              required\n            /> */}\n            <PhoneInput\n              inputProps={{\n                name: 'Numero de telefono',\n                required: true,\n                autoFocus: false\n              }}\n              containerStyle={{textAlign: \"left\"}}\n              inputStyle={{backgroundColor: \"#F7F7F7\", height: \"48px\", marginBottom: \"10px\", width: \"100%\"}}\n              onlyCountries={[currentLng]}\n              localization={ar}\n              country={currentLng}\n              masks={{ar: '(...) ...-....'}}\n              value={phone}\n              onChange={handlePhoneChange}\n            />\n            {!startsWith54 && (\n              <SubrequirementContainer>\n                <Dot />\n                <Requirement>{intl.formatMessage({ id: 'passShouldBeEqual', defaultMessage: 'Passwords does not match' })}</Requirement>\n              </SubrequirementContainer>\n            )}\n            \n            {/* <Input\n              type=\"text\"\n              name=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder={intl.formatMessage({\n                id: 'passwordPlaceholderRegister',\n                defaultMessage: 'Password (min 6 characters)',\n              })}\n              height='48px'\n              width='100%'\n              backgroundColor='#F7F7F7'\n              mb='10px'\n              required\n            />\n            <Input\n              type=\"text\"\n              name=\"password\"\n              width='100%'\n              value={repeatPassword}\n              onChange={(e) => setRepeatPassword(e.target.value)}\n              placeholder={intl.formatMessage({\n                id: 'passwordRepeatPlaceholder',\n                defaultMessage: 'Password (min 6 characters)',\n              })}\n              height='48px'\n              backgroundColor='#F7F7F7'\n              mb='10px'\n              required\n            />\n             {!hasMinLength && (\n              <SubrequirementContainer>\n                <Dot />\n                <Requirement>{intl.formatMessage({ id: 'atLeast6Char', defaultMessage: 'At least 6 characters' })}</Requirement>\n              </SubrequirementContainer>\n            )}\n\n             {!passwordsAreEqual && (\n              <SubrequirementContainer>\n                <Dot />\n                <Requirement>{intl.formatMessage({ id: 'passShouldBeEqual', defaultMessage: 'Passwords does not match' })}</Requirement>\n              </SubrequirementContainer>\n            )} */}\n            {/*\n            {!this.hasSecurity() && (\n              <div>\n                <SubrequirementContainer>\n                  <Dot />\n                  <Requirement>{lang.t('CHANGE_PASSWORD.AT_LEAST_CATEGORIES')}</Requirement>\n                </SubrequirementContainer>\n                {!this.hasLowerCase() && (\n                  <SubrequirementContainer>\n                    <Dot />\n                    <Requirement>{lang.t('CHANGE_PASSWORD.LOWERCASE_LETTER')}</Requirement>\n                  </SubrequirementContainer>\n                )}\n                {!this.hasUpperCase() && (\n                  <SubrequirementContainer>\n                    <Dot />\n                    <Requirement>{lang.t('CHANGE_PASSWORD.UPPERCASE_LETTR')}</Requirement>\n                  </SubrequirementContainer>\n                )}\n                {!this.hasDigit() && (\n                  <SubrequirementContainer>\n                    <Dot />\n                    <Requirement>{lang.t('CHANGE_PASSWORD.DIGIT')}</Requirement>\n                  </SubrequirementContainer>\n                )}\n                {!this.hasSpecialChar() && (\n                  <SubrequirementContainer>\n                    <Dot />\n                    <Requirement>{lang.t('CHANGE_PASSWORD.SPECIAL_CHAR')}</Requirement>\n                  </SubrequirementContainer>\n                )}\n                </div>\n              )} */}\n            <HelperText style={{ padding: '20px 0 30px' }}>\n              <FormattedMessage\n                id='tramsText'\n                defaultMessage=\"By signing up, you agree to Ditto's\"\n              />\n              &nbsp;\n              <Link href='/terms'>\n                <a>\n                  <FormattedMessage\n                    id='termsConditionText'\n                    defaultMessage='Terms &amp; Conditions'\n                  />\n                </a>\n              </Link>\n            </HelperText>\n            <Button variant='primary' size='big' width='100%' type='submit'>\n              {loading ? <FormattedMessage id='loadingBtn' defaultMessage='Continue' /> : <FormattedMessage id='registerBtn' defaultMessage='Continue' /> }\n            </Button>\n          </form>\n          {/* {loading && <p style={{\n            marginTop: \"15px\"\n          }}>{intl.formatMessage({ id: 'loading', defaultMessage: 'Cargando...' })}</p>} */}\n          {(error || errorMessage) && <p style={{\n            marginTop: \"15px\",\n            color: \"red\"\n          }}>{errorMessage}</p>}\n        <Offer style={{ padding: '20px 0' }}>\n          <FormattedMessage\n            id='alreadyHaveAccount'\n            defaultMessage='Already have an account?'\n          />{' '}\n          <LinkButton onClick={toggleSignInForm}>\n            <FormattedMessage id='loginBtnText' defaultMessage='Login' />\n          </LinkButton>\n        </Offer>\n      </Container>\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}