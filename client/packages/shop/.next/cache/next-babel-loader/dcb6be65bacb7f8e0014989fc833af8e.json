{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/add-time-schedule/add-schedule-card.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nvar FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required')\n  }),\n  handleSubmit: function handleSubmit(values) {// do submitting things\n  }\n});\n\nvar AddTimeSchedule = function AddTimeSchedule(props) {\n  _s();\n\n  var isValid = props.isValid,\n      item = props.item,\n      values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n  var addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useMutation = useMutation(UPDATE_ADDRESS),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      addressMutation = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  var intl = useIntl();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var addressData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isValid) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 3;\n              return addressMutation({\n                variables: {\n                  addressInput: JSON.stringify(addressValue)\n                }\n              });\n\n            case 3:\n              addressData = _context.sent;\n              setLoading(true);\n              dispatch({\n                type: 'ADD_OR_UPDATE_ADDRESS',\n                payload: addressValue\n              });\n              closeModal();\n              setLoading(false);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // const weekDays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n  // const lightSchedule = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]],\n  //     startTime: '00:00',\n  //     endTime: '23:59',\n  //     enabled: true,\n  //     smartLight: false\n  // }\n  // const b = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]]\n  // }\n  // const onTimes = [a, b]\n  //set notification schedule\n  // [mon] tue wed thu ...\n  // 00:00 --- 07:15\n  // 15:15 ----- 23:59\n  // Add time Schedule (button)\n  // (when pressing the button you see this pop up)\n  // Add time Schedule\n  //start time: 00:00\n  //end time: 23:59\n  // repeat: (touch and you can see all days of the week to select/deselect) press ok, and original view is seeing the selected days\n  // also the smart option for when is no light and there should be light\n\n\n  return __jsx(Form, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, intl.formatMessage({\n    id: 'addNewAddressId',\n    defaultMessage: 'Address name'\n  }))), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"name\",\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'addressRefId',\n      defaultMessage: 'Address name'\n    }),\n    error: touched.name && errors.name,\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"info\",\n    as: \"textarea\",\n    placeholder: \"Enter Address\",\n    error: touched.info && errors.info,\n    value: values.info,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    style: {\n      width: '100%',\n      height: '44px'\n    },\n    loader: __jsx(Loader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }),\n    isDisabled: loading,\n    isLoading: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedAddressId\",\n    defaultMessage: \"Save Address\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(AddTimeSchedule, \"6YeK7+QaYg5Ir7XjtrIGt0fZc3o=\", false, function () {\n  return [useMutation, useIntl];\n});\n\n_c = AddTimeSchedule;\nexport default _c2 = FormEnhancer(AddTimeSchedule);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddTimeSchedule\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/add-time-schedule/add-schedule-card.tsx"],"names":["React","useContext","useState","Yup","withFormik","Form","closeModal","TextField","Button","useMutation","UPDATE_ADDRESS","FieldWrapper","Heading","ProfileContext","FormattedMessage","useIntl","Loader","FormEnhancer","mapPropsToValues","props","id","item","name","info","validationSchema","object","shape","string","required","handleSubmit","values","AddTimeSchedule","isValid","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","addressValue","type","state","dispatch","loading","setLoading","addressMutation","data","intl","variables","addressInput","JSON","stringify","addressData","payload","formatMessage","defaultMessage","width","height"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\n\n// Shape of form values\ninterface FormValues {\n  id?: number | null;\n  name?: string;\n  info?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n}\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: (props) => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || '',\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required'),\n  }),\n  handleSubmit: (values) => {\n    // do submitting things\n  },\n});\n\nconst AddTimeSchedule = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n\n    handleReset,\n    isSubmitting,\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info,\n  };\n  const { state, dispatch } = useContext(ProfileContext);\n  const [loading, setLoading] = useState(false);\n  const [addressMutation, { data }] = useMutation(UPDATE_ADDRESS);\n  const intl = useIntl();\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      const addressData = await addressMutation({\n        variables: { addressInput: JSON.stringify(addressValue) },\n      });\n      \n      setLoading(true);\n      dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: addressValue });\n      closeModal();\n      setLoading(false);\n    }\n  };\n\n    // const weekDays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n\n    // const lightSchedule = {\n    //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]],\n    //     startTime: '00:00',\n    //     endTime: '23:59',\n    //     enabled: true,\n    //     smartLight: false\n    // }\n\n    // const b = {\n    //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]]\n    // }\n    // const onTimes = [a, b]\n\n\n    //set notification schedule\n    // [mon] tue wed thu ...\n    // 00:00 --- 07:15\n    // 15:15 ----- 23:59\n    // Add time Schedule (button)\n\n    // (when pressing the button you see this pop up)\n    // Add time Schedule\n    //start time: 00:00\n    //end time: 23:59\n\n    // repeat: (touch and you can see all days of the week to select/deselect) press ok, and original view is seeing the selected days\n\n\n    // also the smart option for when is no light and there should be light\n  return (\n    <Form>\n      <Heading>{<Heading>{intl.formatMessage({ id: 'addNewAddressId', defaultMessage: 'Address name' })}</Heading>}</Heading>\n      <FieldWrapper>\n        <TextField\n          id=\"name\"\n          type=\"text\"\n          placeholder={intl.formatMessage({ id: 'addressRefId', defaultMessage: 'Address name' })}\n          error={touched.name && errors.name}\n          value={values.name}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n\n      <FieldWrapper>\n        <TextField\n          id=\"info\"\n          as=\"textarea\"\n          placeholder=\"Enter Address\"\n          error={touched.info && errors.info}\n          value={values.info}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n\n      <Button\n        onClick={handleSubmit}\n        type=\"submit\"\n        style={{ width: '100%', height: '44px' }}\n        loader={<Loader />}\n        isDisabled={loading}\n        isLoading={loading}\n      >\n        <FormattedMessage id=\"savedAddressId\" defaultMessage=\"Save Address\" />\n      </Button>\n    </Form>\n  );\n};\n\nexport default FormEnhancer(AddTimeSchedule);\n"]},"metadata":{},"sourceType":"module"}