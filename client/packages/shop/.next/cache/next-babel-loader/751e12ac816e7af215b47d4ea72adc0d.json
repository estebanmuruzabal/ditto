{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/DistanceSensor.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { fourRelaysOptions, manualModeOptions, DistanceMode, distanceModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, CardButtons, ActionButton, Text, Status, Type, Row, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { CheckMark } from 'assets/icons/CheckMark';\n\nvar DistanceSensor = function DistanceSensor(_ref) {\n  _s();\n\n  var _setting$logs;\n\n  var plant = _ref.plant,\n      settingType = _ref.settingType,\n      handleSettingsChange = _ref.handleSettingsChange,\n      onDeleteSchedule = _ref.onDeleteSchedule,\n      data = _ref.data,\n      openTab = _ref.openTab,\n      setOpenTab = _ref.setOpenTab,\n      handleDeleteSensor = _ref.handleDeleteSensor,\n      errorId = _ref.errorId;\n  var setting = plant.sensors.find(function (module) {\n    return module.settingType === settingType;\n  });\n  var intl = useIntl();\n\n  var _useState = useState(''),\n      daySelected = _useState[0],\n      setDay = _useState[1];\n\n  var _useState2 = useState(false),\n      editIsOn = _useState2[0],\n      setEditIsOn = _useState2[1];\n\n  var selectedMode = distanceModeOptions.find(function (option) {\n    return option.value === setting.mode;\n  });\n  var selectedManualState = manualModeOptions.find(function (option) {\n    return option.value === setting.relayOneWorking;\n  });\n  var relayOneSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayOneIdRelated;\n  });\n  var relayTwoSelected = fourRelaysOptions.find(function (option) {\n    return option.value === setting.relayTwoIdRelated;\n  });\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '179.88px',\n        textAlign: 'left'\n      });\n    }\n  }; // const tabIsOpen = openTab === settingType;\n\n  var tabIsOpen = true;\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-time-schedule-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  return __jsx(PlantsSensorContainer, {\n    style: {\n      height: tabIsOpen ? '100%' : '82px'\n    },\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setOpenTab(tabIsOpen ? '' : settingType);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, __jsx(Type, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, getSettingTypeText(setting === null || setting === void 0 ? void 0 : setting.settingType))), __jsx(ListDes, {\n    style: {\n      marginLeft: '-10px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, __jsx(CardButtons, {\n    className: \"button-wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, editIsOn ? __jsx(ActionButton, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setEditIsOn(!editIsOn);\n    },\n    className: \"edit-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, __jsx(CheckMark, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 33\n    }\n  })) : __jsx(ActionButton, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setEditIsOn(!editIsOn);\n    },\n    className: \"edit-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }\n  }, __jsx(PencilIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 33\n    }\n  })), __jsx(ActionButton, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      handleDeleteSensor(plant, settingType);\n    },\n    className: \"delete-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, __jsx(CloseIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }))))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.NONE && !!openTab && __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, __jsx(Status, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"modoRequiredWarningText\",\n    defaultMessage: \"modoRequiredWarningText\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"distanceId\",\n    defaultMessage: \"distanceId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, (setting === null || setting === void 0 ? void 0 : setting.reading) > 0 && (setting === null || setting === void 0 ? void 0 : setting.reading) < 100 ? (setting === null || setting === void 0 ? void 0 : setting.reading) + 'cm.' : '-', \" \"))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantName\",\n    defaultMessage: \"plantName\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, editIsOn ? __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: setting.name,\n    placeholder: intl.formatMessage({\n      id: 'plantNameRequiredNameId',\n      defaultMessage: 'plantNameRequiredNameId'\n    }),\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'name', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\" // intlInputLabelId=\"profileEmailField\"\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }\n  }) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    }\n  }, setting === null || setting === void 0 ? void 0 : setting.name))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"distanceModeId\",\n    defaultMessage: \"distanceModeId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'mode', e.value, settingType);\n    },\n    value: selectedMode // placeholder={'asdsad'}\n    ,\n    options: distanceModeOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 25\n    }\n  }, selectedMode.value.length > 1 ? selectedMode.label : '-'))), (setting === null || setting === void 0 ? void 0 : setting.mode) !== DistanceMode.NONE && __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"notifyChangesId\",\n    defaultMessage: \"notifyChangesId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 25\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }, __jsx(Switch, {\n    disabled: (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MIN_WARNING || (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MAX_WARNING ? true : false,\n    checked: setting.whatsappWarningsOn || (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MIN_WARNING || (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MAX_WARNING,\n    labelPosition: 'right' // className,\n    ,\n    onUpdate: function onUpdate() {\n      return handleSettingsChange(plant, 'whatsappWarningsOn', !setting.whatsappWarningsOn, settingType);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  }))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MIN_WARNING && __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"minDistanceId\",\n    defaultMessage: \"minDistanceId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 25\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, editIsOn ? __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 29\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"minWarning\",\n    value: setting.minWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'minWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 33\n    }\n  }), __jsx(Porcentage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 33\n    }\n  }, \"%\")) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 29\n    }\n  }, setting.minWarning)), errorId === 'minWarning' && __jsx(ErrorMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 25\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 29\n    }\n  }))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MAX_WARNING && __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 18\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 25\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"maxDistanceId\",\n    defaultMessage: \"maxDistanceId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 25\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 21\n    }\n  }, editIsOn ? __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 29\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"maxWarning\",\n    value: setting.maxWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'maxWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 33\n    }\n  }), __jsx(Porcentage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 33\n    }\n  }, \"%\")) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 29\n    }\n  }, setting.maxWarning), errorId === 'maxWarning' && __jsx(ErrorMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 29\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 33\n    }\n  })))), ((setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MIN_WARNING || (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.MAX_WARNING) && __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 18\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 25\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"timeWithoutNotice\",\n    defaultMessage: \"timeWithoutNotice\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 25\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 21\n    }\n  }, editIsOn ? __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 29\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"relayTwoAutomatedStartedTime\",\n    value: setting.relayTwoAutomatedStartedTime,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayTwoAutomatedStartedTime', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 33\n    }\n  }), __jsx(Porcentage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 33\n    }\n  }, \"mins\")) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 29\n    }\n  }, setting.relayTwoAutomatedStartedTime))), [DistanceMode.WHEN_FULL_ACTION_CUSTOM, DistanceMode.WHEN_FULL_ACTION_AUTOMATED].indexOf(setting.mode) >= 0 && __jsx(React.Fragment, null, (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.WHEN_FULL_ACTION_AUTOMATED && __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 25\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 29\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 33\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"minDistanceId\",\n    defaultMessage: \"minDistanceId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 33\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 29\n    }\n  }, editIsOn ? __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 37\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"minWarning\",\n    value: setting.minWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'minWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 41\n    }\n  }), __jsx(Porcentage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 41\n    }\n  }, \"%\")) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 37\n    }\n  }, setting.minWarning)), errorId === 'minWarning' && __jsx(ErrorMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 33\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 37\n    }\n  }))), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 21\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 29\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"maxDistanceId\",\n    defaultMessage: \"maxDistanceId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 29\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 25\n    }\n  }, editIsOn ? __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 33\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"maxWarning\",\n    value: setting.maxWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'maxWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 37\n    }\n  }), __jsx(Porcentage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 37\n    }\n  }, \"%\")) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 33\n    }\n  }, setting.maxWarning), errorId === 'maxWarning' && __jsx(ErrorMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 33\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 37\n    }\n  })))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.WHEN_FULL_ACTION_CUSTOM && __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 26\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 29\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 33\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"runingMinMaxWarningTimeId\",\n    defaultMessage: \"runingMinMaxWarningTimeId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 33\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 29\n    }\n  }, editIsOn ? __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 37\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"relayOneAutomatedTimeToRun\",\n    value: setting.relayOneAutomatedTimeToRun,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneAutomatedTimeToRun', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 41\n    }\n  }), __jsx(Porcentage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 41\n    }\n  }, \"mins.\")) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 37\n    }\n  }, setting.relayOneAutomatedTimeToRun))), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 21\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 29\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"asociateRelayTwoId\",\n    defaultMessage: \"asociateRelayTwoId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 29\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 25\n    }\n  }, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayTwoIdRelated', e.value, settingType);\n    },\n    value: relayTwoSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 29\n    }\n  }) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 29\n    }\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayTwoIdRelated) : '-')))), [DistanceMode.WHEN_EMPTY_ACTION_CUSTOM, DistanceMode.WHEN_EMPTY_ACTION_AUTOMATED].indexOf(setting.mode) >= 0 && __jsx(React.Fragment, null, __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 21\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 29\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"minDistanceId\",\n    defaultMessage: \"minDistanceId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 29\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 25\n    }\n  }, editIsOn ? __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 33\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"minWarning\",\n    value: setting.minWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'minWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 37\n    }\n  }), __jsx(Porcentage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 37\n    }\n  }, \"%\")) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 33\n    }\n  }, setting.minWarning)), errorId === 'minWarning' && __jsx(ErrorMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 29\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 33\n    }\n  }))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.WHEN_EMPTY_ACTION_AUTOMATED && __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 25\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 30\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 34\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"maxDistanceId\",\n    defaultMessage: \"maxDistanceId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 34\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 30\n    }\n  }, editIsOn ? __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 38\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"maxWarning\",\n    value: setting.maxWarning,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'maxWarning', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 42\n    }\n  }), __jsx(Porcentage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 42\n    }\n  }, \"%\")) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 38\n    }\n  }, setting.maxWarning), errorId === 'maxWarning' && __jsx(ErrorMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 38\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"minMaxWarningId\",\n    defaultMessage: \"minMaxWarningId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 42\n    }\n  })))), (setting === null || setting === void 0 ? void 0 : setting.mode) === DistanceMode.WHEN_EMPTY_ACTION_CUSTOM && __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 26\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 29\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 33\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"runingMinMaxWarningTimeId\",\n    defaultMessage: \"runingMinMaxWarningTimeId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 33\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 29\n    }\n  }, editIsOn ? __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 37\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"relayOneAutomatedTimeToRun\",\n    value: setting.relayOneAutomatedTimeToRun,\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneAutomatedTimeToRun', e.target.value, settingType);\n    },\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\",\n    width: \"45px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 41\n    }\n  }), __jsx(Porcentage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 41\n    }\n  }, \"mins.\")) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 37\n    }\n  }, setting.relayOneAutomatedTimeToRun))), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 21\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 29\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"asociateRelayOneId\",\n    defaultMessage: \"asociateRelayOneId\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 29\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 25\n    }\n  }, editIsOn ? __jsx(Select, {\n    onChange: function onChange(e) {\n      return handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType);\n    },\n    value: relayOneSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 33\n    }\n  }) : __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 33\n    }\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated) : '-')))), (setting === null || setting === void 0 ? void 0 : (_setting$logs = setting.logs) === null || _setting$logs === void 0 ? void 0 : _setting$logs.length) > 0 && __jsx(HumidityLogsGraph, {\n    data: setting.logs,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 17\n    }\n  }));\n};\n\n_s(DistanceSensor, \"027o7eGty4cJ5pm9+3zN6SQR4dk=\", false, function () {\n  return [useIntl];\n});\n\n_c = DistanceSensor;\nexport default DistanceSensor;\n\nvar _c;\n\n$RefreshReg$(_c, \"DistanceSensor\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/DistanceSensor.tsx"],"names":["React","useState","CloseIcon","PencilIcon","Switch","FormattedMessage","useIntl","Select","Input","fourRelaysOptions","manualModeOptions","DistanceMode","distanceModeOptions","HumidityLogsGraph","PlantsSensorContainer","ListItem","ListTitle","ListDes","CardButtons","ActionButton","Text","Status","Type","Row","ErrorMsg","Porcentage","openModal","getRelayNameText","getSettingTypeText","CheckMark","DistanceSensor","plant","settingType","handleSettingsChange","onDeleteSchedule","data","openTab","setOpenTab","handleDeleteSensor","errorId","setting","sensors","find","module","intl","daySelected","setDay","editIsOn","setEditIsOn","selectedMode","option","value","mode","selectedManualState","relayOneWorking","relayOneSelected","relayOneIdRelated","relayTwoSelected","relayTwoIdRelated","selectStyle","control","styles","width","textAlign","tabIsOpen","handleModal","modalComponent","modalProps","className","show","config","height","enableResizing","disableDragging","closeOnClickOutside","component","componentProps","item","e","stopPropagation","justifyContent","marginLeft","NONE","reading","name","formatMessage","id","defaultMessage","target","length","label","MIN_WARNING","MAX_WARNING","whatsappWarningsOn","minWarning","maxWarning","relayTwoAutomatedStartedTime","WHEN_FULL_ACTION_CUSTOM","WHEN_FULL_ACTION_AUTOMATED","indexOf","relayOneAutomatedTimeToRun","WHEN_EMPTY_ACTION_CUSTOM","WHEN_EMPTY_ACTION_AUTOMATED","logs"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions, SensorsTypes, DistanceMode, distanceModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, Row, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { CheckMark } from 'assets/icons/CheckMark';\n\ninterface Props {\n  data?: any;\n  plant: any;\n  openTab: string;\n  setOpenTab: (settingType: string) => void;\n  handleDeleteSensor: (plant: any, settingType: string) => void;\n  settingType: SensorsTypes;\n  errorId: string;\n  handleSettingsChange: (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => void;\n  onDeleteSchedule: (plant: any, settingType: SensorsTypes, position: number) => void;\n}\n\nconst DistanceSensor: React.FC<Props> = ({ plant, settingType, handleSettingsChange, onDeleteSchedule, data, openTab, setOpenTab, handleDeleteSensor, errorId  }) => {\n    const setting = plant.sensors.find((module: ISetting) => module.settingType === settingType);\n    const intl = useIntl();\n    const [daySelected, setDay] = useState('');\n    const [editIsOn, setEditIsOn] = useState(false);\n    const selectedMode = distanceModeOptions.find((option) => option.value === setting.mode);\n    const selectedManualState = manualModeOptions.find((option) => option.value === setting.relayOneWorking);\n    const relayOneSelected = fourRelaysOptions.find((option) => option.value === setting.relayOneIdRelated);\n    const relayTwoSelected = fourRelaysOptions.find((option) => option.value === setting.relayTwoIdRelated);\n    const selectStyle = { control: styles => ({ ...styles, width: '179.88px', textAlign: 'left' }) };\n    // const tabIsOpen = openTab === settingType;\n    const tabIsOpen = true;\n    \n    const handleModal = (\n        modalComponent: any,\n        modalProps = {},\n        className: string = 'add-time-schedule-modal'\n        ) => {\n        openModal({\n            show: true,\n            config: {\n            width: 360,\n            height: 'auto',\n            enableResizing: false,\n            disableDragging: true,\n            className: className,\n            },\n            closeOnClickOutside: true,\n            component: modalComponent,\n            componentProps: { item: modalProps },\n        });\n    };\n\n\n    return (\n        <PlantsSensorContainer style={{ height: tabIsOpen ? '100%' : '82px' }} onClick={(e) => { e.stopPropagation(); setOpenTab(tabIsOpen ? '' : settingType); }}>\n            <ListItem style={{ justifyContent: 'flex-start' }}>\n                <ListTitle>\n                    <Type bold>{getSettingTypeText(setting?.settingType)}</Type>\n                </ListTitle>\n                <ListDes style={{ marginLeft: '-10px' }}>\n                    <CardButtons className='button-wrapper'>\n                        { editIsOn ? (\n                            <ActionButton onClick={(e) => { e.stopPropagation(); setEditIsOn(!editIsOn); }} className='edit-btn'>\n                                <CheckMark />\n                            </ActionButton>\n                        ) : (\n                            <ActionButton onClick={(e) => { e.stopPropagation(); setEditIsOn(!editIsOn); }} className='edit-btn'>\n                                <PencilIcon />\n                            </ActionButton>\n                        )}\n                        <ActionButton onClick={(e) => { e.stopPropagation(); handleDeleteSensor(plant, settingType); }} className='delete-btn'>\n                            <CloseIcon />\n                        </ActionButton>\n                    </CardButtons>\n                </ListDes>\n            \n            </ListItem>\n\n            { (setting?.mode === DistanceMode.NONE && !!openTab) && (\n                <ListItem>\n                    <Status>\n                        <FormattedMessage id=\"modoRequiredWarningText\" defaultMessage=\"modoRequiredWarningText\" />\n                    </Status>\n                </ListItem>\n            )}\n\n            <ListItem style={{ justifyContent: 'flex-start' }}>\n                <ListTitle>\n                    <Text>\n                        <FormattedMessage\n                        id=\"distanceId\"\n                        defaultMessage=\"distanceId\"\n                        />\n                    </Text>\n                </ListTitle>\n                <ListDes>\n                    <Text bold>{(setting?.reading > 0 && setting?.reading < 100) ? setting?.reading + 'cm.'  : '-' } </Text>\n                </ListDes>\n            \n            </ListItem>\n\n            <ListItem style={{ justifyContent: 'flex-start' }}>\n                <ListTitle>\n                    <Text>\n                    <FormattedMessage\n                        id=\"plantName\"\n                        defaultMessage=\"plantName\"\n                    />\n                    </Text>\n                </ListTitle>\n                <ListDes>\n                    { editIsOn ? (\n                        <Input\n                            type='text'\n                            name='name'\n                            value={setting.name}\n                            placeholder={intl.formatMessage({ id: 'plantNameRequiredNameId', defaultMessage: 'plantNameRequiredNameId' })}\n                            onChange={(e: any) => handleSettingsChange(plant, 'name', e.target.value, settingType)}\n                            backgroundColor='#F7F7F7'\n                            height='34.5px'\n                            // intlInputLabelId=\"profileEmailField\"\n                        />\n                    ) : (\n                        <Text  bold>{setting?.name}</Text>\n                    )}\n                </ListDes>\n            </ListItem>\n        \n            <ListItem style={{ justifyContent: 'flex-start' }}>\n                <ListTitle>\n                    <Text>\n                        <FormattedMessage\n                        id=\"distanceModeId\"\n                        defaultMessage=\"distanceModeId\"\n                        />\n                    </Text>\n                </ListTitle>\n                <ListDes>\n                { editIsOn ? (\n                    <Select \n                        onChange={(e: any) => handleSettingsChange(plant, 'mode', e.value, settingType)}\n                        value={selectedMode}\n                        // placeholder={'asdsad'}\n                        options={distanceModeOptions}\n                        styles={selectStyle}\n                        menuPosition={'fixed'}\n                    />\n                    ) : (\n                        <Text  bold>{selectedMode.value.length > 1 ? selectedMode.label : '-'}</Text>\n                    )}\n                </ListDes>\n            </ListItem>\n         \n            { setting?.mode !== DistanceMode.NONE && (\n                <ListItem style={{ justifyContent: 'flex-start' }}>\n                    <ListTitle>\n                    <Text>\n                        <FormattedMessage\n                        id=\"notifyChangesId\"\n                        defaultMessage=\"notifyChangesId\"\n                        />\n                    </Text>\n                    </ListTitle>\n                    <ListDes>\n                    <Switch \n                        disabled={(setting?.mode === DistanceMode.MIN_WARNING || setting?.mode === DistanceMode.MAX_WARNING) ? true : false}\n                        checked={setting.whatsappWarningsOn || (setting?.mode === DistanceMode.MIN_WARNING || setting?.mode === DistanceMode.MAX_WARNING)}\n                        labelPosition={'right'}\n                        // className,\n                        onUpdate={() => handleSettingsChange(plant, 'whatsappWarningsOn', !setting.whatsappWarningsOn, settingType)}\n                    />\n                    </ListDes>\n                </ListItem>\n            )}\n\n            { setting?.mode === DistanceMode.MIN_WARNING && (\n                <ListItem>\n                    <ListTitle>\n                        <Text>\n                        <FormattedMessage\n                            id='minDistanceId'\n                            defaultMessage='minDistanceId'\n                        />\n                        </Text>\n                    </ListTitle>\n                    <ListDes>\n                        { editIsOn ? (\n                            <Row>\n                                <Input\n                                    type='number'\n                                    name='minWarning'\n                                    value={setting.minWarning}\n                                    onChange={(e: any) => handleSettingsChange(plant, 'minWarning', e.target.value, settingType)}\n                                    backgroundColor='#F7F7F7'\n                                    height='34.5px'\n                                    width='45px'\n                                />\n                                <Porcentage>%</Porcentage>\n                            </Row>\n                        ) : (\n                            <Text bold>{setting.minWarning}</Text>\n                        )}\n                    </ListDes>\n                    {errorId === 'minWarning' && (\n                        <ErrorMsg>\n                            <FormattedMessage id=\"minMaxWarningId\" defaultMessage=\"minMaxWarningId\" />\n                        </ErrorMsg>\n                    )}\n                </ListItem>\n            )}\n\n            { setting?.mode === DistanceMode.MAX_WARNING && (\n                 <ListItem>\n                    <ListTitle>\n                        <Text>\n                        <FormattedMessage\n                            id='maxDistanceId'\n                            defaultMessage='maxDistanceId'\n                        />\n                        </Text>\n                    </ListTitle>\n                    <ListDes>\n                        { editIsOn ? (\n                            <Row>\n                                <Input\n                                    type='number'\n                                    name='maxWarning'\n                                    value={setting.maxWarning}\n                                    onChange={(e: any) => handleSettingsChange(plant, 'maxWarning', e.target.value, settingType)}\n                                    backgroundColor='#F7F7F7'\n                                    height='34.5px'\n                                    width='45px'\n                                />\n                                <Porcentage>%</Porcentage>\n                            </Row>\n                        ) : (\n                            <Text bold>{setting.maxWarning}</Text>\n                        )}\n                        {errorId === 'maxWarning' && (\n                            <ErrorMsg>\n                                <FormattedMessage id=\"minMaxWarningId\" defaultMessage=\"minMaxWarningId\" />\n                            </ErrorMsg>\n                        )}\n                    </ListDes>\n                </ListItem>\n            )}\n\n            { (setting?.mode === DistanceMode.MIN_WARNING || setting?.mode === DistanceMode.MAX_WARNING) && (\n                 <ListItem>\n                    <ListTitle>\n                        <Text>\n                        <FormattedMessage\n                            id='timeWithoutNotice'\n                            defaultMessage='timeWithoutNotice'\n                        />\n                        </Text>\n                    </ListTitle>\n                    <ListDes>\n                        { editIsOn ? (\n                            <Row>\n                                <Input\n                                    type='number'\n                                    name='relayTwoAutomatedStartedTime'\n                                    value={setting.relayTwoAutomatedStartedTime}\n                                    onChange={(e: any) => handleSettingsChange(plant, 'relayTwoAutomatedStartedTime', e.target.value, settingType)}\n                                    backgroundColor='#F7F7F7'\n                                    height='34.5px'\n                                    width='45px'\n                                />\n                                <Porcentage>mins</Porcentage>\n                            </Row>\n                        ) : (\n                            <Text bold>{setting.relayTwoAutomatedStartedTime}</Text>\n                        )}\n                    </ListDes>\n                </ListItem>\n            )}\n\n            { [DistanceMode.WHEN_FULL_ACTION_CUSTOM, DistanceMode.WHEN_FULL_ACTION_AUTOMATED].indexOf(setting.mode) >= 0 && (\n                <>\n                    { setting?.mode === DistanceMode.WHEN_FULL_ACTION_AUTOMATED && (\n                        <ListItem>\n                            <ListTitle>\n                                <Text>\n                                <FormattedMessage\n                                    id='minDistanceId'\n                                    defaultMessage='minDistanceId'\n                                />\n                                </Text>\n                            </ListTitle>\n                            <ListDes>\n                                { editIsOn ? (\n                                    <Row>\n                                        <Input\n                                            type='number'\n                                            name='minWarning'\n                                            value={setting.minWarning}\n                                            onChange={(e: any) => handleSettingsChange(plant, 'minWarning', e.target.value, settingType)}\n                                            backgroundColor='#F7F7F7'\n                                            height='34.5px'\n                                            width='45px'\n                                        />\n                                        <Porcentage>%</Porcentage>\n                                    </Row>\n                                ) : (\n                                    <Text bold>{setting.minWarning}</Text>\n                                )}\n                            </ListDes>\n                            {errorId === 'minWarning' && (\n                                <ErrorMsg>\n                                    <FormattedMessage id=\"minMaxWarningId\" defaultMessage=\"minMaxWarningId\" />\n                                </ErrorMsg>\n                            )}\n                        </ListItem>\n                    )}\n\n                    <ListItem>\n                        <ListTitle>\n                            <Text>\n                            <FormattedMessage\n                                id='maxDistanceId'\n                                defaultMessage='maxDistanceId'\n                            />\n                            </Text>\n                        </ListTitle>\n                        <ListDes>\n                            { editIsOn ? (\n                                <Row>\n                                    <Input\n                                        type='number'\n                                        name='maxWarning'\n                                        value={setting.maxWarning}\n                                        onChange={(e: any) => handleSettingsChange(plant, 'maxWarning', e.target.value, settingType)}\n                                        backgroundColor='#F7F7F7'\n                                        height='34.5px'\n                                        width='45px'\n                                    />\n                                    <Porcentage>%</Porcentage>\n                                </Row>\n                            ) : (\n                                <Text bold>{setting.maxWarning}</Text>\n                            )}\n                            {errorId === 'maxWarning' && (\n                                <ErrorMsg>\n                                    <FormattedMessage id=\"minMaxWarningId\" defaultMessage=\"minMaxWarningId\" />\n                                </ErrorMsg>\n                            )}\n                        </ListDes>\n                    </ListItem>\n\n                    { setting?.mode === DistanceMode.WHEN_FULL_ACTION_CUSTOM && (\n                         <ListItem>\n                            <ListTitle>\n                                <Text>\n                                <FormattedMessage\n                                    id='runingMinMaxWarningTimeId'\n                                    defaultMessage='runingMinMaxWarningTimeId'\n                                />\n                                </Text>\n                            </ListTitle>\n                            <ListDes>\n                                { editIsOn ? (\n                                    <Row>\n                                        <Input\n                                            type='number'\n                                            name='relayOneAutomatedTimeToRun'\n                                            value={setting.relayOneAutomatedTimeToRun}\n                                            onChange={(e: any) => handleSettingsChange(plant, 'relayOneAutomatedTimeToRun', e.target.value, settingType)}\n                                            backgroundColor='#F7F7F7'\n                                            height='34.5px'\n                                            width='45px'\n                                        />\n                                        <Porcentage>mins.</Porcentage>\n                                    </Row>\n                                ) : (\n                                    <Text bold>{setting.relayOneAutomatedTimeToRun}</Text>\n                                )}\n                            </ListDes>\n                        </ListItem>\n                    )}\n\n                    <ListItem>\n                        <ListTitle>\n                            <Text>\n                            <FormattedMessage\n                                id='asociateRelayTwoId'\n                                defaultMessage='asociateRelayTwoId'\n                            />\n                            </Text>\n                        </ListTitle>\n                        <ListDes>\n                        { editIsOn ? (\n                            <Select \n                                onChange={(e: any) => handleSettingsChange(plant, 'relayTwoIdRelated', e.value, settingType)}\n                                value={relayTwoSelected}\n                                options={fourRelaysOptions}\n                                styles={selectStyle}\n                                menuPosition={'fixed'}\n                            />\n                        ) : (\n                            <Text bold>{setting?.relayTwoIdRelated.length > 1 ? getRelayNameText(setting?.relayTwoIdRelated) : '-'}</Text>\n                        )}\n                        </ListDes>\n                    </ListItem>\n\n                </>\n            )}\n\n            { [DistanceMode.WHEN_EMPTY_ACTION_CUSTOM, DistanceMode.WHEN_EMPTY_ACTION_AUTOMATED].indexOf(setting.mode) >= 0 && (\n                <>\n                    <ListItem>\n                        <ListTitle>\n                            <Text>\n                            <FormattedMessage\n                                id='minDistanceId'\n                                defaultMessage='minDistanceId'\n                            />\n                            </Text>\n                        </ListTitle>\n                        <ListDes>\n                            { editIsOn ? (\n                                <Row>\n                                    <Input\n                                        type='number'\n                                        name='minWarning'\n                                        value={setting.minWarning}\n                                        onChange={(e: any) => handleSettingsChange(plant, 'minWarning', e.target.value, settingType)}\n                                        backgroundColor='#F7F7F7'\n                                        height='34.5px'\n                                        width='45px'\n                                    />\n                                    <Porcentage>%</Porcentage>\n                                </Row>\n                            ) : (\n                                <Text bold>{setting.minWarning}</Text>\n                            )}\n                        </ListDes>\n                        {errorId === 'minWarning' && (\n                            <ErrorMsg>\n                                <FormattedMessage id=\"minMaxWarningId\" defaultMessage=\"minMaxWarningId\" />\n                            </ErrorMsg>\n                        )}\n                    </ListItem>\n\n                    { setting?.mode === DistanceMode.WHEN_EMPTY_ACTION_AUTOMATED && (\n                        <ListItem>\n                             <ListTitle>\n                                 <Text>\n                                 <FormattedMessage\n                                     id='maxDistanceId'\n                                     defaultMessage='maxDistanceId'\n                                 />\n                                 </Text>\n                             </ListTitle>\n                             <ListDes>\n                                 { editIsOn ? (\n                                     <Row>\n                                         <Input\n                                             type='number'\n                                             name='maxWarning'\n                                             value={setting.maxWarning}\n                                             onChange={(e: any) => handleSettingsChange(plant, 'maxWarning', e.target.value, settingType)}\n                                             backgroundColor='#F7F7F7'\n                                             height='34.5px'\n                                             width='45px'\n                                         />\n                                         <Porcentage>%</Porcentage>\n                                     </Row>\n                                 ) : (\n                                     <Text bold>{setting.maxWarning}</Text>\n                                 )}\n                                 {errorId === 'maxWarning' && (\n                                     <ErrorMsg>\n                                         <FormattedMessage id=\"minMaxWarningId\" defaultMessage=\"minMaxWarningId\" />\n                                     </ErrorMsg>\n                                 )}\n                             </ListDes>\n                         </ListItem>\n                    )}\n\n                    { setting?.mode === DistanceMode.WHEN_EMPTY_ACTION_CUSTOM && (\n                         <ListItem>\n                            <ListTitle>\n                                <Text>\n                                <FormattedMessage\n                                    id='runingMinMaxWarningTimeId'\n                                    defaultMessage='runingMinMaxWarningTimeId'\n                                />\n                                </Text>\n                            </ListTitle>\n                            <ListDes>\n                                { editIsOn ? (\n                                    <Row>\n                                        <Input\n                                            type='number'\n                                            name='relayOneAutomatedTimeToRun'\n                                            value={setting.relayOneAutomatedTimeToRun}\n                                            onChange={(e: any) => handleSettingsChange(plant, 'relayOneAutomatedTimeToRun', e.target.value, settingType)}\n                                            backgroundColor='#F7F7F7'\n                                            height='34.5px'\n                                            width='45px'\n                                        />\n                                        <Porcentage>mins.</Porcentage>\n                                    </Row>\n                                ) : (\n                                    <Text bold>{setting.relayOneAutomatedTimeToRun}</Text>\n                                )}\n                            </ListDes>\n                        </ListItem>\n                    )}\n\n                    <ListItem>\n                        <ListTitle>\n                            <Text>\n                            <FormattedMessage\n                                id='asociateRelayOneId'\n                                defaultMessage='asociateRelayOneId'\n                            />\n                            </Text>\n                        </ListTitle>\n                        <ListDes>\n                            { editIsOn ? (\n                                <Select \n                                    onChange={(e: any) => handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType)}\n                                    value={relayOneSelected}\n                                    options={fourRelaysOptions}\n                                    styles={selectStyle}\n                                    menuPosition={'fixed'}\n                                />\n                            ) : (\n                                <Text bold>{setting?.relayOneIdRelated.length > 1 ? getRelayNameText(setting?.relayOneIdRelated) : '-'}</Text>\n                            )}\n                        </ListDes>\n                    </ListItem>\n                </>\n            )}\n            \n            { setting?.logs?.length > 0 && (\n                <HumidityLogsGraph\n                    data={setting.logs}\n                />\n            )}\n        </PlantsSensorContainer>\n    );\n};\n\nexport default DistanceSensor;\n"]},"metadata":{},"sourceType":"module"}