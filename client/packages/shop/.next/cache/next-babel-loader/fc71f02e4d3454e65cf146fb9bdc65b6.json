{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useMemo } from 'react';\n// import {\n//   ApolloClient,\n//   HttpLink,\n//   ApolloLink,\n//   InMemoryCache,\n//   concat,\n// } from '@apollo/client';\n// let apolloClient;\n// const httpLink = new HttpLink({\n//   uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log('graphQLErrors', graphQLErrors);\n//     console.log('networkError', networkError);\n//   },\n// });\n// const authMiddleware = new ApolloLink((operation, forward) => {\n//   // add the authorization to the headers\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   operation.setContext({\n//     headers: {\n//       'x-access-token': token ? token : '',\n//     },\n//   });\n//   return forward(operation);\n// });\n// const client = new ApolloClient({\n//   link: authMiddleware.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n// console.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\n// function createApolloClient() {\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   return new ApolloClient({\n//     ssrMode: typeof window === 'undefined',\n//     link: new HttpLink({\n//       uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n//       credentials: 'same-origin', // Additional fetch() options like `credentials`\n//       headers: {\n//         'x-access-token': token ? token : '',\n//       }, // Additional fetch() options like `headers`\n//       onError: ({ networkError, graphQLErrors }) => {\n//         console.log('graphQLErrors', graphQLErrors);\n//         console.log('networkError', networkError);\n//       },\n//     }),\n//     cache: new InMemoryCache(),\n//   });\n// }\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? client;\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === 'undefined') return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n//   return _apolloClient;\n// }\n// export function useApollo(initialState) {\n//   const store = useMemo(() => initializeApollo(initialState), [initialState]);\n//   return store;\n// }\nimport { useMemo } from 'react';\nimport { ApolloClient, ApolloLink, HttpLink, InMemoryCache } from 'apollo-boost';\nvar httpLink = new HttpLink({\n  // uri: 'http://localhost:7000/api', // Server URL (must be absolute)\n  // uri: 'http://54.232.137.175/api', // Server URL (must be absolute)\n  credentials: 'same-origin',\n  // Additional fetch() options like `credentials`\n  onError: function onError(_ref) {\n    var networkError = _ref.networkError,\n        graphQLErrors = _ref.graphQLErrors;\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\nvar authLink = new ApolloLink(function (operation, forward) {\n  // Retrieve the authorization token from local storage.\n  var token = null;\n\n  if (true) {\n    token = localStorage.getItem('access_token');\n  } // Use the setContext method to set the HTTP headers.\n\n\n  operation.setContext({\n    headers: {\n      'x-access-token': token ? token : ''\n    }\n  }); // Call the next link in the middleware chain.\n\n  return forward(operation);\n});\nvar apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/utils/apollo.js"],"names":["useMemo","ApolloClient","ApolloLink","HttpLink","InMemoryCache","httpLink","credentials","onError","networkError","graphQLErrors","console","log","authLink","operation","forward","token","localStorage","getItem","setContext","headers","apolloClient","createApolloClient","ssrMode","link","concat","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":";;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAAQC,YAAR,EAAsBC,UAAtB,EAAkCC,QAAlC,EAA4CC,aAA5C,QAAgE,cAAhE;AACA,IAAMC,QAAQ,GAAG,IAAIF,QAAJ,CAAa;AAC5B;AACA;AACAG,EAAAA,WAAW,EAAE,aAHe;AAGA;AAC5BC,EAAAA,OAAO,EAAE,uBAAqC;AAAA,QAAlCC,YAAkC,QAAlCA,YAAkC;AAAA,QAApBC,aAAoB,QAApBA,aAAoB;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACD;AAP2B,CAAb,CAAjB;AASA,IAAMI,QAAQ,GAAG,IAAIV,UAAJ,CAAe,UAACW,SAAD,EAAYC,OAAZ,EAAwB;AACtD;AACA,MAAIC,KAAK,GAAG,IAAZ;;AACA,YAAmC;AACjCA,IAAAA,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAR;AACD,GALqD,CAMtD;;;AACAJ,EAAAA,SAAS,CAACK,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACP,wBAAkBJ,KAAK,GAAGA,KAAH,GAAW;AAD3B;AADU,GAArB,EAPsD,CAatD;;AACA,SAAOD,OAAO,CAACD,SAAD,CAAd;AACD,CAfgB,CAAjB;AAiBA,IAAIO,YAAJ;;AACA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIpB,YAAJ,CAAiB;AACtBqB,IAAAA,OAAO,OADe;AAEtBC,IAAAA,IAAI,EAAEX,QAAQ,CAACY,MAAT,CAAgBnB,QAAhB,CAFgB;AAGtBoB,IAAAA,KAAK,EAAE,IAAIrB,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,OAAO,SAASsB,gBAAT,GAA+C;AAAA;;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AACpD,MAAMC,aAAa,qBAAGR,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIM,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,aAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACR,YAAL,EAAmBA,YAAY,GAAGQ,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AAAA;;AACtC,MAAMI,KAAK,GAAG/B,OAAO,CAAC;AAAA,WAAM0B,gBAAgB,CAACC,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD;;GAHeD,S","sourcesContent":["// import { useMemo } from 'react';\n\n// import {\n//   ApolloClient,\n//   HttpLink,\n//   ApolloLink,\n//   InMemoryCache,\n//   concat,\n// } from '@apollo/client';\n\n// let apolloClient;\n\n// const httpLink = new HttpLink({\n//   uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log('graphQLErrors', graphQLErrors);\n//     console.log('networkError', networkError);\n//   },\n// });\n\n// const authMiddleware = new ApolloLink((operation, forward) => {\n//   // add the authorization to the headers\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   operation.setContext({\n//     headers: {\n//       'x-access-token': token ? token : '',\n//     },\n//   });\n\n//   return forward(operation);\n// });\n\n// const client = new ApolloClient({\n//   link: authMiddleware.concat(httpLink),\n//   cache: new InMemoryCache(),\n// });\n\n// console.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\n// function createApolloClient() {\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   return new ApolloClient({\n//     ssrMode: typeof window === 'undefined',\n//     link: new HttpLink({\n//       uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n//       credentials: 'same-origin', // Additional fetch() options like `credentials`\n//       headers: {\n//         'x-access-token': token ? token : '',\n//       }, // Additional fetch() options like `headers`\n//       onError: ({ networkError, graphQLErrors }) => {\n//         console.log('graphQLErrors', graphQLErrors);\n//         console.log('networkError', networkError);\n//       },\n//     }),\n//     cache: new InMemoryCache(),\n//   });\n// }\n\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? client;\n\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === 'undefined') return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n\n//   return _apolloClient;\n// }\n\n// export function useApollo(initialState) {\n//   const store = useMemo(() => initializeApollo(initialState), [initialState]);\n//   return store;\n// }\n\n\n\nimport { useMemo } from 'react';\nimport {ApolloClient, ApolloLink, HttpLink, InMemoryCache} from 'apollo-boost';\nconst httpLink = new HttpLink({\n  // uri: 'http://localhost:7000/api', // Server URL (must be absolute)\n  // uri: 'http://54.232.137.175/api', // Server URL (must be absolute)\n  credentials: 'same-origin', // Additional fetch() options like `credentials`\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  },\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  // Retrieve the authorization token from local storage.\n  let token = null;\n  if (typeof window !== 'undefined') {\n    token = localStorage.getItem('access_token');\n  }\n  // Use the setContext method to set the HTTP headers.\n  operation.setContext({\n    headers: {\n      'x-access-token': token ? token : ''\n    }\n  });\n\n  // Call the next link in the middleware chain.\n  return forward(operation);\n});\n\nlet apolloClient;\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}