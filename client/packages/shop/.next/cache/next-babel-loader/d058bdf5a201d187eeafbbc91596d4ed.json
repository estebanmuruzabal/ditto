{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { usePrevious, useMeasure } from 'utils/hooks';\nimport { useSpring, animated } from 'react-spring';\nimport { Frame, Title, Content, Header, IconWrapper } from './tree-menu.style';\nimport * as Icons from 'assets/icons/category-icons';\nvar Tree = React.memo(function (_ref) {\n  var children = _ref.children,\n      name = _ref.name,\n      icon = _ref.icon,\n      isOpen = _ref.isOpen,\n      onClick = _ref.onClick,\n      depth = _ref.depth,\n      _ref$defaultOpen = _ref.defaultOpen,\n      defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen;\n  var previous = usePrevious(isOpen);\n\n  var _useMeasure = useMeasure(),\n      _useMeasure2 = _slicedToArray(_useMeasure, 2),\n      bind = _useMeasure2[0],\n      viewHeight = _useMeasure2[1].height;\n\n  var _useSpring = useSpring({\n    from: {\n      height: 0,\n      opacity: 0,\n      transform: 'translate3d(20px,0,0)'\n    },\n    to: {\n      height: isOpen ? viewHeight : 0,\n      opacity: isOpen ? 1 : 0,\n      transform: \"translate3d(\".concat(isOpen ? 0 : 20, \"px,0,0)\")\n    }\n  }),\n      height = _useSpring.height,\n      opacity = _useSpring.opacity,\n      transform = _useSpring.transform;\n\n  var Icon = icon ? Icons[icon] : depth === 'child' ? Icons['Minus'] : null;\n  return __jsx(Frame, {\n    depth: depth\n  }, __jsx(Header, {\n    open: isOpen,\n    depth: depth,\n    className: depth\n  }, Icon !== null && __jsx(IconWrapper, {\n    depth: depth\n  }, __jsx(Icon, null)), __jsx(Title, {\n    onClick: onClick\n  }, name)), __jsx(Content, {\n    style: {\n      opacity: opacity,\n      height: isOpen && previous === isOpen ? 'auto' : height\n    }\n  }, __jsx(animated.div, _extends({\n    style: {\n      transform: transform\n    }\n  }, bind, {\n    children: children\n  }))));\n});\nexport var TreeMenu = function TreeMenu(_ref2) {\n  var data = _ref2.data,\n      className = _ref2.className,\n      _onClick = _ref2.onClick,\n      active = _ref2.active;\n\n  var handler = function handler(children) {\n    return children.map(function (subOption) {\n      if (!subOption.children) {\n        return __jsx(Tree, {\n          key: subOption.name,\n          name: subOption.name,\n          icon: subOption.icon,\n          depth: \"child\",\n          onClick: function onClick() {\n            return _onClick(subOption.slug);\n          },\n          isOpen: active === subOption.slug\n        });\n      }\n\n      return __jsx(Tree, {\n        key: subOption.name,\n        name: subOption.name,\n        icon: subOption.icon,\n        depth: \"parent\",\n        onClick: function onClick() {\n          return _onClick(subOption.slug);\n        },\n        isOpen: active === subOption.slug || subOption.children.some(function (item) {\n          return item.slug === active;\n        })\n      }, handler(subOption.children));\n    });\n  };\n\n  return __jsx(React.Fragment, null, handler(data));\n};","map":null,"metadata":{},"sourceType":"module"}