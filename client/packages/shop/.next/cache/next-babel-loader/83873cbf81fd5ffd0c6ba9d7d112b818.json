{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { StyledForm, StyledInput, StyledCategoryName, StyledSearchButton } from './search-box.style';\nimport { SearchIcon } from 'assets/icons/SearchIcon';\nexport const SearchBox = (_ref) => {\n  let {\n    onEnter,\n    onChange,\n    onBlur,\n    value,\n    name,\n    minimal,\n    categoryType,\n    buttonText,\n    className,\n    showButtonText = true,\n    shadow\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"onEnter\", \"onChange\", \"onBlur\", \"value\", \"name\", \"minimal\", \"categoryType\", \"buttonText\", \"className\", \"showButtonText\", \"shadow\"]);\n\n  return __jsx(StyledForm, {\n    onSubmit: onEnter,\n    className: className,\n    boxShadow: shadow,\n    minimal: minimal\n  }, minimal ? __jsx(React.Fragment, null, __jsx(SearchIcon, null), __jsx(StyledInput, _extends({\n    type: \"search\",\n    autoComplete: \"off\",\n    onChange: onChange,\n    onBlur: onBlur,\n    value: value,\n    name: name\n  }, rest))) : __jsx(React.Fragment, null, __jsx(StyledCategoryName, null, categoryType), __jsx(StyledInput, _extends({\n    type: \"search\",\n    autoComplete: \"off\",\n    onChange: onChange,\n    value: value,\n    name: name,\n    onBlur: onBlur\n  }, rest)), __jsx(StyledSearchButton, null, __jsx(SearchIcon, null), showButtonText && buttonText)));\n};","map":null,"metadata":{},"sourceType":"module"}