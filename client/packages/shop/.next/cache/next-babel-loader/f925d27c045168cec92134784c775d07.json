{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/HumidityReading.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nconst HumidityReading = ({\n  plant\n}) => {\n  var _data$getUser, _data$getUser$plants, _data$getUser$plants$, _data$getUser$plants$2;\n\n  const setting = plant.sensors.find(module => module.settingType === settingType);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000\n  });\n  const sensorIndex = Number(setting === null || setting === void 0 ? void 0 : setting.settingType[(setting === null || setting === void 0 ? void 0 : setting.settingType.length) - 1]);\n  const plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(plant => plant.plantId === plant.plantId);\n  let reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors[sensorIndex]) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.reading;\n  console.log('setting?.settingType', setting === null || setting === void 0 ? void 0 : setting.settingType);\n  console.log('plantIndex', plantIndex);\n  console.log('reading', reading);\n  console.log('sensorIndex', sensorIndex); // if (reading > -5 && reading <= 0) reading = 0;\n  // if (reading >= 100 && reading < 110) reading = 100;\n  // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n\n  const readingFormatted = reading >= 0 && reading <= 110 ? `${reading} % ðŸ’§` : 'Disconected';\n  return __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, readingFormatted);\n};\n\nexport default HumidityReading;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/HumidityReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","HumidityReading","plant","setting","sensors","find","module","settingType","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","sensorIndex","Number","length","plantIndex","getUser","plants","findIndex","plantId","reading","console","log","readingFormatted"],"mappings":";;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAOA,MAAMC,eAAgC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvD,QAAMC,OAAO,GAAGD,KAAK,CAACE,OAAN,CAAcC,IAAd,CAAoBC,MAAD,IAAsBA,MAAM,CAACC,WAAP,KAAuBA,WAAhE,CAAhB;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BX,QAAQ,CAACC,2BAAD,EAA8B;AACnEW,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAAzC;AAMA,QAAMC,WAAW,GAAGC,MAAM,CAACZ,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEI,WAAT,CAAqB,CAAAJ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEI,WAAT,CAAqBS,MAArB,IAA8B,CAAnD,CAAD,CAA1B;AACA,QAAMC,UAAU,GAAGP,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEQ,OAAT,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,SAAvB,CAAkClB,KAAD,IAAgBA,KAAK,CAACmB,OAAN,KAAkBnB,KAAK,CAACmB,OAAzE,CAAnB;AACA,MAAIC,OAAO,GAAGZ,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEQ,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,oFAAG,sBAAkCb,OAAlC,CAA0CU,WAA1C,CAAH,2DAAG,uBAAwDQ,OAAtE;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCrB,OAApC,aAAoCA,OAApC,uBAAoCA,OAAO,CAAEI,WAA7C;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,UAA1B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,OAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BV,WAA3B,EAfuD,CAgBvD;AACA;AAGA;;AACA,QAAMW,gBAAgB,GAAIH,OAAO,IAAI,CAAX,IAAgBA,OAAO,IAAI,GAA5B,GAAoC,GAAEA,OAAQ,OAA9C,GAAuD,aAAhF;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYG,gBAAZ,CADJ;AAGH,CAzBD;;AA2BA,eAAexB,eAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  plant: any;\n  settingType: SensorsTypes;\n}\n\nconst HumidityReading: React.FC<Props> = ({ plant,   }) => {\n    const setting = plant.sensors.find((module: ISetting) => module.settingType === settingType);\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 10000,\n      });\n    \n    const sensorIndex = Number(setting?.settingType[setting?.settingType.length - 1]);\n    const plantIndex = data?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plant.plantId);            \n    let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    console.log('setting?.settingType', setting?.settingType)\n    console.log('plantIndex', plantIndex)\n    console.log('reading', reading)\n    console.log('sensorIndex', sensorIndex)\n    // if (reading > -5 && reading <= 0) reading = 0;\n    // if (reading >= 100 && reading < 110) reading = 100;\n\n\n    // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n    const readingFormatted = (reading >= 0 && reading <= 110) ? `${reading} % ðŸ’§` : 'Disconected';  \n    return (\n        <Text bold>{readingFormatted}</Text>\n    );\n};\n\nexport default HumidityReading;\n"]},"metadata":{},"sourceType":"module"}