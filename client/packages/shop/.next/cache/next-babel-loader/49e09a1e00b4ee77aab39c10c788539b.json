{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/authentication-form/otpForm.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { Button, Wrapper, Heading, SubHeading } from './authentication-form.style';\nimport { useMutation } from '@apollo/react-hooks';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { closeModal } from '@redq/reuse-modal';\nimport { PHONE_VERIFICATION_CHECK_MUTATION } from 'graphql/mutation/signup';\nimport Router, { useRouter } from 'next/router';\nimport styled from \"styled-components\";\nexport var Container = styled.div.withConfig({\n  displayName: \"otpForm__Container\",\n  componentId: \"riqlfd-0\"\n})([\"padding:40px 60px;@media (max-width:768px){padding:40px 30px;}\"]);\n_c = Container;\nexport default function OtpModal() {\n  _s();\n\n  var router = useRouter();\n  var intl = useIntl();\n\n  var _useContext = useContext(AuthContext),\n      authDispatch = _useContext.authDispatch;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      otp = _React$useState2[0],\n      setOtp = _React$useState2[1];\n\n  var _useMutation = useMutation(PHONE_VERIFICATION_CHECK_MUTATION, {\n    onCompleted: function onCompleted(data) {\n      var _data$phoneVerificati = data.phoneVerificationCheck,\n          access_token = _data$phoneVerificati.access_token,\n          user = _data$phoneVerificati.user;\n\n      if (true) {\n        localStorage.removeItem('phone_number');\n        localStorage.setItem('access_token', \"\".concat(access_token));\n        authDispatch({\n          type: 'SIGNIN_SUCCESS',\n          user: user\n        });\n        closeModal(); // Router.push('/[type]', router.asPath);\n        // currently sending to profile instead of really checking otp\n        // Router.push('/checkout', router.asPath);\n\n        if (router.query.goCheckout) {\n          Router.push({\n            pathname: '/checkout',\n            query: {\n              shouldRefresh: true\n            }\n          });\n        } else {\n          Router.push({\n            pathname: '/home',\n            query: {\n              shouldRefresh: true\n            }\n          });\n        }\n      }\n    },\n    onError: function onError(error) {\n      setOtp('');\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      signinMeMutation = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error,\n      data = _useMutation2$.data;\n\n  var submitForm = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.next = 3;\n              return signinMeMutation({\n                variables: {\n                  verification_code: otp,\n                  phone: localStorage.getItem('phone_number')\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitForm(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"otpForm\",\n    defaultMessage: \"Verify Phone Number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })), __jsx(SubHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"otpSubText\",\n    defaultMessage: \"Login with your phone number & password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  })), __jsx(\"form\", {\n    onSubmit: submitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"primary\",\n    size: \"big\",\n    style: {\n      width: '100%'\n    },\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \"Continuar\")), loading && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, intl.formatMessage({\n    id: 'loading',\n    defaultMessage: 'Cargando...'\n  })), error && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\",\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 19\n    }\n  }, \" \", error.message)));\n}\n\n_s(OtpModal, \"+eC6SA31Dj9+d24BIpFXLTP0ZZ4=\", false, function () {\n  return [useRouter, useIntl, useMutation];\n});\n\n_c2 = OtpModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"OtpModal\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/authentication-form/otpForm.tsx"],"names":["React","useContext","Button","Wrapper","Heading","SubHeading","useMutation","AuthContext","FormattedMessage","useIntl","closeModal","PHONE_VERIFICATION_CHECK_MUTATION","Router","useRouter","styled","Container","div","OtpModal","router","intl","authDispatch","useState","otp","setOtp","onCompleted","data","phoneVerificationCheck","access_token","user","localStorage","removeItem","setItem","type","query","goCheckout","push","pathname","shouldRefresh","onError","error","signinMeMutation","loading","submitForm","e","preventDefault","variables","verification_code","phone","getItem","width","marginTop","formatMessage","id","defaultMessage","color","message"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport {\n  Button,\n  Wrapper,\n  Heading,\n  SubHeading,\n} from './authentication-form.style';\nimport { useMutation } from '@apollo/react-hooks';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Input } from 'components/forms/input';\nimport { PHONE_VERIFICATION_CHECK_MUTATION } from 'graphql/mutation/signup';\nimport Router, { useRouter } from 'next/router';\nimport styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 40px 60px;\n\n  @media (max-width: 768px) {\n    padding: 40px 30px;\n  }\n`;\n\nexport default function OtpModal() {\n  const router = useRouter();\n  const intl = useIntl();\n  const { authDispatch } = useContext<any>(AuthContext);\n  const [otp, setOtp] = React.useState('');\n\n  const [\n    signinMeMutation,\n    { \n      loading,\n      error,\n      data\n    }\n  ] = useMutation(PHONE_VERIFICATION_CHECK_MUTATION,{\n    onCompleted: (data) => {\n      const { access_token, user } = data.phoneVerificationCheck;\n      if (typeof window !== 'undefined') {\n        localStorage.removeItem('phone_number');\n\n        localStorage.setItem('access_token', `${access_token}`);\n        authDispatch({\n          type: 'SIGNIN_SUCCESS',\n          user\n        });\n        closeModal();\n        // Router.push('/[type]', router.asPath);\n        // currently sending to profile instead of really checking otp\n        // Router.push('/checkout', router.asPath);\n        if (router.query.goCheckout) {\n          Router.push({ pathname: '/checkout', query: { shouldRefresh: true } })\n        } else {\n          Router.push({ pathname: '/home', query: { shouldRefresh: true } })\n        }\n      }\n    },\n    onError: (error) => {\n      setOtp('');\n    }\n  });\n\n  const submitForm = async (e) => {\n    e.preventDefault();\n    await signinMeMutation({\n      variables: {verification_code: otp, phone: localStorage.getItem('phone_number')}\n    });\n  }\n  \n  return (\n    <Wrapper>\n      <Container>\n        <Heading>\n          <FormattedMessage id='otpForm' defaultMessage='Verify Phone Number' />\n        </Heading>\n\n        <SubHeading>\n          <FormattedMessage\n            id='otpSubText'\n            defaultMessage='Login with your phone number &amp; password'\n          />\n        </SubHeading>\n        <form onSubmit={submitForm}\n        >\n          {/* <Input\n            type='text'\n            placeholder={intl.formatMessage({\n              id: 'verificationCodePlaceholder',\n              defaultMessage: 'Verification Code',\n            })}\n            value={otp}\n            onChange={(e) => setOtp(e.target.value)}\n            required\n            height='48px'\n            backgroundColor='#F7F7F7'\n            mb='10px'\n          /> */}\n          <Button\n            variant='primary'\n            size='big'\n            style={{ width: '100%' }}\n            type='submit'\n          >Continuar</Button>\n        </form>\n        {loading && <p style={{\n          marginTop: \"15px\"\n        }}>{intl.formatMessage({ id: 'loading', defaultMessage: 'Cargando...' })}</p>}\n        {error && <p style={{\n          marginTop: \"15px\",\n          color: \"red\"\n        }}> {error.message}</p>}\n\n      </Container>\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}