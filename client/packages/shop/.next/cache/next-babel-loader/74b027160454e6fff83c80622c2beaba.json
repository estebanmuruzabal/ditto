{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { Box, SelectedItem, MenuItem } from './language-switcher.style';\nimport Popover from 'components/popover/popover';\nimport { FormattedMessage } from 'react-intl';\nimport * as flagIcons from 'assets/icons/flags';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { LANGUAGE_MENU } from 'site-settings/site-navigation';\nimport { Arrow } from '../left-menu/left-menu.style';\nimport { MenuDown } from 'assets/icons/MenuDown';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_USER } from 'graphql/mutation/user';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\n\nvar FlagIcon = function FlagIcon(_ref) {\n  var name = _ref.name;\n  var TagName = flagIcons[name];\n  return !!TagName ? __jsx(TagName, null) : __jsx(\"p\", null, \"Invalid icon \", name);\n};\n\nvar LanguageMenu = function LanguageMenu(_ref2) {\n  var onClick = _ref2.onClick;\n  return __jsx(React.Fragment, null, LANGUAGE_MENU.map(function (item) {\n    return __jsx(MenuItem, {\n      onClick: onClick,\n      key: item.id,\n      value: item.id\n    }, __jsx(\"span\", null, __jsx(FlagIcon, {\n      name: item.icon\n    })), __jsx(FormattedMessage, {\n      id: item.id,\n      defaultMessage: item.defaultMessage\n    }));\n  }));\n};\n\nvar LanguageSwitcher = function LanguageSwitcher() {\n  var _useLocale = useLocale(),\n      locale = _useLocale.locale,\n      changeLanguage = _useLocale.changeLanguage;\n\n  var _React$useContext = React.useContext(AuthContext),\n      user = _React$useContext.authState.user,\n      authDispatch = _React$useContext.authDispatch;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useMutation = useMutation(UPDATE_USER),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateUserMutation = _useMutation2[0];\n\n  var handleSave = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var name, email, id;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              name = state.name, email = state.email, id = state.id; // await updateUserMutation({\n              //   variables: {\n              //     id,\n              //      name,\n              //      email\n              //     }\n              // });\n              // setUserinfoMsg('Update user info successfully');\n              // setTimeout(function () {\n              //   setUserinfoMsg('');\n              // }, 8000)\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSave() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var selectedLanguage = LANGUAGE_MENU.find(function (x) {\n    return x.id === locale;\n  });\n\n  var languageChangeHandler = function languageChangeHandler(e) {\n    changeLanguage(e.target.value);\n  };\n\n  return __jsx(Box, null, __jsx(Popover, {\n    className: \"right\",\n    handler: __jsx(SelectedItem, null, __jsx(\"span\", null, __jsx(FormattedMessage, {\n      id: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.id,\n      defaultMessage: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.defaultMessage\n    })), __jsx(Arrow, null, __jsx(MenuDown, null))),\n    content: __jsx(LanguageMenu, {\n      onClick: languageChangeHandler\n    })\n  }));\n};\n\nexport default LanguageSwitcher;","map":null,"metadata":{},"sourceType":"module"}