{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightSensor.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { HumiditySensorMode, WeekDays, fourRelaysOptions, manualModeOptions, lightModeOptions, LightSensorModes } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, WeekContainer, DayContainer, TextSpaced, CardButtons, ActionButton, Text, Type, Status, ScheduleTimeContainer, ActionsButtons } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { CheckMark } from 'assets/icons/CheckMark';\n\nconst LightSensor = ({\n  plant,\n  settingType,\n  handleSettingsChange,\n  onDeleteSchedule,\n  data,\n  openTab,\n  setOpenTab,\n  handleDeleteSensor\n}) => {\n  var _setting$relayOneIdRe, _setting$relayOneIdRe2, _setting$scheduledOnT, _setting$logs;\n\n  const setting = plant.sensors.find(sensor => sensor.settingType === settingType);\n  const {\n    0: daySelected,\n    1: setDay\n  } = useState('');\n  const {\n    0: editIsOn,\n    1: setEditIsOn\n  } = useState(false);\n  const intl = useIntl();\n  const selectedMode = lightModeOptions.find(option => option.value === setting.mode);\n  const selectedManualState = manualModeOptions.find(option => option.value === setting.relayOneWorking);\n  const relayOneSelected = fourRelaysOptions.find(option => option.value === setting.relayOneIdRelated);\n  const relayTwoSelected = fourRelaysOptions.find(option => option.value === setting.relayTwoIdRelated);\n  const selectStyle = {\n    control: styles => _objectSpread(_objectSpread({}, styles), {}, {\n      width: '160px',\n      textAlign: 'left'\n    })\n  }; // const tabIsOpen = openTab === settingType;\n\n  const tabIsOpen = true;\n\n  const handleModal = (modalComponent, modalProps = {}, className = 'add-time-schedule-modal') => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  return __jsx(PlantsSensorContainer, {\n    style: {\n      height: tabIsOpen ? '100%' : '66px'\n    },\n    onClick: e => {\n      e.stopPropagation();\n      setOpenTab(tabIsOpen ? '' : settingType);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, __jsx(Type, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, getSettingTypeText(setting === null || setting === void 0 ? void 0 : setting.settingType))), __jsx(ListDes, {\n    style: {\n      marginLeft: '-10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, __jsx(CardButtons, {\n    className: \"button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, editIsOn ? __jsx(ActionButton, {\n    onClick: e => {\n      e.stopPropagation();\n      setEditIsOn(!editIsOn);\n    },\n    className: \"edit-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 29\n    }\n  }, __jsx(CheckMark, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 33\n    }\n  })) : __jsx(ActionButton, {\n    onClick: e => {\n      e.stopPropagation();\n      setEditIsOn(!editIsOn);\n    },\n    className: \"edit-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }, __jsx(PencilIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 33\n    }\n  })), __jsx(ActionButton, {\n    onClick: e => {\n      e.stopPropagation();\n      handleDeleteSensor(plant, settingType);\n    },\n    className: \"delete-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, __jsx(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 29\n    }\n  }))))), (setting === null || setting === void 0 ? void 0 : setting.mode) === HumiditySensorMode.NONE && !!openTab && __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, __jsx(Status, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"modoRequiredWarningText\",\n    defaultMessage: \"modoRequiredWarningText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }), \" \")), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"lightId\",\n    defaultMessage: \"lightId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, plant === null || plant === void 0 ? void 0 : plant.light, \" % \", (plant === null || plant === void 0 ? void 0 : plant.light) < 40 ? 'ðŸŒ™' : 'ðŸ’¡'))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantName\",\n    defaultMessage: \"plantName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, editIsOn ? __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: setting.name,\n    placeholder: intl.formatMessage({\n      id: 'plantNameRequiredNameId',\n      defaultMessage: 'plantNameRequiredNameId'\n    }),\n    onChange: e => handleSettingsChange(plant, 'name', e.target.value, settingType),\n    backgroundColor: \"#F7F7F7\",\n    height: \"34.5px\" // intlInputLabelId=\"profileEmailField\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 25\n    }\n  }) : __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }, setting === null || setting === void 0 ? void 0 : setting.name))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"lightModeId\",\n    defaultMessage: \"lightModeId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, editIsOn ? __jsx(Select, {\n    onChange: e => handleSettingsChange(plant, 'mode', e.value, settingType),\n    value: selectedMode,\n    options: lightModeOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }) : __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  }, selectedMode.value.length > 1 ? selectedMode.label : '-'))), ((setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.MANUAL || (setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.SCHEDULE || (setting === null || setting === void 0 ? void 0 : setting.mode) === LightSensorModes.SMART_SCHEDULE) && __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: ((_setting$relayOneIdRe = setting.relayOneIdRelated) === null || _setting$relayOneIdRe === void 0 ? void 0 : _setting$relayOneIdRe.length) ? 'asociatedRelayId' : 'asociateRelayId',\n    defaultMessage: ((_setting$relayOneIdRe2 = setting.relayOneIdRelated) === null || _setting$relayOneIdRe2 === void 0 ? void 0 : _setting$relayOneIdRe2.length) ? 'asociatedRelayId' : 'asociateRelayId',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 19\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  }, editIsOn ? __jsx(Select, {\n    onChange: e => handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType),\n    value: relayOneSelected,\n    options: fourRelaysOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }\n  }) : __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, (setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated.length) > 1 ? getRelayNameText(setting === null || setting === void 0 ? void 0 : setting.relayOneIdRelated) : '-'))), setting.mode === LightSensorModes.MANUAL && __jsx(React.Fragment, null, __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 19\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"manualModeStateId\",\n    defaultMessage: \"manualModeStateId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, __jsx(Select, {\n    onChange: e => handleSettingsChange(plant, 'relayOneWorking', e.value, settingType),\n    value: selectedManualState,\n    options: manualModeOptions,\n    styles: selectStyle,\n    menuPosition: 'fixed',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 19\n    }\n  })))), (setting.mode === LightSensorModes.SCHEDULE || setting.mode === LightSensorModes.SMART_SCHEDULE) && __jsx(React.Fragment, null, __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"manualModeStateId\",\n    defaultMessage: \"manualModeStateId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 21\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: setting.relayOneWorking ? 'manualModeStateOnId' : 'manualModeStateOffId',\n    defaultMessage: \"noDefaultOnOffMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 25\n    }\n  })))), __jsx(ListItem, {\n    style: {\n      justifyContent: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 21\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"notifyChangesId\",\n    defaultMessage: \"notifyChangesId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 25\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, __jsx(Switch, {\n    disabled: false,\n    checked: setting.whatsappWarningsOn,\n    labelPosition: 'right' // className,\n    ,\n    onUpdate: () => handleSettingsChange(plant, 'whatsappWarningsOn', !setting.whatsappWarningsOn, settingType),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 25\n    }\n  }))), setting === null || setting === void 0 ? void 0 : (_setting$scheduledOnT = setting.scheduledOnTimes) === null || _setting$scheduledOnT === void 0 ? void 0 : _setting$scheduledOnT.map((schedule, i) => {\n    return __jsx(WeekContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 25\n      }\n    }, __jsx(ListDes, {\n      style: {\n        flexDirection: 'row',\n        display: 'flex',\n        paddingBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 29\n      }\n    }, Object.keys(WeekDays).map((day, i) => {\n      return __jsx(DayContainer, {\n        key: i + '-day-light-1-container',\n        style: {\n          backgroundColor: schedule.daysToRepeat.includes(day) ? '#c2b0b0' : 'transparent'\n        } // onClick={() => setDay(day)}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 41\n        }\n      }, day.substring(0, 2));\n    })), __jsx(ScheduleTimeContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 29\n      }\n    }, __jsx(TextSpaced, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 33\n      }\n    }, \" \", __jsx(FormattedMessage, {\n      id: \"desdeId\",\n      defaultMessage: \"desdeId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 46\n      }\n    }), \" \"), __jsx(TextSpaced, {\n      bold: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 33\n      }\n    }, schedule.startTime), __jsx(TextSpaced, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 33\n      }\n    }, \" \", __jsx(FormattedMessage, {\n      id: \"aId\",\n      defaultMessage: \"aId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 46\n      }\n    }), \" \"), __jsx(TextSpaced, {\n      bold: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 33\n      }\n    }, schedule.endTime), __jsx(ActionsButtons, {\n      className: \"button-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 33\n      }\n    }, __jsx(ActionButton, {\n      onClick: () => {\n        var _data$getUser;\n\n        return handleModal(AddTimeSchedule, {\n          settingType: settingType,\n          plant,\n          id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n          schedulePosition: i\n        });\n      },\n      className: \"edit-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 37\n      }\n    }, __jsx(PencilIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 41\n      }\n    })), __jsx(ActionButton, {\n      onClick: () => onDeleteSchedule(plant, settingType, i),\n      className: \"delete-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 37\n      }\n    }, __jsx(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 41\n      }\n    })))));\n  }), __jsx(Button, {\n    size: \"small\",\n    variant: \"outlined\",\n    type: \"button\",\n    className: \"add-button\",\n    onClick: () => {\n      var _data$getUser2;\n\n      return handleModal(AddTimeSchedule, {\n        name: 'add-humidity-1-schedule',\n        plant,\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n        settingType\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addTimeScheduleId\",\n    defaultMessage: \"addTimeScheduleId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 21\n    }\n  }))), (setting === null || setting === void 0 ? void 0 : (_setting$logs = setting.logs) === null || _setting$logs === void 0 ? void 0 : _setting$logs.length) > 0 && __jsx(HumidityLogsGraph, {\n    data: setting.logs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 46\n    }\n  }));\n};\n\nexport default LightSensor;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightSensor.tsx"],"names":["React","useState","CloseIcon","PencilIcon","Button","Switch","FormattedMessage","useIntl","Select","Input","HumiditySensorMode","WeekDays","fourRelaysOptions","manualModeOptions","lightModeOptions","LightSensorModes","HumidityLogsGraph","PlantsSensorContainer","ListItem","ListTitle","ListDes","WeekContainer","DayContainer","TextSpaced","CardButtons","ActionButton","Text","Type","Status","ScheduleTimeContainer","ActionsButtons","openModal","AddTimeSchedule","getRelayNameText","getSettingTypeText","CheckMark","LightSensor","plant","settingType","handleSettingsChange","onDeleteSchedule","data","openTab","setOpenTab","handleDeleteSensor","setting","sensors","find","sensor","daySelected","setDay","editIsOn","setEditIsOn","intl","selectedMode","option","value","mode","selectedManualState","relayOneWorking","relayOneSelected","relayOneIdRelated","relayTwoSelected","relayTwoIdRelated","selectStyle","control","styles","width","textAlign","tabIsOpen","handleModal","modalComponent","modalProps","className","show","config","height","enableResizing","disableDragging","closeOnClickOutside","component","componentProps","item","e","stopPropagation","justifyContent","marginLeft","NONE","light","name","formatMessage","id","defaultMessage","target","length","label","MANUAL","SCHEDULE","SMART_SCHEDULE","whatsappWarningsOn","scheduledOnTimes","map","schedule","i","flexDirection","display","paddingBottom","Object","keys","day","backgroundColor","daysToRepeat","includes","substring","startTime","endTime","getUser","schedulePosition","logs"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions, lightModeOptions, LightSensorModes } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, ButtonText, Type, Status, ScheduleTimeContainer, ActionsButtons } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { CheckMark } from 'assets/icons/CheckMark';\n\ninterface Props {\n  data?: any;\n  plant: any;\n  settingType: SensorsTypes;\n  openTab: string;\n  setOpenTab: (settingType: string) => void;\n  handleSettingsChange: (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => void;\n  onDeleteSchedule: (plant: any, settingType: SensorsTypes, position: number) => void;\n  handleDeleteSensor: (plant: any, settingType: string) => void;\n}\n\nconst LightSensor: React.FC<Props> = ({ plant, settingType, handleSettingsChange, onDeleteSchedule, data, openTab, setOpenTab, handleDeleteSensor }) => {\n    const setting = plant.sensors.find((sensor: ISetting) => sensor.settingType === settingType);\n    const [daySelected, setDay] = useState('');\n    const [editIsOn, setEditIsOn] = useState(false);\n    const intl = useIntl();\n    const selectedMode = lightModeOptions.find((option) => option.value === setting.mode);\n    const selectedManualState = manualModeOptions.find((option) => option.value === setting.relayOneWorking);\n    const relayOneSelected = fourRelaysOptions.find((option) => option.value === setting.relayOneIdRelated);\n    const relayTwoSelected = fourRelaysOptions.find((option) => option.value === setting.relayTwoIdRelated);\n    const selectStyle = { control: styles => ({ ...styles, width: '160px', textAlign: 'left' }) };\n    // const tabIsOpen = openTab === settingType;\n    const tabIsOpen = true;\n\n    const handleModal = (\n        modalComponent: any,\n        modalProps = {},\n        className: string = 'add-time-schedule-modal'\n        ) => {\n        openModal({\n            show: true,\n            config: {\n            width: 360,\n            height: 'auto',\n            enableResizing: false,\n            disableDragging: true,\n            className: className,\n            },\n            closeOnClickOutside: true,\n            component: modalComponent,\n            componentProps: { item: modalProps },\n        });\n    };\n\n    return (\n        <PlantsSensorContainer style={{ height: tabIsOpen ? '100%' : '66px' }} onClick={(e) => { e.stopPropagation(); setOpenTab(tabIsOpen ? '' : settingType); }}>\n            <ListItem style={{ justifyContent: 'flex-start' }}>\n                <ListTitle>\n                    <Type bold>{getSettingTypeText(setting?.settingType)}</Type>\n                </ListTitle>\n                <ListDes style={{ marginLeft: '-10px' }}>\n                    <CardButtons className='button-wrapper'>\n                        { editIsOn ? (\n                            <ActionButton onClick={(e) => { e.stopPropagation(); setEditIsOn(!editIsOn); }} className='edit-btn'>\n                                <CheckMark />\n                            </ActionButton>\n                        ) : (\n                            <ActionButton onClick={(e) => { e.stopPropagation(); setEditIsOn(!editIsOn); }} className='edit-btn'>\n                                <PencilIcon />\n                            </ActionButton>\n                        )}\n                        <ActionButton onClick={(e) => { e.stopPropagation(); handleDeleteSensor(plant, settingType); }} className='delete-btn'>\n                            <CloseIcon />\n                        </ActionButton>\n                    </CardButtons>\n                </ListDes>\n            </ListItem>\n\n\n            { (setting?.mode === HumiditySensorMode.NONE && !!openTab) && (\n                <ListItem>\n                    <Status><FormattedMessage id=\"modoRequiredWarningText\" defaultMessage=\"modoRequiredWarningText\" /> </Status>\n                </ListItem>\n            )}\n\n          <ListItem style={{ justifyContent: 'flex-start' }}>\n            <ListTitle>\n              <Text>\n                <FormattedMessage\n                  id=\"lightId\"\n                  defaultMessage=\"lightId\"\n                />\n              </Text>\n            </ListTitle>\n            <ListDes>\n              <Text bold>{plant?.light} % {plant?.light < 40 ? 'ðŸŒ™' : 'ðŸ’¡'}</Text>\n            </ListDes>\n          </ListItem>\n  \n          <ListItem style={{ justifyContent: 'flex-start' }}>\n                <ListTitle>\n                    <Text>\n                    <FormattedMessage\n                        id=\"plantName\"\n                        defaultMessage=\"plantName\"\n                    />\n                    </Text>\n                </ListTitle>\n                <ListDes>\n                    { editIsOn ? (\n                        <Input\n                            type='text'\n                            name='name'\n                            value={setting.name}\n                            placeholder={intl.formatMessage({ id: 'plantNameRequiredNameId', defaultMessage: 'plantNameRequiredNameId' })}\n                            onChange={(e: any) => handleSettingsChange(plant, 'name', e.target.value, settingType)}\n                            backgroundColor='#F7F7F7'\n                            height='34.5px'\n                            // intlInputLabelId=\"profileEmailField\"\n                        />\n                    ) : (\n                        <Text bold>{setting?.name}</Text>\n                    )}\n                </ListDes>\n            </ListItem>\n\n          <ListItem style={{ justifyContent: 'flex-start' }}>\n            <ListTitle>\n              <Text>\n                <FormattedMessage\n                  id=\"lightModeId\"\n                  defaultMessage=\"lightModeId\"\n                />\n              </Text>\n            </ListTitle>\n            <ListDes>\n                { editIsOn ? (\n                    <Select \n                        onChange={(e: any) => handleSettingsChange(plant, 'mode', e.value, settingType)}\n                        value={selectedMode}\n                        options={lightModeOptions}\n                        styles={selectStyle}\n                        menuPosition={'fixed'}\n                    />\n                ) : (\n                    <Text  bold>{selectedMode.value.length > 1 ? selectedMode.label : '-'}</Text>\n                )}\n            </ListDes>\n          </ListItem>\n  \n          { (setting?.mode === LightSensorModes.MANUAL || setting?.mode === LightSensorModes.SCHEDULE || setting?.mode === LightSensorModes.SMART_SCHEDULE) && (\n            <ListItem>\n              <ListTitle>\n                <Text bold>\n                  <FormattedMessage\n                    id={setting.relayOneIdRelated?.length ? 'asociatedRelayId': 'asociateRelayId'}\n                    defaultMessage={setting.relayOneIdRelated?.length ? 'asociatedRelayId': 'asociateRelayId'}\n                  />\n                </Text>\n              </ListTitle>\n              <ListDes>\n              { editIsOn ? (\n                    <Select \n                        onChange={(e: any) => handleSettingsChange(plant, 'relayOneIdRelated', e.value, settingType)}\n                        value={relayOneSelected}\n                        options={fourRelaysOptions}\n                        styles={selectStyle}\n                        menuPosition={'fixed'}\n                    />\n                ) : (\n                    <Text bold>{setting?.relayOneIdRelated.length > 1 ? getRelayNameText(setting?.relayOneIdRelated) : '-'}</Text>\n                )}\n              </ListDes>\n            </ListItem>\n          )}\n          \n          { setting.mode === LightSensorModes.MANUAL && (\n            <>\n              <ListItem>\n                <ListTitle>\n                  <Text bold>\n                    <FormattedMessage\n                      id='manualModeStateId'\n                      defaultMessage='manualModeStateId'\n                    />\n                  </Text>\n                </ListTitle>\n                <ListDes>\n                  <Select \n                    onChange={(e: any) => handleSettingsChange(plant, 'relayOneWorking', e.value, settingType)}\n                    value={selectedManualState}\n                    options={manualModeOptions}\n                    styles={selectStyle}\n                    menuPosition={'fixed'}\n                  />\n                </ListDes>\n              </ListItem>\n            </>\n          )}\n\n          { (setting.mode === LightSensorModes.SCHEDULE || setting.mode === LightSensorModes.SMART_SCHEDULE) && (\n            <>\n              <ListItem style={{ justifyContent: 'flex-start' }}>\n                <ListTitle>\n                <Text>\n                    <FormattedMessage\n                    id=\"manualModeStateId\"\n                    defaultMessage=\"manualModeStateId\"\n                    />\n                </Text>\n                </ListTitle>\n                <ListDes>\n                    <Text  bold> \n                        <FormattedMessage\n                        id={setting.relayOneWorking ? 'manualModeStateOnId' : 'manualModeStateOffId'}\n                        defaultMessage='noDefaultOnOffMsg'\n                        />\n                    </Text>\n                    </ListDes>\n                </ListItem>\n\n                <ListItem style={{ justifyContent: 'flex-start' }}>\n                    <ListTitle>\n                    <Text>\n                        <FormattedMessage\n                        id=\"notifyChangesId\"\n                        defaultMessage=\"notifyChangesId\"\n                        />\n                    </Text>\n                    </ListTitle>\n                    <ListDes>\n                        <Switch \n                            disabled={false}\n                            checked={setting.whatsappWarningsOn}\n                            labelPosition={'right'}\n                            // className,\n                            onUpdate={() => handleSettingsChange(plant, 'whatsappWarningsOn', !setting.whatsappWarningsOn, settingType)}\n                        />\n                    </ListDes>\n                </ListItem>\n\n                { setting?.scheduledOnTimes?.map((schedule: any, i: number) => {\n                    return (\n                        <WeekContainer>\n                            <ListDes style={{ flexDirection: 'row', display: 'flex', paddingBottom: '10px' }} >\n                                {Object.keys(WeekDays).map((day, i: number) => {\n                                    return (\n                                        <DayContainer\n                                            key={i + '-day-light-1-container'}\n                                            style={{ backgroundColor: schedule.daysToRepeat.includes(day) ? '#c2b0b0' : 'transparent' }}\n                                            // onClick={() => setDay(day)}\n                                        >\n                                            {day.substring(0,2)}\n                                        </DayContainer>\n                                        )\n                                    })\n                                }\n                            </ListDes>\n                            <ScheduleTimeContainer>\n                                <TextSpaced> <FormattedMessage id='desdeId' defaultMessage='desdeId' /> </TextSpaced> \n                                <TextSpaced bold>{schedule.startTime}</TextSpaced>\n                                <TextSpaced> <FormattedMessage id='aId' defaultMessage='aId' /> </TextSpaced> \n                                <TextSpaced bold>{schedule.endTime}</TextSpaced>\n                                <ActionsButtons className='button-wrapper'>\n                                    <ActionButton onClick={() => handleModal( AddTimeSchedule, { settingType: settingType, plant, id: data?.getUser?.id, schedulePosition: i } )} className='edit-btn'>\n                                        <PencilIcon />\n                                    </ActionButton>\n\n                                    <ActionButton onClick={() => onDeleteSchedule(plant, settingType, i)} className='delete-btn'>\n                                        <CloseIcon />\n                                    </ActionButton>\n                                </ActionsButtons>\n                            </ScheduleTimeContainer>\n                        </WeekContainer>\n                    )\n                })}\n\n                <Button\n                    size='small'\n                    variant='outlined'\n                    type='button'\n                    className='add-button'\n                    onClick={() => handleModal(\n                        AddTimeSchedule,  { name: 'add-humidity-1-schedule', plant, id: data?.getUser?.id, settingType } )}\n                >\n                    <FormattedMessage id='addTimeScheduleId' defaultMessage='addTimeScheduleId' />\n                </Button>\n            </>\n            )}\n\n            { setting?.logs?.length > 0 && ( <HumidityLogsGraph data={setting.logs} /> )}\n        </PlantsSensorContainer>\n      )\n};\n\nexport default LightSensor;\n"]},"metadata":{},"sourceType":"module"}