{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nvar HumidityReading = function HumidityReading(_ref) {\n  var _data$getUser, _data$getUser$plants, _data$getUser$plants$, _data$getUser$plants$2;\n\n  var plant = _ref.plant,\n      settingType = _ref.settingType;\n  var setting = plant.sensors.find(function (module) {\n    return module.settingType === settingType;\n  });\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var sensorIndex = Number(setting === null || setting === void 0 ? void 0 : setting.settingType[(setting === null || setting === void 0 ? void 0 : setting.settingType.length) - 1]);\n  var plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(function (plant) {\n    return plant.plantId === plant.plantId;\n  });\n  var reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors[sensorIndex]) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.reading;\n  console.log('setting?.settingType', setting === null || setting === void 0 ? void 0 : setting.settingType);\n  console.log('plantIndex', plantIndex);\n  console.log('reading', reading); // if (reading > -5 && reading <= 0) reading = 0;\n  // if (reading >= 100 && reading < 110) reading = 100;\n  // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ğŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ğŸ’§' : 'Disconected';\n\n  var readingFormatted = reading >= 0 && reading <= 110 ? \"\".concat(reading, \" % \\uD83D\\uDCA7\") : 'Disconected';\n  return __jsx(Text, {\n    bold: true\n  }, readingFormatted);\n};\n\nexport default HumidityReading;","map":null,"metadata":{},"sourceType":"module"}