{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { DeliveryMethodsConstants, deliveryMethodCookieKeyName } from 'utils/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { DELIVERY_METHOD } from 'graphql/query/delivery';\nimport { GiftBox } from 'assets/icons/GiftBox';\nimport Checkbox from 'components/checkbox/checkbox';\nimport { setCookie } from 'utils/session';\nimport { CardWrapper, Container, DeliveryMethods, DeliveryText, Heading, Input, Offer, OfferSection, Options, Wrapper } from './delivery-selection.style';\n\nconst DeliverySelection = (_ref) => {\n  var _deliverData$delivery;\n\n  let props = Object.assign({}, _ref);\n  const [deliveryMethodTypeSelected, setDeliveryMethodType] = React.useState();\n  const [deliveryMethodSelected, setDeliveryMethod] = React.useState(undefined);\n  const {\n    data: deliverData\n  } = useQuery(DELIVERY_METHOD);\n  const deliveryMethods = deliverData === null || deliverData === void 0 ? void 0 : (_deliverData$delivery = deliverData.deliveryMethods) === null || _deliverData$delivery === void 0 ? void 0 : _deliverData$delivery.items; // const [address, setDeliveryAddress] = useState(\"\");\n\n  const [zipCode, setZipCode] = React.useState('');\n  const [searchResult, setSearchResult] = React.useState([]); // useEffect(() => {\n  //   if (getCookie(deliveryMethodCookieKeyName) && !props.deliveryMethodSaved) {\n  //     const deliveryMethodSaved = JSON.parse(getCookie(deliveryMethodCookieKeyName));\n  //     props.setDeliveryMethodSaved(deliveryMethodSaved)\n  //   }\n  // }, [props.deliveryMethodSaved]);\n\n  const setDeliveryMethodAndSaveCookie = deli => {\n    setDeliveryMethod(deli);\n    props.setDeliveryMethodSaved(deli); // if (getCookie('first_visit')) {\n\n    setCookie(deliveryMethodCookieKeyName, deli); // }\n  };\n\n  const searchDeliveryZipCode = (e, deli) => {\n    handleOnFocus(e);\n    setZipCode(deli);\n    const deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(deliveryMethod => {\n      return !deliveryMethod.isPickUp;\n    });\n    const methodFound = deliveryOptionsMethods.filter(method => method.name.includes(zipCode));\n    e.stopPropagation();\n    setSearchResult(deli ? methodFound : null);\n  };\n\n  const searchPickupZipCode = (e, deli) => {\n    handleOnFocus(e);\n    setZipCode(deli);\n    const pickUpOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(deliveryMethod => {\n      return deliveryMethod.isPickUp === true;\n    });\n    const methodFound = pickUpOptionsMethods.filter(method => method.details.includes(zipCode));\n    e.stopPropagation();\n    setSearchResult(deli ? methodFound : null);\n  };\n\n  const setDelivery = (e, deli) => {\n    e.stopPropagation();\n    setDeliveryMethodType(deli);\n    setSearchResult(null);\n    setZipCode('');\n  };\n\n  const handleOnFocus = event => {\n    event.preventDefault();\n    event.stopPropagation();\n  }; // deliveryMethodSelected\n\n\n  const isPickUpSelected = deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP;\n  const isDeliverySelected = deliveryMethodTypeSelected === DeliveryMethodsConstants.DELIVERY;\n  return __jsx(DeliveryMethods, null, __jsx(Options, null, __jsx(CardWrapper, {\n    color: isPickUpSelected ? '#009E7F' : '#e4f4fc',\n    onClick: e => setDelivery(e, DeliveryMethodsConstants.PICKUP)\n  }, \"Pickup\"), __jsx(CardWrapper, {\n    color: isDeliverySelected ? '#009E7F' : '#e4f4fc',\n    onClick: e => setDelivery(e, DeliveryMethodsConstants.DELIVERY)\n  }, \"Delivery\")), __jsx(Wrapper, null, !!deliveryMethodTypeSelected && __jsx(Container, null, __jsx(Heading, {\n    onClick: e => handleOnFocus(e)\n  }, isPickUpSelected ? __jsx(FormattedMessage, {\n    id: \"pickupModalheading\",\n    defaultMessage: \"Select Your Location\"\n  }) : __jsx(FormattedMessage, {\n    id: \"deliveryModalheading\",\n    defaultMessage: \"Select Your Location\"\n  })), __jsx(\"div\", {\n    onClick: e => handleOnFocus(e)\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    onFocus: e => handleOnFocus(e),\n    placeholder: \"ZIP Code\",\n    value: zipCode // we have to change the onChange because the is no one for the controller name actualy\n    ,\n    onChange: e => isPickUpSelected ? searchPickupZipCode(e, e.target.value) : searchDeliveryZipCode(e, e.target.value),\n    width: \"197px\",\n    height: \"34.5px\"\n  })), (searchResult === null || searchResult === void 0 ? void 0 : searchResult.length) === 0 && zipCode.length > 4 && __jsx(DeliveryText, null, deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP ? 'No Dittos Pickup Locations found, yet, sorry' : 'Sorry, we dont deliver there, yet..'), (searchResult === null || searchResult === void 0 ? void 0 : searchResult.length) ? searchResult.map((result, i) => {\n    return __jsx(Checkbox, {\n      keyName: `${i}-results`,\n      isChecked: (deliveryMethodSelected === null || deliveryMethodSelected === void 0 ? void 0 : deliveryMethodSelected.id) === result.id,\n      labelText: `${result.name} - ${result.details}`,\n      id: `result-${i}`,\n      onChange: e => {\n        setDeliveryMethodAndSaveCookie((deliveryMethodSelected === null || deliveryMethodSelected === void 0 ? void 0 : deliveryMethodSelected.id) === result.id ? null : result);\n      }\n    });\n  }) : ''), __jsx(OfferSection, null, __jsx(GiftBox, null), __jsx(Offer, null, __jsx(FormattedMessage, {\n    id: \"locationModalFooter\",\n    defaultMessage: \"Free Delivery For 1st Order\",\n    values: {\n      number: 1\n    }\n  })))));\n};\n\nexport default DeliverySelection;","map":null,"metadata":{},"sourceType":"module"}