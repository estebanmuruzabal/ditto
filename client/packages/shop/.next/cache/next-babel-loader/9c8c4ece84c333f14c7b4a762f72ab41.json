{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, SensorsTypes, timeZone, timezones } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantsPageContainer, OrderDetails, BlockTitle, Text, ListItem, ListTitle, ListDes, ButtonText, PlantPageWrapper, Column1, Row1, DashboardContainer, SensorsWrapper } from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { CREATE_UPDATE_PLANT, DELETE_SETTING, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\nimport Select from 'react-select';\nimport Plug from './sensors/Plug';\nimport DistanceSensor from './sensors/DistanceSensor';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { getLastNumOfSensor, getSensorWithoutNumber } from 'utils/ditto-bot';\nimport AirHumidity from './sensors/AirHumiditySensor';\nimport AirTemperature from './sensors/AirTemperatureSensor';\nimport LastConectionReading from './sensors/sensor-readings/LastConectionReading';\nimport Switch from 'components/switch/switch';\n\nvar YourPlants = function YourPlants(_ref) {\n  _s();\n\n  var deviceType = _ref.deviceType,\n      userRefetch = _ref.userRefetch;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useContext2 = useContext(AuthContext),\n      authDispatch = _useContext2.authDispatch;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      _useQuery$data = _useQuery.data,\n      data = _useQuery$data === void 0 ? {} : _useQuery$data; // const { loading1, error1, data1 = {} } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n  //   notifyOnNetworkStatusChange: true,\n  //   fetchPolicy: \"network-only\",\n  //   // pollInterval: 5000,\n  // });\n  // const router = useRouter();\n\n\n  var intl = useIntl();\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setPlantName = _useState[1];\n\n  var _useState2 = useState(''),\n      openTab = _useState2[0],\n      setOpenTab = _useState2[1];\n\n  var _useState3 = useState(''),\n      errorId = _useState3[0],\n      setErrorId = _useState3[1];\n\n  var _useState4 = useState(''),\n      plantId = _useState4[0],\n      setControllerID = _useState4[1];\n\n  var _useState5 = useState(''),\n      userinfoMsg = _useState5[0],\n      setUserinfoMsg = _useState5[1];\n\n  var _useState6 = useState(''),\n      sensorSelected = _useState6[0],\n      setSensor = _useState6[1];\n\n  var _useState7 = useState(''),\n      timezoneSelected = _useState7[0],\n      setTimezone = _useState7[1];\n\n  var _useMutation = useMutation(CREATE_UPDATE_PLANT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addPlant = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_SETTING),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateSetting = _useMutation4[0];\n\n  var _useMutation5 = useMutation(DELETE_SETTING),\n      _useMutation6 = _slicedToArray(_useMutation5, 1),\n      deleteSetting = _useMutation6[0];\n\n  var plants = state.plants;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: intl.formatMessage({\n        id: 'loading',\n        defaultMessage: 'Cargando...'\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n\n  var shouldNotAssignRelay = function shouldNotAssignRelay(plant, field, value) {\n    var relayOneIdRelated = 'relayOneIdRelated';\n    var relayTwoIdRelated = 'relayTwoIdRelated';\n    if (field !== relayOneIdRelated && field !== relayTwoIdRelated) return false;\n    plant.sensors.map(function (module) {\n      if ((module[relayOneIdRelated] === value || module[relayTwoIdRelated] === value) && value !== '') {\n        var texto1 = intl.formatMessage({\n          id: 'relayAlreadyAssinged',\n          defaultMessage: 'Relay already assigned in '\n        });\n        var texto2 = intl.formatMessage({\n          id: 'relayAlreadyAssinged2',\n          defaultMessage: 'desigagned  '\n        });\n        var hasConfirmed = confirm(texto1 + module.name + texto2);\n        if (hasConfirmed) return false;\n        return false;\n      }\n    });\n    return false;\n  };\n\n  var defaultSettingValuesIfModeChanges = function defaultSettingValuesIfModeChanges(plant, field, value, settingType) {\n    var mode = 'mode';\n    if (field !== mode) return plant;\n    var settingIndex = plant.sensors.findIndex(function (module) {\n      return module.settingType === settingType;\n    });\n    plant.sensors[settingIndex] = getDefaultSetting(settingType, plant.sensors[settingIndex].name, value === CommonMode.NONE ? [] : plant.sensors[settingIndex].logs);\n    return plant;\n  };\n\n  var isClean = function isClean(plant, field, value) {\n    // min max checks\n    var minWarning = 'minWarning';\n    var maxWarning = 'maxWarning';\n    if (field !== minWarning && field !== maxWarning) return true;\n\n    if (Number(value) < 0 || Number(value) > 100) {\n      setErrorId(field);\n      setTimeout(function () {\n        setErrorId('');\n      }, 2000);\n      return false;\n    }\n\n    setErrorId(''); // add more checks\n\n    return true;\n  };\n\n  var handleSettingsChange = function handleSettingsChange(plant, field, value, settingType) {\n    // if we want to stop user to reuse plugs, uncomment line bellow\n    if (shouldNotAssignRelay(plant, field, value)) return; // we dont want to reset enchufes or values. YET\n\n    plant = defaultSettingValuesIfModeChanges(plant, field, value, settingType);\n    dispatch({\n      type: settingType,\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    if (isClean(plant, field, value)) dispatchSettingSave(plant, field, value, settingType);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var handleCreateUpdatePlantOnClick = function handleCreateUpdatePlantOnClick(plant, name, newPlant, timeZone, offline_notification) {\n    setTimezone(timeZone);\n    setTimeout(function () {\n      var _data$getUser;\n\n      addPlant({\n        variables: _objectSpread(_objectSpread({\n          id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n          name: name,\n          plantId: newPlant ? Number(plantId) : plant.plantId\n        }, timeZone && {\n          timeZone: timeZone\n        }), {}, {\n          offline_notification: offline_notification\n        })\n      });\n    }, 2000);\n    setUserinfoMsg(newPlant ? 'added plant successfully' : 'updated plant successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  var handleDeleteSensor = function handleDeleteSensor(plantSelected, settingType) {\n    var _data$getUser2;\n\n    deleteSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n        plantId: plantSelected.plantId,\n        settingName: settingType\n      }\n    });\n    var plantIndex = plants.findIndex(function (plant) {\n      return plant.plantId === plantSelected.plantId;\n    });\n    var settingIndex = plants[plantIndex].sensors.findIndex(function (module) {\n      return module.settingType === settingType;\n    });\n    dispatch({\n      type: 'DELETE_MODULE',\n      payload: {\n        plantIndex: plantIndex,\n        settingIndex: settingIndex\n      }\n    });\n    setUserinfoMsg('deleted setting successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  var onDeleteSchedule = function onDeleteSchedule(plant, settingType, scheduleIndex) {\n    var _plant$sensors$settin, _data$getUser3;\n\n    var settingIndex = plant.sensors.findIndex(function (module) {\n      return module.settingType === settingType;\n    });\n    (_plant$sensors$settin = plant.sensors[settingIndex]) === null || _plant$sensors$settin === void 0 ? void 0 : _plant$sensors$settin.scheduledOnTimes.splice(scheduleIndex, 1);\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser3 = data.getUser) === null || _data$getUser3 === void 0 ? void 0 : _data$getUser3.id,\n        plantId: plant.plantId,\n        input: _objectSpread(_objectSpread({}, plant.sensors[settingIndex]), {}, {\n          settingType: settingType\n        })\n      }\n    });\n    setUserinfoMsg('deleted schedule successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000);\n  };\n\n  var getDefaultSetting = function getDefaultSetting(settingTypeName, name, logs) {\n    return {\n      name: name || '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: logs || [],\n      scheduledOnTimes: [],\n      settingType: settingTypeName\n    };\n  };\n\n  var dispatchSettingSave = function dispatchSettingSave(plant, fieldName, fieldValue, settingType) {\n    var _data$getUser4;\n\n    var settingIndex = plant.sensors.findIndex(function (module) {\n      return module.settingType === settingType;\n    });\n    plant.sensors[settingIndex][fieldName] = fieldValue;\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser4 = data.getUser) === null || _data$getUser4 === void 0 ? void 0 : _data$getUser4.id,\n        plantId: plant.plantId,\n        input: plant.sensors[settingIndex]\n      }\n    });\n  };\n\n  var getSensorCompleteName = function getSensorCompleteName(plant, settingType) {\n    var _plant$sensors;\n\n    var sensorNewNumber = 1;\n    plant === null || plant === void 0 ? void 0 : (_plant$sensors = plant.sensors) === null || _plant$sensors === void 0 ? void 0 : _plant$sensors.map(function (module) {\n      var lastSensorNum = getLastNumOfSensor(module.settingType);\n      var rawSensorTypeName = getSensorWithoutNumber(module === null || module === void 0 ? void 0 : module.settingType);\n\n      if (!isNaN(lastSensorNum) && rawSensorTypeName === settingType) {\n        sensorNewNumber = lastSensorNum + 1;\n      }\n    });\n    return \"\".concat(settingType, \"_\").concat(sensorNewNumber);\n  };\n\n  var dispatchNewSettingSave = function dispatchNewSettingSave(plant, settingType, plantIndex) {\n    var _data$getUser5;\n\n    var completeSensorTypeName = getSensorCompleteName(plant, settingType);\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser5 = data.getUser) === null || _data$getUser5 === void 0 ? void 0 : _data$getUser5.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(completeSensorTypeName)\n      }\n    });\n    dispatch({\n      type: 'ADD_MODULE',\n      payload: {\n        plantIndex: plantIndex,\n        setting: getDefaultSetting(completeSensorTypeName)\n      }\n    });\n  };\n\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '197px',\n        textAlign: 'left'\n      });\n    }\n  };\n  var sensorsOptions = [{\n    value: SensorsTypes.DISTANCE,\n    label: intl.formatMessage({\n      id: 'distanceId',\n      defaultMessage: 'distanceId'\n    })\n  }, {\n    value: SensorsTypes.SOIL_HUMIDITY,\n    label: intl.formatMessage({\n      id: 'moistHumidityId',\n      defaultMessage: 'moistHumidityId'\n    })\n  }, {\n    value: SensorsTypes.HUMIDITY,\n    label: intl.formatMessage({\n      id: 'airHumidityId',\n      defaultMessage: 'airHumidityId'\n    })\n  }, {\n    value: SensorsTypes.TEMPETURE,\n    label: intl.formatMessage({\n      id: 'airTempetureId',\n      defaultMessage: 'airTempetureId'\n    })\n  }, {\n    value: SensorsTypes.LIGHT,\n    label: intl.formatMessage({\n      id: 'lightSensorId',\n      defaultMessage: 'lightSensorId'\n    })\n  }, {\n    value: SensorsTypes.PLUG,\n    label: intl.formatMessage({\n      id: 'intelligentPlugId',\n      defaultMessage: 'intelligentPlugId'\n    })\n  }];\n  var timezonesList = timezones.map(function (timezone) {\n    return {\n      value: timezone,\n      label: timezone\n    };\n  });\n  return __jsx(PlantPageWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 5\n    }\n  }, __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/profile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: \"home-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"backProfileBtn\",\n    defaultMessage: \"Back to Profile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }\n  }))), __jsx(OrderDetails, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }\n  }, __jsx(BlockTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"dittoBotsIds\",\n    defaultMessage: \"dittoBotsIds\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }\n  })), (plants === null || plants === void 0 ? void 0 : plants.length) < 1 && __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 36\n    }\n  }, intl.formatMessage({\n    id: 'noDittoBotsTextId',\n    defaultMessage: 'noDittoBotsTextId'\n  })), plants === null || plants === void 0 ? void 0 : plants.map(function (plant, i) {\n    var sensors = plant.sensors;\n    plant.timeZone = timeZone;\n    return __jsx(DashboardContainer, {\n      key: i + '-orderList',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }\n    }, __jsx(Row1, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 19\n      }\n    }, __jsx(Column1, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 21\n      }\n    }, __jsx(ListItem, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"controllerNameId\",\n      defaultMessage: \"controllerNameId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 25\n      }\n    }, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      disabled: true,\n      value: plant === null || plant === void 0 ? void 0 : plant.name // we have to change the onChange because the is no one for the controller name actualy\n      ,\n      onChange: function onChange(e) {\n        return handleCreateUpdatePlantOnClick(plant, e.target.value, false, timeZone);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 27\n      }\n    }))), __jsx(ListItem, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"statusId\",\n      defaultMessage: \"statusId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 25\n      }\n    }, __jsx(LastConectionReading, {\n      key: 'lastcon' + i,\n      plantIndex: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 27\n      }\n    }))), __jsx(ListItem, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 25\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"offlineNotificationId\",\n      defaultMessage: \"offlineNotificationId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 29\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 25\n      }\n    }, __jsx(Switch, {\n      disabled: false,\n      checked: plant.offline_notification,\n      labelPosition: 'right' // className,\n      ,\n      onUpdate: function onUpdate(e) {\n        return handleCreateUpdatePlantOnClick(plant, plant.name, false, plant.timeZone, !plant.offline_notification);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 27\n      }\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 23\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 27\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 27\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addSensorId\",\n      defaultMessage: \"addSensorId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 31\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 27\n      }\n    }, __jsx(Select, {\n      onChange: function onChange(e) {\n        return dispatchNewSettingSave(plant, e.value, i);\n      },\n      value: sensorSelected // @ts-ignore\n      ,\n      options: sensorsOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 27\n      }\n    }))))), __jsx(SensorsWrapper, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 19\n      }\n    }, sensors === null || sensors === void 0 ? void 0 : sensors.map(function (module, index) {\n      switch (module === null || module === void 0 ? void 0 : module.settingType) {\n        case \"\".concat(SensorsTypes.SOIL_HUMIDITY, \"_1\"):\n        case \"\".concat(SensorsTypes.SOIL_HUMIDITY, \"_2\"):\n        case \"\".concat(SensorsTypes.SOIL_HUMIDITY, \"_3\"):\n          // check the number of same setting to send\n          return __jsx(SoilHumiditySensor, {\n            key: i + module.settingType,\n            data: data,\n            plant: plant,\n            errorId: errorId,\n            openTab: openTab,\n            handleDeleteSensor: handleDeleteSensor,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.LIGHT, \"_1\"):\n          return __jsx(LightSensor, {\n            key: i + module.settingType,\n            data: data,\n            errorId: errorId,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.HUMIDITY, \"_1\"):\n          return __jsx(AirHumidity, {\n            key: i + module.settingType,\n            data: data,\n            errorId: errorId,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.TEMPETURE, \"_1\"):\n          return __jsx(AirTemperature, {\n            key: i + module.settingType,\n            data: data,\n            errorId: errorId,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.DISTANCE, \"_1\"):\n          return __jsx(DistanceSensor, {\n            key: i + module.settingType,\n            data: data,\n            plant: plant,\n            errorId: errorId,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 29\n            }\n          });\n\n        case \"\".concat(SensorsTypes.PLUG, \"_1\"):\n          return __jsx(Plug, {\n            key: i + module.settingType,\n            data: data,\n            plant: plant,\n            handleDeleteSensor: handleDeleteSensor,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingType: module.settingType,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 29\n            }\n          });\n\n        default:\n          break;\n      }\n    })));\n  }), userinfoMsg && __jsx(SuccessMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"userInfoSuccess\",\n    defaultMessage: userinfoMsg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 17\n    }\n  })))), __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }\n  }, __jsx(BlockTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addController\",\n    defaultMessage: \"Your Plants\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 11\n    }\n  })), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantNameField\",\n    defaultMessage: \"Name of the plant\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    onChange: function onChange(e) {\n      return setPlantName(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'plantNamePlaceholderId',\n      defaultMessage: 'Balcony plants'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 13\n    }\n  }))), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantIdField\",\n    defaultMessage: \"ID of the controller\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"plantId\",\n    value: plantId,\n    onChange: function onChange(e) {\n      return setControllerID(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'serialNumberPlaceholderId',\n      defaultMessage: 'Look behind Ditto Bot'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 13\n    }\n  }))), __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: function onClick() {\n      return handleCreateUpdatePlantOnClick(plants, name, true, timeZone);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 9\n    }\n  }, __jsx(ButtonText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addDittoBotButton\",\n    defaultMessage: \"Add plant\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 13\n    }\n  })))));\n};\n\n_s(YourPlants, \"l+xv3NyfJWAt4LDrqpTIhV73qwk=\", false, function () {\n  return [useQuery, useIntl, useMutation, useMutation, useMutation];\n});\n\n_c = YourPlants;\nexport default YourPlants;\n\nvar _c;\n\n$RefreshReg$(_c, \"YourPlants\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx"],"names":["React","useState","useContext","Link","useMutation","useQuery","CommonMode","SensorsTypes","timeZone","timezones","ErrorMessage","PlantsPageContainer","OrderDetails","BlockTitle","Text","ListItem","ListTitle","ListDes","ButtonText","PlantPageWrapper","Column1","Row1","DashboardContainer","SensorsWrapper","FormattedMessage","useIntl","GET_LOGGED_IN_USER","Button","CREATE_UPDATE_PLANT","DELETE_SETTING","UPDATE_SETTING","Input","ProfileContext","SuccessMsg","SoilHumiditySensor","LightSensor","Select","Plug","DistanceSensor","AuthContext","getLastNumOfSensor","getSensorWithoutNumber","AirHumidity","AirTemperature","LastConectionReading","Switch","YourPlants","deviceType","userRefetch","state","dispatch","authDispatch","notifyOnNetworkStatusChange","fetchPolicy","loading","error","data","intl","name","setPlantName","openTab","setOpenTab","errorId","setErrorId","plantId","setControllerID","userinfoMsg","setUserinfoMsg","sensorSelected","setSensor","timezoneSelected","setTimezone","addPlant","updateSetting","deleteSetting","plants","formatMessage","id","defaultMessage","message","shouldNotAssignRelay","plant","field","value","relayOneIdRelated","relayTwoIdRelated","sensors","map","module","texto1","texto2","hasConfirmed","confirm","defaultSettingValuesIfModeChanges","settingType","mode","settingIndex","findIndex","getDefaultSetting","NONE","logs","isClean","minWarning","maxWarning","Number","setTimeout","handleSettingsChange","type","payload","dispatchSettingSave","handleCreateUpdatePlantOnClick","newPlant","offline_notification","variables","getUser","handleDeleteSensor","plantSelected","settingName","plantIndex","onDeleteSchedule","scheduleIndex","scheduledOnTimes","splice","input","settingTypeName","whatsappWarningsOn","relayOneAutomatedTimeToRun","relayTwoAutomatedStartedTime","relayOneAutomatedStartedTime","relayOneWorking","relayTwoAutomatedTimeToRun","relayTwoWorking","fieldName","fieldValue","getSensorCompleteName","sensorNewNumber","lastSensorNum","rawSensorTypeName","isNaN","dispatchNewSettingSave","completeSensorTypeName","setting","selectStyle","control","styles","width","textAlign","sensorsOptions","DISTANCE","label","SOIL_HUMIDITY","HUMIDITY","TEMPETURE","LIGHT","PLUG","timezonesList","timezone","length","i","e","target","justifyContent","index"],"mappings":"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","sourcesContent":["import React,  { useState, useEffect, useContext } from 'react';\nimport Link from 'next/link';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, RelaysIds, SensorsTypes, timeZone, timezones } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\n\nimport {\n  PlantsPageContainer,\n  OrderDetails,\n  BlockTitle,\n  Text,\n  ListItem,\n  ListTitle,\n  ListDes,\n  ButtonText,\n  PlantPageWrapper,\n  Column1,\n  Row1,\n  CardButtons,\n  DashboardContainer,\n  SensorsWrapper\n} from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER, GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { CREATE_UPDATE_PLANT, DELETE_SETTING, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\nimport { ISetting } from 'utils/types';\nimport Select from 'react-select';\nimport Plug from './sensors/Plug';\nimport DistanceSensor from './sensors/DistanceSensor';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { hasDittoBotUpdatedInLastMinute, getLastNumOfSensor, getSensorWithoutNumber } from 'utils/ditto-bot';\nimport moment from 'moment';\nimport AirHumidity from './sensors/AirHumiditySensor';\nimport AirTemperature from './sensors/AirTemperatureSensor';\nimport LastConectionReading from './sensors/sensor-readings/LastConectionReading';\nimport Switch from 'components/switch/switch';\n  \n\ntype YourPlantsProps = {\n  data?: any;\n  userRefetch: any;\n  index?: Number;\n  Router?: any;\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst YourPlants: React.FC<YourPlantsProps> = ({ deviceType, userRefetch }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const {authDispatch} = useContext<any>(AuthContext);\n\n  const { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    // pollInterval: 5000,\n  });\n\n  // const { loading1, error1, data1 = {} } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n  //   notifyOnNetworkStatusChange: true,\n  //   fetchPolicy: \"network-only\",\n  //   // pollInterval: 5000,\n  // });\n  \n  // const router = useRouter();\n\n  const intl = useIntl();\n  const [name, setPlantName] = useState('');\n  const [openTab, setOpenTab] = useState('');\n  const [errorId, setErrorId] = useState('');\n  const [plantId, setControllerID] = useState('');\n  const [userinfoMsg, setUserinfoMsg] = useState('');\n  const [sensorSelected, setSensor] = useState('');\n  const [timezoneSelected, setTimezone] = useState('');\n  const [addPlant] = useMutation(CREATE_UPDATE_PLANT);\n  \n  const [updateSetting] = useMutation(UPDATE_SETTING);\n  const [deleteSetting] = useMutation(DELETE_SETTING);\n  const { plants } = state;\n\n  if (loading) {\n    return <ErrorMessage message={intl.formatMessage({ id: 'loading', defaultMessage: 'Cargando...' })} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  const shouldNotAssignRelay = (plant: any, field: string, value: string | boolean) => {\n    const relayOneIdRelated = 'relayOneIdRelated';\n    const relayTwoIdRelated = 'relayTwoIdRelated';\n\n    if (field !== relayOneIdRelated && field !== relayTwoIdRelated) return false;\n\n    plant.sensors.map((module) => {\n      if ((module[relayOneIdRelated] === value || module[relayTwoIdRelated] === value ) && value !== '') {\n        const texto1 = intl.formatMessage({ id: 'relayAlreadyAssinged', defaultMessage: 'Relay already assigned in ' });\n        const texto2 = intl.formatMessage({ id: 'relayAlreadyAssinged2', defaultMessage: 'desigagned  ' });\n        const hasConfirmed = confirm(texto1 + module.name + texto2);\n        if (hasConfirmed) return false;\n        return false;\n      }\n    })\n\n   return false;\n  };\n\n  const defaultSettingValuesIfModeChanges = (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => {\n    const mode = 'mode';\n    if (field !== mode) return plant;\n\n    const settingIndex = plant.sensors.findIndex((module: ISetting) => module.settingType === settingType);            \n    plant.sensors[settingIndex] = getDefaultSetting(settingType, plant.sensors[settingIndex].name, value === CommonMode.NONE ? [] : plant.sensors[settingIndex].logs);\n    \n   return plant;\n  };\n\n  const isClean = (plant: any, field: string, value: string | boolean) => {\n    // min max checks\n    const minWarning = 'minWarning';\n    const maxWarning = 'maxWarning';\n\n    if (field !== minWarning && field !== maxWarning) return true;\n    if (Number(value) < 0 || Number(value) > 100) {\n      setErrorId(field);\n      setTimeout(() => {\n          setErrorId('')\n      }, 2000)\n      return false;\n    }\n    setErrorId(''); \n\n    // add more checks\n    return true;\n  };\n\n  const handleSettingsChange = (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => {\n    // if we want to stop user to reuse plugs, uncomment line bellow\n    if (shouldNotAssignRelay(plant, field, value)) return;\n    // we dont want to reset enchufes or values. YET\n    plant = defaultSettingValuesIfModeChanges(plant, field, value, settingType);\n\n    dispatch({ type: settingType, payload: { plant, value, field } });\n\n    if(isClean(plant, field, value)) dispatchSettingSave(plant, field, value, settingType);\n\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000)\n  };\n\n  const handleCreateUpdatePlantOnClick = (plant, name: string, newPlant: boolean, timeZone?: string, offline_notification?: boolean) => {\n    setTimezone(timeZone);\n    setTimeout(function () {\n      addPlant({\n        variables: {\n          id: data?.getUser?.id,\n          name,\n          plantId: newPlant ? Number(plantId) : plant.plantId,\n          ...(timeZone && {timeZone}),\n          offline_notification: offline_notification\n        },\n      });\n  \n    }, 2000)\n    setUserinfoMsg(newPlant ? 'added plant successfully' : 'updated plant successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const handleDeleteSensor = (plantSelected: any, settingType: SensorsTypes) => {\n    deleteSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plantSelected.plantId,\n        settingName: settingType\n      },\n    });\n\n    const plantIndex = plants.findIndex((plant: any) => plant.plantId === plantSelected.plantId);            \n    const settingIndex = plants[plantIndex].sensors.findIndex((module: ISetting) => module.settingType === settingType);            \n\n    dispatch({ type: 'DELETE_MODULE', payload: {plantIndex, settingIndex }});\n\n    setUserinfoMsg('deleted setting successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const onDeleteSchedule = (plant: any, settingType: SensorsTypes, scheduleIndex: number) => {\n    const settingIndex = plant.sensors.findIndex((module: ISetting) => module.settingType === settingType);            \n    plant.sensors[settingIndex]?.scheduledOnTimes.splice(scheduleIndex, 1);\n    \n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: { ...plant.sensors[settingIndex], settingType: settingType }\n      },\n    });\n\n    setUserinfoMsg('deleted schedule successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 2000)  \n  };\n\n  const getDefaultSetting = (settingTypeName: string, name?: string, logs?: string) => { \n    return {\n      name: name || '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: logs || [],\n      scheduledOnTimes: [],\n      settingType: settingTypeName\n    }\n}\n    \n  const dispatchSettingSave = (plant: any, fieldName: string, fieldValue: string | boolean, settingType: SensorsTypes) => {\n    const settingIndex = plant.sensors.findIndex((module: ISetting) => module.settingType === settingType);\n    plant.sensors[settingIndex][fieldName] = fieldValue;\n\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: plant.sensors[settingIndex]\n      },\n    });\n  };\n  \n  const getSensorCompleteName = (plant, settingType: SensorsTypes) => {\n    let sensorNewNumber = 1;\n\n    plant?.sensors?.map((module: ISetting) => {\n      let lastSensorNum = getLastNumOfSensor(module.settingType);\n      const rawSensorTypeName = getSensorWithoutNumber(module?.settingType);\n\n      if (!isNaN(lastSensorNum) && rawSensorTypeName === settingType) {\n        sensorNewNumber = lastSensorNum + 1;\n      }\n    });\n\n    return `${settingType}_${sensorNewNumber}`;\n  };\n\n  const dispatchNewSettingSave = (plant: any, settingType: SensorsTypes, plantIndex: number) => {\n    const completeSensorTypeName = getSensorCompleteName(plant, settingType);\n\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(completeSensorTypeName)\n      },\n    });\n\n    dispatch({ type: 'ADD_MODULE', payload: {plantIndex, setting: getDefaultSetting(completeSensorTypeName) }});\n  };\n\n  const selectStyle = { control: styles => ({ ...styles, width: '197px', textAlign: 'left' }) };\n  const sensorsOptions = [\n    { value: SensorsTypes.DISTANCE, label: intl.formatMessage({ id: 'distanceId', defaultMessage: 'distanceId' }) },\n    { value: SensorsTypes.SOIL_HUMIDITY, label: intl.formatMessage({ id: 'moistHumidityId', defaultMessage: 'moistHumidityId' }) },\n    { value: SensorsTypes.HUMIDITY, label: intl.formatMessage({ id: 'airHumidityId', defaultMessage: 'airHumidityId' }) },\n    { value: SensorsTypes.TEMPETURE, label: intl.formatMessage({ id: 'airTempetureId', defaultMessage: 'airTempetureId' }) },\n    { value: SensorsTypes.LIGHT, label: intl.formatMessage({ id: 'lightSensorId', defaultMessage: 'lightSensorId' }) },\n    { value: SensorsTypes.PLUG, label: intl.formatMessage({ id: 'intelligentPlugId', defaultMessage: 'intelligentPlugId' }) },\n  ];\n\n  const timezonesList = timezones.map((timezone: string) => ({ value: timezone, label: timezone  }))\n\n  return (\n    <PlantPageWrapper>\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <Link href=\"/profile\">\n          <a className=\"home-btn\">\n            <FormattedMessage id=\"backProfileBtn\" defaultMessage=\"Back to Profile\" />\n          </a>\n        </Link>\n\n        <OrderDetails>\n          <BlockTitle>\n            <FormattedMessage\n              id=\"dittoBotsIds\"\n              defaultMessage=\"dittoBotsIds\"\n            />\n          </BlockTitle>\n\n          { plants?.length < 1 && (<Text>{intl.formatMessage({ id: 'noDittoBotsTextId', defaultMessage: 'noDittoBotsTextId' })}</Text>) }\n          { plants?.map((plant, i: number) => {\n            const { sensors } = plant;\n            plant.timeZone = timeZone;\n              return (\n                <DashboardContainer key={i + '-orderList'}>\n                  <Row1>\n                    <Column1>\n                      <ListItem>\n                        <ListTitle>\n                          <Text bold>\n                            <FormattedMessage\n                              id=\"controllerNameId\"\n                              defaultMessage=\"controllerNameId\"\n                            />\n                          </Text>\n                        </ListTitle>\n                        <ListDes>\n                          <Input\n                            type='text'\n                            name='name'\n                            disabled={true}\n                            value={plant?.name}\n                            // we have to change the onChange because the is no one for the controller name actualy\n                            onChange={(e: any) => handleCreateUpdatePlantOnClick(plant, e.target.value, false, timeZone)}\n                            backgroundColor='#F7F7F7'\n                            width='197px'\n                            height='34.5px'\n                          />\n                        </ListDes>\n                      </ListItem>\n\n                      <ListItem>\n                        <ListTitle>\n                          <Text bold>\n                            <FormattedMessage\n                              id=\"statusId\"\n                              defaultMessage=\"statusId\"\n                            />\n                          </Text>\n                        </ListTitle>\n                        <ListDes>\n                          <LastConectionReading key={'lastcon'+i} plantIndex={i} />\n                        </ListDes>\n                      </ListItem>\n\n                      <ListItem>\n                        <ListTitle>\n                          <Text bold>\n                            <FormattedMessage\n                              id=\"offlineNotificationId\"\n                              defaultMessage=\"offlineNotificationId\"\n                            />\n                          </Text>\n                        </ListTitle>\n                        <ListDes>\n                          <Switch \n                            disabled={false}\n                            checked={plant.offline_notification}\n                            labelPosition={'right'}\n                            // className,\n                            onUpdate={(e: any) => handleCreateUpdatePlantOnClick(plant, plant.name, false, plant.timeZone, !plant.offline_notification)}\n                          />\n                        </ListDes>\n                      </ListItem>\n\n                      <ListItem style={{ justifyContent: 'flex-start' }}>\n                          <ListTitle>\n                          <Text bold>\n                              <FormattedMessage\n                              id=\"addSensorId\"\n                              defaultMessage=\"addSensorId\"\n                              />\n                          </Text>\n                          </ListTitle>\n                          <ListDes>\n                          <Select \n                              onChange={(e: any) => dispatchNewSettingSave(plant, e.value, i)}\n                              value={sensorSelected}\n                              // @ts-ignore\n                              options={sensorsOptions}\n                              styles={selectStyle}\n                              menuPosition={'fixed'}\n                          />\n                          </ListDes>\n                        </ListItem>\n\n                        {/* <ListItem style={{ justifyContent: 'flex-start' }}>\n                            <ListTitle>\n                              <Text bold>\n                                  <FormattedMessage\n                                  id=\"timezone\"\n                                  defaultMessage=\"timezone\"\n                                  />\n                              </Text>\n                            </ListTitle>\n                            <ListDes>\n                              <Select \n                                  onChange={(e: any) => handleCreateUpdatePlantOnClick(plant, plant.name, false, e.value, intl.locale)}\n                                  value={timezoneSelected}\n                                  // @ts-ignore\n                                  options={timezonesList}\n                                  styles={selectStyle}\n                                  menuPosition={'fixed'}\n                              />\n                            </ListDes>\n                          </ListItem> */}\n                    </Column1>\n                  </Row1>\n                  <SensorsWrapper>\n                  { sensors?.map((module: ISetting, index: number) => {\n                      switch (module?.settingType) {\n                        case `${SensorsTypes.SOIL_HUMIDITY}_1`:\n                        case `${SensorsTypes.SOIL_HUMIDITY}_2`:\n                        case `${SensorsTypes.SOIL_HUMIDITY}_3`:\n                          // check the number of same setting to send\n                          return (\n                            <SoilHumiditySensor \n                              key={i + module.settingType}\n                              data={data}\n                              plant={plant}\n                              errorId={errorId}\n                              openTab={openTab}\n                              handleDeleteSensor={handleDeleteSensor}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.LIGHT}_1`:\n                          return (\n                            <LightSensor \n                              key={i + module.settingType}\n                              data={data}\n                              errorId={errorId}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.HUMIDITY}_1`:\n                          return (\n                            <AirHumidity \n                              key={i + module.settingType}\n                              data={data}\n                              errorId={errorId}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.TEMPETURE}_1`:\n                          return (\n                            <AirTemperature \n                              key={i + module.settingType}\n                              data={data}\n                              errorId={errorId}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.DISTANCE}_1`:\n                          return (\n                            <DistanceSensor\n                              key={i + module.settingType}\n                              data={data}\n                              plant={plant}\n                              errorId={errorId}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case `${SensorsTypes.PLUG}_1`:\n                          return (\n                            <Plug\n                              key={i + module.settingType}\n                              data={data}\n                              plant={plant}\n                              handleDeleteSensor={handleDeleteSensor}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingType={module.settingType}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                      \n                        default:\n                          break;\n                      }\n                    })}\n                  </SensorsWrapper>\n                   \n                </DashboardContainer>\n              )\n            })\n          }\n\n          {userinfoMsg && (\n              <SuccessMsg>\n                <FormattedMessage\n                  id='userInfoSuccess'\n                  defaultMessage={userinfoMsg}\n                />\n              </SuccessMsg>\n          )}\n\n        </OrderDetails>\n      </PlantsPageContainer>\n\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <BlockTitle>\n          <FormattedMessage\n            id=\"addController\"\n            defaultMessage=\"Your Plants\"\n          />\n        </BlockTitle>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantNameField'\n                defaultMessage='Name of the plant'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='text'\n              name='name'\n              value={name}\n              onChange={(e) => setPlantName(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'plantNamePlaceholderId', defaultMessage: 'Balcony plants' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantIdField'\n                defaultMessage='ID of the controller'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='number'\n              name='plantId'\n              value={plantId}\n              onChange={(e) => setControllerID(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'serialNumberPlaceholderId', defaultMessage: 'Look behind Ditto Bot' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <Button className=\"cart-button\" variant=\"secondary\" borderRadius={100} onClick={() => handleCreateUpdatePlantOnClick(plants, name, true, timeZone)}>\n          <ButtonText>\n            <FormattedMessage id={\"addDittoBotButton\"} defaultMessage=\"Add plant\" />\n          </ButtonText>\n        </Button>\n      </PlantsPageContainer>\n    </PlantPageWrapper>\n  );\n};\n\nexport default YourPlants;\n"]},"metadata":{},"sourceType":"module"}