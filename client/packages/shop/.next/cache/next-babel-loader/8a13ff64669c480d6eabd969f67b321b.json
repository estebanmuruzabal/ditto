{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { FormattedMessage } from 'react-intl';\nimport Popover from 'components/popover/popover';\nimport { useQuery } from '@apollo/react-hooks';\nimport Logo from 'layouts/logo/logo';\nimport { MenuDown } from 'assets/icons/MenuDown';\nimport { CATEGORY_MENU_ITEMS, CATEGORY_MENU } from 'site-settings/site-navigation';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport ErrorMessage from 'components/error-message/error-message';\nimport * as categoryMenuIcons from 'assets/icons/category-menu-icons';\nimport { MainMenu, MenuItem, SelectedItem, Icon, Arrow, LeftMenuBox } from './left-menu.style';\n\nconst CategoryIcon = ({\n  name\n}) => {\n  const TagName = categoryMenuIcons[name];\n  return !!TagName ? __jsx(TagName, null) : __jsx(\"p\", null, \" \");\n};\n\nconst CategoryMenu = props => {\n  const {\n    0: typeMenu,\n    1: setTypeMenu\n  } = useState([]);\n\n  const handleOnClick = item => {\n    if (item.dynamic) {\n      Router.push('/[type]', `${item.href}`);\n      props.onClick(item);\n      return;\n    }\n\n    Router.push(`${item.href}`);\n    props.onClick(item);\n  };\n\n  useEffect(() => {\n    CATEGORY_MENU().then(res => {\n      setTypeMenu(res);\n    });\n    return;\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, typeMenu.map(item => {\n    return __jsx(MenuItem, _extends({\n      key: item.id\n    }, props, {\n      onClick: () => handleOnClick(item)\n    }), __jsx(CategoryIcon, {\n      name: item.icon\n    }), __jsx(FormattedMessage, {\n      id: item.id,\n      defaultMessage: item.defaultMessage\n    }));\n  }));\n};\n\nexport const LeftMenu = ({\n  logo\n}) => {\n  const router = useRouter();\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(GET_TYPE, {\n    variables: {\n      searchText: ''\n    }\n  });\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Loading...'\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message\n    });\n  }\n\n  ;\n  const typeMenu = data.types.items.map(item => {\n    return {\n      id: item.id,\n      href: `/${item.slug}`,\n      defaultMessage: item.name,\n      icon: item.icon,\n      dynamic: true\n    };\n  });\n  const initialMenu = router.asPath == '/' ? typeMenu[0] : typeMenu.find(item => item.href == router.asPath);\n\n  if (initialMenu) {\n    if (localStorage.getItem('myMenu')) {\n      localStorage.removeItem('myMenu');\n    }\n\n    localStorage.setItem('myMenu', JSON.stringify(initialMenu));\n  }\n\n  const [activeMenu, setActiveMenu] = React.useState(initialMenu !== null && initialMenu !== void 0 ? initialMenu : CATEGORY_MENU_ITEMS[0]);\n  console.log(initialMenu, CATEGORY_MENU_ITEMS);\n  return __jsx(LeftMenuBox, null, __jsx(Logo //@todo fix logo and onclick !!\n  , {\n    imageUrl: logo,\n    alt: 'Shop Logo',\n    onClick: initialMenu ? initialMenu : CATEGORY_MENU_ITEMS[0]\n  }), __jsx(MainMenu, null, __jsx(Popover, {\n    className: \"right\",\n    handler: __jsx(SelectedItem, null, __jsx(\"span\", null, __jsx(Icon, null, __jsx(CategoryIcon, {\n      name: activeMenu === null || activeMenu === void 0 ? void 0 : activeMenu.icon\n    })), __jsx(\"span\", null, __jsx(FormattedMessage, {\n      id: activeMenu === null || activeMenu === void 0 ? void 0 : activeMenu.id,\n      defaultMessage: activeMenu === null || activeMenu === void 0 ? void 0 : activeMenu.defaultMessage\n    }))), __jsx(Arrow, null, __jsx(MenuDown, null))),\n    content: __jsx(CategoryMenu, {\n      onClick: setActiveMenu\n    })\n  })));\n};\n/*import React, { useState, useEffect } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { FormattedMessage } from 'react-intl';\nimport Popover from 'components/popover/popover';\nimport { useQuery } from '@apollo/react-hooks';\nimport Logo from 'layouts/logo/logo';\nimport { MenuDown } from 'assets/icons/MenuDown';\nimport { CATEGORY_MENU_ITEMS,CATEGORY_MENU } from 'site-settings/site-navigation';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport ErrorMessage from 'components/error-message/error-message';\nimport * as categoryMenuIcons from 'assets/icons/category-menu-icons';\nimport {\n  MainMenu,\n  MenuItem,\n  SelectedItem,\n  Icon,\n  Arrow,\n  LeftMenuBox,\n} from './left-menu.style';\n\nconst CategoryIcon = ({ name }) => {\n  const TagName = categoryMenuIcons[name];\n  return !!TagName ? <TagName /> : <p> </p>;\n};\n\nconst CategoryMenu = (props: any) => {\n\n  const [typeMenu, setTypeMenu] = useState([]);\n\n  const handleOnClick = (item) => {\n    if (item.dynamic) {\n      Router.push('/[type]', `${item.href}`);\n      props.onClick(item);\n      return;\n    }\n    Router.push(`${item.href}`);\n    props.onClick(item);\n  };\n\n  useEffect(() => {\n    CATEGORY_MENU().then((res) => {\n      setTypeMenu(res);\n    })\n    return;\n  }, []);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      {typeMenu.map((item) => {\n        return(\n        <MenuItem key={item.id} {...props} onClick={() => handleOnClick(item)}>\n          <CategoryIcon name={item.icon} />\n          <FormattedMessage id={item.id} defaultMessage={item.defaultMessage} />\n        </MenuItem>\n      )})}\n    </div>\n  );\n};\n\ntype Props = {\n  logo: string;\n};\n\nexport const LeftMenu: React.FC<Props> = ({ logo }) => {\n  const router = useRouter();\n  const { data, error, loading } = useQuery(\n    GET_TYPE,\n    {\n      variables: {\n        searchText: ''\n      }\n    }\n  );\n  if (loading) {\n    return <ErrorMessage message={'Loading...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n  const typeMenu = data.types.items.map((item) => {\n    return({\n      id: item.id,\n      href: `/${item.slug}`,\n      defaultMessage: item.name,\n      icon: item.icon,\n      dynamic: true,\n    })\n  })\n  const initialMenu = router.asPath == '/' ? typeMenu[0] : typeMenu.find((item) => item.href == router.asPath);\n  if(initialMenu){\n    if(localStorage.getItem('myMenu')){\n      localStorage.removeItem('myMenu');\n    }\n    localStorage.setItem('myMenu', JSON.stringify(initialMenu));\n  }\n\n  const [activeMenu, setActiveMenu] = React.useState(\n    initialMenu ?? JSON.parse(localStorage.getItem('myMenu'))\n  );\n  \n  return(\n    <LeftMenuBox>\n      <Logo\n        imageUrl={logo}\n        alt={'Shop Logo'}\n        onClick={initialMenu ? initialMenu: JSON.parse(localStorage.getItem('myMenu'))}\n      />\n      <MainMenu>\n        <Popover\n          className=\"right\"\n          handler={\n            <SelectedItem>\n              <span>\n                <Icon>\n                  <CategoryIcon name={activeMenu?.icon} />\n                </Icon>\n                <span>\n                  <FormattedMessage\n                    id={activeMenu?.id}\n                    defaultMessage={activeMenu?.defaultMessage}\n                  />\n                </span>\n              </span>\n              <Arrow>\n                <MenuDown />\n              </Arrow>\n            </SelectedItem>\n          }\n          content={<CategoryMenu onClick={setActiveMenu} />}\n        />\n      </MainMenu>\n    </LeftMenuBox>\n  );\n};\n*/","map":null,"metadata":{},"sourceType":"module"}