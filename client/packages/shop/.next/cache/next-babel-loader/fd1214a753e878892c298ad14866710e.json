{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { LinkButton, Button, Wrapper, Container, Heading, SubHeading, OfferSection, Offer // Input,\n} from './authentication-form.style';\nimport { useMutation } from '@apollo/react-hooks';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Input } from 'components/forms/input';\nimport { SIGNIN_MUTATION } from 'graphql/mutation/signin';\nimport Router, { useRouter } from 'next/router';\nimport PhoneInput from 'react-phone-input-2';\nimport us from 'react-phone-input-2/lang/es.json';\nexport default function SignInModal() {\n  var _error$toString, _error$toString2;\n\n  const router = useRouter();\n  const intl = useIntl();\n  const {\n    authDispatch\n  } = useContext(AuthContext);\n  const [phone, setPhone] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const toggleSignUpForm = () => {\n    authDispatch({\n      type: 'SIGNUP'\n    });\n  };\n\n  const toggleForgotPassForm = () => {\n    authDispatch({\n      type: 'FORGOTPASS'\n    });\n  };\n\n  const togglePhoneVerificationForm = () => {\n    authDispatch({\n      type: 'PHONE_VERIFICATION'\n    });\n  };\n\n  const [signinMeMutation, {\n    loading,\n    error,\n    data\n  }] = useMutation(SIGNIN_MUTATION, {\n    onCompleted: data => {\n      const {\n        access_token,\n        user\n      } = data.login;\n\n      if (false) {\n        localStorage.setItem('access_token', `${access_token}`);\n        authDispatch({\n          type: 'SIGNIN_SUCCESS',\n          user\n        });\n        closeModal();\n        Router.push('/[type]', router.asPath);\n      }\n    },\n    onError: error => {\n      setPhone('');\n      setPassword('');\n    }\n  });\n\n  const handlePhoneChange = (value, data, event, formattedValue) => {\n    setPhone(value);\n  };\n\n  const authError = (error === null || error === void 0 ? void 0 : (_error$toString = error.toString()) === null || _error$toString === void 0 ? void 0 : _error$toString.includes(\"User dose not exits.\")) || (error === null || error === void 0 ? void 0 : (_error$toString2 = error.toString()) === null || _error$toString2 === void 0 ? void 0 : _error$toString2.includes(\"Password dose not match\"));\n  return __jsx(Wrapper, null, __jsx(Container, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"welcomeBack\",\n    defaultMessage: \"Welcome Back\"\n  })), __jsx(SubHeading, null, __jsx(FormattedMessage, {\n    id: \"loginText\",\n    defaultMessage: \"Login with your phone number & password\"\n  })), __jsx(\"form\", {\n    onSubmit: async e => {\n      e.preventDefault();\n      await signinMeMutation({\n        variables: {\n          phone,\n          password\n        }\n      });\n    }\n  }, __jsx(PhoneInput, {\n    inputProps: {\n      name: 'phone',\n      required: true,\n      autoFocus: false\n    },\n    containerStyle: {\n      textAlign: \"left\"\n    },\n    inputStyle: {\n      backgroundColor: \"#F7F7F7\",\n      height: \"48px\",\n      marginBottom: \"10px\",\n      width: \"100%\"\n    },\n    onlyCountries: ['us'],\n    localization: us,\n    country: 'us',\n    masks: {\n      us: '(...) ...-....'\n    },\n    value: phone,\n    onChange: handlePhoneChange\n  }), __jsx(Input, {\n    type: \"password\",\n    placeholder: intl.formatMessage({\n      id: 'passwordPlaceholder',\n      defaultMessage: 'Password'\n    }),\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    required: true,\n    height: \"48px\",\n    backgroundColor: \"#F7F7F7\",\n    width: \"100%\",\n    mb: \"10px\"\n  }), __jsx(Button, {\n    variant: \"primary\",\n    size: \"big\",\n    style: {\n      width: '100%'\n    },\n    type: \"submit\"\n  }, __jsx(FormattedMessage, {\n    id: \"continueBtn\",\n    defaultMessage: \"Continue\"\n  }))), loading && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\"\n    }\n  }, intl.formatMessage({\n    id: 'loading',\n    defaultMessage: 'Cargando...'\n  })), authError && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\",\n      fontSize: '16px'\n    }\n  }, \" \", intl.formatMessage({\n    id: 'userNotFound',\n    defaultMessage: 'Invalid user/password'\n  })), error && !authError && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\",\n      fontSize: '16px'\n    }\n  }, \" \", `${(error === null || error === void 0 ? void 0 : error.message) || error}. Please try again`), __jsx(Offer, {\n    style: {\n      padding: '20px 0',\n      fontSize: '20px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"dontHaveAccount\",\n    defaultMessage: \"Don't have an account?\"\n  }), ' ', __jsx(LinkButton, {\n    onClick: toggleSignUpForm\n  }, __jsx(FormattedMessage, {\n    id: \"signUpBtnText\",\n    defaultMessage: \"Sign Up\"\n  })))), __jsx(OfferSection, null, __jsx(Offer, null, __jsx(FormattedMessage, {\n    id: \"phoneVerifyText\",\n    defaultMessage: \"Phone number not verified?\"\n  }), ' ', __jsx(LinkButton, {\n    onClick: togglePhoneVerificationForm\n  }, __jsx(FormattedMessage, {\n    id: \"verifyNowText\",\n    defaultMessage: \"Verify Now\"\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}