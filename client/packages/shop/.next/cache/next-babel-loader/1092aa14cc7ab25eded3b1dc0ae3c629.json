{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { themeGet } from '@styled-system/theme-get';\nimport * as Yup from 'yup';\nimport { closeModal } from '@redq/reuse-modal';\nimport { ErrorMessage, Formik, Form } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport MaskedInput from 'react-text-mask';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { Button } from 'components/button/button';\nimport { ADD_PHONENUMBER, UPDATE_PHONENUMBER } from 'graphql/mutation/phone';\nimport { FieldWrapper, Heading } from './contact-card.style';\nimport { FormattedMessage } from 'react-intl';\nconst ContactValidationSchema = Yup.object().shape({\n  number: Yup.string().required('Number is required')\n});\n\nconst CreateOrUpdateContact = ({\n  item\n}) => {\n  const ContactItem = item.item;\n  const ID = item.id;\n  let newContactid = null;\n  const initialValues = {\n    id: ContactItem.id || null,\n    type: ContactItem.type || 'secondary',\n    number: ContactItem.number || ''\n  };\n  const [addPhoneMutation] = useMutation(ADD_PHONENUMBER);\n  const [updatePhoneMutation] = useMutation(UPDATE_PHONENUMBER);\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n\n  const handleSubmit = async values => {\n    if (Object.keys(ContactItem).length === 0) {\n      const {\n        data\n      } = await addPhoneMutation({\n        variables: {\n          id: ID,\n          number: values.number\n        }\n      });\n      newContactid = data.addPhoneNumber.id;\n      values.id = newContactid;\n      dispatch({\n        type: 'ADD_CONTACT',\n        payload: {\n          values: values\n        }\n      });\n      closeModal();\n      /*if (typeof window !== 'undefined') {\n        window.location.reload(false);\n      }*/\n    } else {\n      const updatePhone = await updatePhoneMutation({\n        variables: {\n          id: ID,\n          phoneId: ContactItem.id ? ContactItem.id : newContactid,\n          number: values.number\n        }\n      });\n      dispatch({\n        type: 'UPDATE_CONTACT',\n        payload: {\n          values: values,\n          id: ContactItem.id ? ContactItem.id : newContactid\n        }\n      });\n      closeModal();\n    }\n  };\n\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: ContactValidationSchema\n  }, ({\n    values,\n    handleChange,\n    handleBlur\n  }) => __jsx(Form, null, __jsx(Heading, null, ContactItem ? __jsx(FormattedMessage, {\n    id: \"editContactId\",\n    defaultMessage: \"\"\n  }) : __jsx(FormattedMessage, {\n    id: \"addNewContactId\",\n    defaultMessage: \"\"\n  })), __jsx(FieldWrapper, null, __jsx(MaskedInput, {\n    mask: [/[0-9]/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/],\n    className: \"form-control\",\n    placeholder: \"Enter a phone number\",\n    guide: false,\n    id: \"my-input-id\",\n    value: values.number,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: \"number\",\n    render: (ref, props) => __jsx(StyledInput, _extends({\n      ref: ref\n    }, props))\n  })), __jsx(ErrorMessage, {\n    name: \"number\",\n    component: StyledError\n  }), __jsx(Button, {\n    type: \"submit\",\n    style: {\n      width: '100%',\n      height: '44px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedContactId\",\n    defaultMessage: \"Save Contact\"\n  }))));\n};\n\nexport default CreateOrUpdateContact;\nconst StyledInput = styled.input.withConfig({\n  displayName: \"contact-card__StyledInput\",\n  componentId: \"oapeh9-0\"\n})([\"width:100%;height:54px;border-radius:\", \";font-family:\", \";border:1px solid \", \";color:\", \";font-size:16px;line-height:19px;font-weight:\", \";padding:0 18px;box-sizing:border-box;transition:border-color 0.25s ease;&:hover,&:focus{outline:0;}&:focus{border-color:\", \";}&::placeholder{color:\", \";}\"], themeGet('radii.base', '6px'), themeGet('fonts.body', 'Lato, sans-serif'), themeGet('colors.gray.700', '#e6e6e6'), themeGet('colors.text.bold', '#0D1136'), themeGet('fontWeights.regular', '400'), themeGet('colors.primary.regular', '#009e7f'), themeGet('colors.text.regular', '#77798C'));\nconst StyledError = styled.div.withConfig({\n  displayName: \"contact-card__StyledError\",\n  componentId: \"oapeh9-1\"\n})([\"color:red;padding-bottom:10px;margin-top:-5px;\"]);","map":null,"metadata":{},"sourceType":"module"}