{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport moment from \"moment\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_LOGGED_IN_USER_SETTINGS } from \"graphql/query/customer.query\";\nexport var getSensorWithoutNumber = function getSensorWithoutNumber(settingType) {\n  if (!isNaN(Number(settingType[settingType.length - 1]))) {\n    return settingType.substring(0, settingType.length - 2);\n  }\n\n  console.log('didnt work');\n};\nexport var getLastNumOfSensor = function getLastNumOfSensor(settingType) {\n  if (!isNaN(Number(settingType[settingType.length - 1]))) {\n    return Number(settingType.substring(settingType.length, settingType.length - 1));\n  }\n\n  console.log('didnt work 2');\n};\nexport var hasDittoBotUpdatedInLastMinute = function hasDittoBotUpdatedInLastMinute(lastTimeStamp, timeZone) {\n  _s();\n\n  var _data$getUser, _data$getUser$plants$, _data$getUser$plants$2, _data$getUser$plants$3, _data$getUser$plants$4;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 1000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.plants;\n  var sensorIndex = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.findIndex(function (sensor) {\n    return sensor.settingType === module.settingType;\n  });\n  var reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$3 = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$3 === void 0 ? void 0 : (_data$getUser$plants$4 = _data$getUser$plants$3.sensors[sensorIndex]) === null || _data$getUser$plants$4 === void 0 ? void 0 : _data$getUser$plants$4.reading; // console.log('timeZone', timeZone)\n\n  var currentTimeMoment = moment(new Date().toLocaleString('en-US', {\n    timeZone: timeZone\n  })); // console.log('currentTimeMoment', currentTimeMoment)\n\n  var lastTimeStampMoment = moment(new Date(lastTimeStamp)); // console.log('lastTimeStampMoment', lastTimeStampMoment)\n\n  var lastTimestampInMins = currentTimeMoment === null || currentTimeMoment === void 0 ? void 0 : currentTimeMoment.diff(lastTimeStampMoment, 'minutes'); // we are updating acutally every 5 seconds, but just in case we check if in the last minute there was any conection\n\n  return lastTimestampInMins < 1;\n};\n\n_s(hasDittoBotUpdatedInLastMinute, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/utils/ditto-bot.ts"],"names":["moment","useQuery","GET_LOGGED_IN_USER_SETTINGS","getSensorWithoutNumber","settingType","isNaN","Number","length","substring","console","log","getLastNumOfSensor","hasDittoBotUpdatedInLastMinute","lastTimeStamp","timeZone","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","loading","error","data","plantIndex","getUser","plants","sensorIndex","sensors","findIndex","sensor","module","reading","currentTimeMoment","Date","toLocaleString","lastTimeStampMoment","lastTimestampInMins","diff"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AAEA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,WAAD,EAAwC;AAC1E,MAAI,CAACC,KAAK,CAACC,MAAM,CAACF,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAZ,CAAP,CAAV,EAAyD;AACrD,WAAOH,WAAW,CAACI,SAAZ,CAAsB,CAAtB,EAAyBJ,WAAW,CAACG,MAAZ,GAAqB,CAA9C,CAAP;AACH;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,CALM;AAOP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACP,WAAD,EAAwC;AACtE,MAAI,CAACC,KAAK,CAACC,MAAM,CAACF,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAZ,CAAP,CAAV,EAAyD;AACrD,WAAOD,MAAM,CAACF,WAAW,CAACI,SAAZ,CAAsBJ,WAAW,CAACG,MAAlC,EAA0CH,WAAW,CAACG,MAAZ,GAAqB,CAA/D,CAAD,CAAb;AACH;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,CALM;AAQP,OAAO,IAAME,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,aAAD,EAAwBC,QAAxB,EAA6C;AAAA;;AAAA;;AAAA,kBACtDb,QAAQ,CAACC,2BAAD,EAA8B;AACnEa,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAD8C;AAAA,MAC/EC,OAD+E,aAC/EA,OAD+E;AAAA,MACtEC,KADsE,aACtEA,KADsE;AAAA,MAC/DC,IAD+D,aAC/DA,IAD+D;;AAOrF,MAAMC,UAAU,GAAGD,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEE,OAAT,kDAAG,cAAeC,MAAlC;AACA,MAAMC,WAAW,GAAGJ,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEE,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,oFAAG,sBAAkCI,OAArC,2DAAG,uBAA2CC,SAA3C,CAAqD,UAACC,MAAD;AAAA,WAAiBA,MAAM,CAACvB,WAAP,KAAuBwB,MAAM,CAACxB,WAA/C;AAAA,GAArD,CAApB;AACA,MAAIyB,OAAO,GAAGT,IAAH,aAAGA,IAAH,iDAAGA,IAAI,CAAEE,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,qFAAG,uBAAkCI,OAAlC,CAA0CD,WAA1C,CAAH,2DAAG,uBAAwDK,OAAtE,CATqF,CAWvF;;AACA,MAAMC,iBAAiB,GAAG9B,MAAM,CAAC,IAAI+B,IAAJ,GAAWC,cAAX,CAA0B,OAA1B,EAAmC;AAAElB,IAAAA,QAAQ,EAARA;AAAF,GAAnC,CAAD,CAAhC,CAZuF,CAavF;;AACA,MAAMmB,mBAAmB,GAAGjC,MAAM,CAAC,IAAI+B,IAAJ,CAASlB,aAAT,CAAD,CAAlC,CAduF,CAevF;;AACA,MAAMqB,mBAAmB,GAAGJ,iBAAH,aAAGA,iBAAH,uBAAGA,iBAAiB,CAAEK,IAAnB,CAAwBF,mBAAxB,EAA6C,SAA7C,CAA5B,CAhBuF,CAkBvF;;AACA,SAAOC,mBAAmB,GAAG,CAA7B;AACH,CApBM;;GAAMtB,8B;UACwBX,Q","sourcesContent":["import moment from \"moment\";\nimport { SensorsTypes } from \"./constant\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_LOGGED_IN_USER_SETTINGS } from \"graphql/query/customer.query\";\n\nexport const getSensorWithoutNumber = (settingType: SensorsTypes) : string => {\n    if (!isNaN(Number(settingType[settingType.length - 1]))) {\n        return settingType.substring(0, settingType.length - 2);\n    }\n    console.log('didnt work')\n};\n\nexport const getLastNumOfSensor = (settingType: SensorsTypes) : number => {\n    if (!isNaN(Number(settingType[settingType.length - 1]))) {\n        return Number(settingType.substring(settingType.length, settingType.length - 1));\n    }\n    console.log('didnt work 2')\n};\n\n\nexport const hasDittoBotUpdatedInLastMinute = (lastTimeStamp: string, timeZone: string) => {\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 1000,\n      });\n    \n      const plantIndex = data?.getUser?.plants;\n      const sensorIndex = data?.getUser.plants[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n      let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n    // console.log('timeZone', timeZone)\n    const currentTimeMoment = moment(new Date().toLocaleString('en-US', { timeZone }));\n    // console.log('currentTimeMoment', currentTimeMoment)\n    const lastTimeStampMoment = moment(new Date(lastTimeStamp));\n    // console.log('lastTimeStampMoment', lastTimeStampMoment)\n    const lastTimestampInMins = currentTimeMoment?.diff(lastTimeStampMoment, 'minutes');\n\n    // we are updating acutally every 5 seconds, but just in case we check if in the last minute there was any conection\n    return lastTimestampInMins < 1;\n}"]},"metadata":{},"sourceType":"module"}