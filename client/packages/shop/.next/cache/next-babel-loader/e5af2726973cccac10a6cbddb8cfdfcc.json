{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { SearchBox } from 'components/search-box/search-box';\nimport { useAppState, useAppDispatch } from 'contexts/app/app.provider';\nimport { useRouter } from 'next/router';\nimport { useIntl } from 'react-intl';\nimport { SearchWrapper, SearchResultWrap } from './search.style';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { GET_PRODUCTS_SEARCH } from 'graphql/query/products.search.query';\n\nconst Search = (_ref) => {\n  let {\n    onSubmit\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"onSubmit\"]);\n\n  const router = useRouter();\n  const container = useRef(null);\n  const {\n    pathname,\n    query\n  } = router;\n  const {\n    0: filteredSearchData,\n    1: setFilteredSearchData\n  } = useState([]);\n  const {\n    0: isShow,\n    1: setShow\n  } = useState(false);\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(GET_PRODUCTS_SEARCH, {\n    variables: {\n      type: query.type || 'grocery',\n      offset: 0,\n      limit: 20\n    }\n  });\n\n  if (!data || loading) {\n    return __jsx(\"div\", null, \"loading...\");\n  }\n\n  if (error) return __jsx(ErrorMessage, {\n    message: error.message\n  });\n  const searchData = data.products.items;\n  const searchTerm = useAppState('searchTerm');\n  const dispatch = useAppDispatch();\n  const intl = useIntl();\n\n  const handleOnChange = e => {\n    const {\n      value\n    } = e.target;\n    const result = searchData.filter(item => item.name.toLowerCase().startsWith(value));\n    setFilteredSearchData(result);\n    filteredSearchData.length > 0 ? setShow(true) : setShow(false);\n    dispatch({\n      type: 'SET_SEARCH_TERM',\n      payload: value\n    });\n  };\n\n  const onSearch = e => {\n    e.preventDefault();\n\n    const {\n      type\n    } = query,\n          rest = _objectWithoutProperties(query, [\"type\"]);\n\n    if (type) {\n      router.push({\n        pathname,\n        query: _objectSpread(_objectSpread({}, rest), {}, {\n          text: searchTerm\n        })\n      }, {\n        pathname: `/${type}`,\n        query: _objectSpread(_objectSpread({}, rest), {}, {\n          text: searchTerm\n        })\n      });\n    } else {\n      router.push({\n        pathname,\n        query: _objectSpread(_objectSpread({}, rest), {}, {\n          text: searchTerm\n        })\n      });\n    }\n\n    dispatch({\n      type: 'SET_SEARCH_TERM',\n      payload: ''\n    });\n\n    if (onSubmit) {\n      onSubmit();\n    }\n  };\n\n  const myhandleClick = e => {\n    if (container.current.contains(e.target)) {\n      return;\n    }\n\n    setShow(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", myhandleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", myhandleClick);\n    };\n  }, []);\n  return __jsx(SearchWrapper, {\n    className: props.minimal ? 'minimal-wrap' : 'modern-wrap',\n    ref: container\n  }, __jsx(SearchBox, _extends({\n    onEnter: onSearch,\n    onChange: handleOnChange,\n    value: searchTerm,\n    name: \"search\",\n    placeholder: intl.formatMessage({\n      id: 'searchPlaceholder',\n      defaultMessage: 'Search your products from here'\n    }),\n    categoryType: query.type || 'Grocery',\n    buttonText: intl.formatMessage({\n      id: 'searchButtonText',\n      defaultMessage: 'Search'\n    })\n  }, props)), isShow && __jsx(SearchResultWrap, {\n    className: \"searchResultWrap\"\n  }, __jsx(\"ul\", null, filteredSearchData.map((item, index) => __jsx(\"li\", {\n    onClick: () => router.push('/product/[slug]', `/product/${item.slug}`),\n    key: index\n  }, item.name)))));\n};\n\nexport default Search;","map":null,"metadata":{},"sourceType":"module"}