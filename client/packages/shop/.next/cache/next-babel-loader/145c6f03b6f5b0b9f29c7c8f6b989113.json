{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport { ProductsRow, ProductsCol, LoaderWrapper, LoaderItem, ProductCardWrapper } from './product-list.style';\nimport { CURRENCY } from 'utils/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { NetworkStatus } from 'apollo-client';\nimport Placeholder from 'components/placeholder/placeholder';\nimport Fade from 'react-reveal/Fade';\nimport NoResultFound from 'components/no-result/no-result';\nimport { GET_PRODUCTS } from 'graphql/query/products.query';\nimport { SHOP_IMAGE_HOST } from 'utils/images-path';\nconst ErrorMessage = dynamic(() => import('components/error-message/error-message'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/error-message/error-message')],\n    modules: ['components/error-message/error-message']\n  }\n});\nconst QuickView = dynamic(() => import('features/quick-view/quick-view'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('features/quick-view/quick-view')],\n    modules: ['features/quick-view/quick-view']\n  }\n});\nconst GeneralCard = dynamic(() => import('components/product-card/product-card-one/product-card-one'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/product-card/product-card-one/product-card-one')],\n    modules: ['components/product-card/product-card-one/product-card-one']\n  }\n});\nconst OneLineCard = dynamic(() => import('components/product-card/product-card-six/product-card-six'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/product-card/product-card-six/product-card-six')],\n    modules: ['components/product-card/product-card-six/product-card-six']\n  }\n});\nconst BookCard = dynamic(() => import('components/product-card/product-card-two/product-card-two'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/product-card/product-card-two/product-card-two')],\n    modules: ['components/product-card/product-card-two/product-card-two']\n  }\n}); // const FurnitureCard = dynamic(\n//   import('components/product-card/product-card-three/product-card-three')\n// );\n// const MedicineCard = dynamic(\n//   import('components/product-card/product-card-five/product-card-five')\n// );\n\nexport const Products = ({\n  deviceType,\n  fetchLimit = 20,\n  loadMore = true,\n  type\n}) => {\n  var _data$products$items;\n\n  const router = useRouter();\n  const {\n    data,\n    error,\n    loading,\n    fetchMore,\n    networkStatus\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: router.query.type,\n      text: router.query.text,\n      category: router.query.category,\n      offset: 0,\n      limit: fetchLimit\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingMore = networkStatus === NetworkStatus.fetchMore; // Quick View Modal\n\n  const handleModalClose = () => {\n    const {\n      pathname,\n      query,\n      asPath\n    } = router;\n    const as = asPath;\n    router.push({\n      pathname,\n      query\n    }, as, {\n      shallow: true\n    });\n    closeModal();\n  };\n\n  const handleQuickViewModal = (modalProps, deviceType, onModalClose) => {\n    const {\n      pathname,\n      query\n    } = router;\n    const as = `/product/${modalProps.slug}`;\n\n    if (pathname === '/product/[slug]') {\n      router.push(pathname, as);\n      return;\n    }\n\n    openModal({\n      show: true,\n      overlayClassName: 'quick-view-overlay',\n      closeOnClickOutside: false,\n      component: QuickView,\n      componentProps: {\n        modalProps,\n        deviceType,\n        onModalClose\n      },\n      closeComponent: 'div',\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'quick-view-modal',\n        width: 900,\n        y: 30,\n        height: 'auto',\n        transition: {\n          mass: 1,\n          tension: 0,\n          friction: 0\n        }\n      }\n    });\n    router.push({\n      pathname,\n      query\n    }, {\n      pathname: as\n    }, {\n      shallow: true\n    });\n  };\n\n  if (error) return __jsx(ErrorMessage, {\n    message: error.message\n  });\n\n  if (loading && !loadingMore) {\n    return __jsx(LoaderWrapper, null, __jsx(LoaderItem, null, __jsx(Placeholder, {\n      uniqueKey: \"1\"\n    })), __jsx(LoaderItem, null, __jsx(Placeholder, {\n      uniqueKey: \"2\"\n    })), __jsx(LoaderItem, null, __jsx(Placeholder, {\n      uniqueKey: \"3\"\n    })));\n  }\n\n  if (!data || !data.products || data.products.items.length === 0) {\n    return __jsx(NoResultFound, null);\n  }\n\n  const handleLoadMore = () => {\n    fetchMore({\n      variables: {\n        offset: Number(data.products.items.length),\n        limit: fetchLimit\n      },\n      updateQuery: (previousResult, {\n        fetchMoreResult\n      }) => {\n        if (!fetchMoreResult) {\n          return previousResult;\n        }\n\n        return {\n          products: {\n            __typename: previousResult.products.__typename,\n            items: [...previousResult.products.items, ...fetchMoreResult.products.items],\n            hasMore: fetchMoreResult.products.hasMore\n          }\n        };\n      }\n    });\n  };\n\n  const renderCard = (productType, props) => {\n    switch (productType) {\n      // case 'book':\n      //   return (\n      //     <BookCard\n      //       title={props.title}\n      //       image={props.image}\n      //       name={props?.author?.name}\n      //       data={props}\n      //       deviceType={deviceType}\n      //       onClick={() =>\n      //         router.push('/product/[slug]', `/product/${props.slug}`)\n      //       }\n      //     />\n      //   );\n      // case 'medicine':\n      //   return (\n      //     <MedicineCard\n      //       title={props.name}\n      //       currency={CURRENCY}\n      //       image={SHOP_IMAGE_HOST+props.images[0]}\n      //       price={props.price}\n      //       weight={props.unit}\n      //       data={props}\n      //     />\n      //   );\n      // case 'furniture':\n      //   return (\n      //     <FurnitureCard\n      //       title={props.name}\n      //       image={SHOP_IMAGE_HOST+props.images[0]}\n      //       discountInPercent={props.discount_in_percent}\n      //       onClick={() =>\n      //         handleQuickViewModal(props, deviceType, handleModalClose)\n      //       }\n      //     />\n      //   );\n      default:\n        return __jsx(GeneralCard, {\n          title: props.name,\n          description: props.description,\n          image: SHOP_IMAGE_HOST + props.images[0],\n          weight: props.unit,\n          currency: CURRENCY,\n          price: props.price,\n          salePrice: props.sale_price,\n          discountInPercent: props.discount_in_percent,\n          data: props,\n          deviceType: deviceType,\n          onClick: () => router.push('/product/[slug]', `/product/${props.slug}`)\n        });\n    }\n  };\n\n  const onlineProducts = (_data$products$items = data.products.items) === null || _data$products$items === void 0 ? void 0 : _data$products$items.filter(product => (product === null || product === void 0 ? void 0 : product.is_online) === true);\n  return __jsx(React.Fragment, null, __jsx(ProductsRow, null, onlineProducts === null || onlineProducts === void 0 ? void 0 : onlineProducts.sort((a, b) => a.name.localeCompare(b.name)).map((item, index) => __jsx(ProductsCol, {\n    key: index,\n    style: type === 'book' ? {\n      paddingLeft: 0,\n      paddingRight: 1\n    } : {}\n  }, __jsx(ProductCardWrapper, null, __jsx(Fade, {\n    duration: 800,\n    delay: index * 10,\n    style: {\n      height: '100%'\n    }\n  }, renderCard(type, item)))))));\n};\nexport default Products;","map":null,"metadata":{},"sourceType":"module"}