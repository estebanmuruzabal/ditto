{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightReading.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nvar LightReading = function LightReading(_ref) {\n  _s();\n\n  var _data$getUser, _data$getUser$plants, _data$getUser$plants$, _data$getUser$plants$2, _data$getUser$plants$3, _data$getUser$plants$4;\n\n  var plant = _ref.plant,\n      plantId = _ref.plantId;\n  var setting = plant.sensors.find(function (module) {\n    return module.settingType === settingType;\n  });\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 1000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(function (plant) {\n    return plant.plantId === plantId;\n  });\n  var sensorIndex = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.findIndex(function (sensor) {\n    return sensor.settingType === module.settingType;\n  });\n  var reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$3 = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$3 === void 0 ? void 0 : (_data$getUser$plants$4 = _data$getUser$plants$3.sensors[sensorIndex]) === null || _data$getUser$plants$4 === void 0 ? void 0 : _data$getUser$plants$4.reading; // const reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n  return __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, setting === null || setting === void 0 ? void 0 : setting.reading, \" % \", (setting === null || setting === void 0 ? void 0 : setting.reading) < 40 ? 'ðŸŒ™' : 'ðŸ’¡');\n};\n\n_s(LightReading, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = LightReading;\nexport default LightReading;\n\nvar _c;\n\n$RefreshReg$(_c, \"LightReading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","LightReading","plant","plantId","setting","sensors","find","module","settingType","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","loading","error","data","plantIndex","getUser","plants","findIndex","sensorIndex","sensor","reading"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAOA,IAAMC,YAA6B,GAAG,SAAhCA,YAAgC,OAAyB;AAAA;;AAAA;;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,OAAe,QAAfA,OAAe;AAC3D,MAAMC,OAAO,GAAGF,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmB,UAACC,MAAD;AAAA,WAAsBA,MAAM,CAACC,WAAP,KAAuBA,WAA7C;AAAA,GAAnB,CAAhB;;AAD2D,kBAG1BT,QAAQ,CAACC,2BAAD,EAA8B;AACnES,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAHkB;AAAA,MAGnDC,OAHmD,aAGnDA,OAHmD;AAAA,MAG1CC,KAH0C,aAG1CA,KAH0C;AAAA,MAGnCC,IAHmC,aAGnCA,IAHmC;;AASzD,MAAMC,UAAU,GAAGD,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEE,OAAT,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,SAAvB,CAAiC,UAAChB,KAAD;AAAA,WAAgBA,KAAK,CAACC,OAAN,KAAkBA,OAAlC;AAAA,GAAjC,CAAnB;AACA,MAAMgB,WAAW,GAAGL,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEE,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,oFAAG,sBAAkCV,OAArC,2DAAG,uBAA2Ca,SAA3C,CAAqD,UAACE,MAAD;AAAA,WAAiBA,MAAM,CAACZ,WAAP,KAAuBD,MAAM,CAACC,WAA/C;AAAA,GAArD,CAApB;AACA,MAAIa,OAAO,GAAGP,IAAH,aAAGA,IAAH,iDAAGA,IAAI,CAAEE,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,qFAAG,uBAAkCV,OAAlC,CAA0Cc,WAA1C,CAAH,2DAAG,uBAAwDE,OAAtE,CAXyD,CAY3D;;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYjB,OAAZ,aAAYA,OAAZ,uBAAYA,OAAO,CAAEiB,OAArB,SAAiC,CAAAjB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEiB,OAAT,IAAmB,EAAnB,GAAwB,IAAxB,GAA+B,IAAhE,CADJ;AAGH,CAhBD;;GAAMpB,Y;UAG+BF,Q;;;KAH/BE,Y;AAkBN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  plant: any;\n  settingType: SensorsTypes;\n}\n\nconst LightReading: React.FC<Props> = ({ plant, plantId  }) => {\n    const setting = plant.sensors.find((module: ISetting) => module.settingType === settingType);\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 1000,\n      });\n    \n      const plantIndex = data?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plantId);\n      const sensorIndex = data?.getUser.plants[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n      let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    // const reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    return (\n        <Text bold>{setting?.reading} % {setting?.reading < 40 ? 'ðŸŒ™' : 'ðŸ’¡'}</Text>\n    );\n};\n\nexport default LightReading;\n"]},"metadata":{},"sourceType":"module"}