{"ast":null,"code":"var _jsxFileName = \"/Users/virginiamuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/HumidityReading.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nconst HumidityReading = ({\n  module,\n  plantId\n}) => {\n  var _data$getUser, _data$getUser$plants, _data$getUser$plants$, _data$getUser$plants$2, _data$getUser$plants$3, _data$getUser$plants$4;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 10000,\n\n  }); // const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n\n  const plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(plant => plant.plantId === plantId);\n  const sensorIndex = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.findIndex(sensor => sensor.settingType === module.settingType);\n  let reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$3 = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$3 === void 0 ? void 0 : (_data$getUser$plants$4 = _data$getUser$plants$3.sensors[sensorIndex]) === null || _data$getUser$plants$4 === void 0 ? void 0 : _data$getUser$plants$4.reading; // if (reading > -5 && reading <= 0) reading = 0;\n  // if (reading >= 100 && reading < 110) reading = 100;\n  // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n  // const readingFormatted = (module.reading >= 0 && module.reading <= 110) ? `${module.reading} % ðŸ’§` : 'Disconected';  \n  // console.log(\"module.reading\", module.reading, reading)\n\n  return __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, `${reading} % ðŸ’§`);\n};\n\nexport default HumidityReading;","map":{"version":3,"sources":["/Users/virginiamuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/HumidityReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","HumidityReading","module","plantId","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","plantIndex","getUser","plants","findIndex","plant","sensorIndex","sensors","sensor","settingType","reading"],"mappings":";;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,yBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAOA,MAAMC,eAAgC,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA0B;AAAA;;AAE/D,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACC,2BAAD,EAA8B;AACnEO,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD,CAGnE;;AAHmE,GAA9B,CAAzC,CAF+D,CAS7D;;AACF,QAAMC,UAAU,GAAGH,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEI,OAAT,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,SAAvB,CAAkCC,KAAD,IAAgBA,KAAK,CAACV,OAAN,KAAkBA,OAAnE,CAAnB;AACA,QAAMW,WAAW,GAAGR,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,oFAAG,sBAAkCM,OAArC,2DAAG,uBAA2CH,SAA3C,CAAsDI,MAAD,IAAiBA,MAAM,CAACC,WAAP,KAAuBf,MAAM,CAACe,WAApG,CAApB;AACA,MAAIC,OAAO,GAAGZ,IAAH,aAAGA,IAAH,iDAAGA,IAAI,CAAEI,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,qFAAG,uBAAkCM,OAAlC,CAA0CD,WAA1C,CAAH,2DAAG,uBAAwDI,OAAtE,CAZ+D,CAe/D;AACA;AAGA;AACA;AACA;;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAa,GAAEA,OAAQ,OAAvB,CADJ;AAGH,CAzBD;;AA2BA,eAAejB,eAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  module: any;\n  plantId: any;\n}\n\nconst HumidityReading: React.FC<Props> = ({ module, plantId  }) => {\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        // pollInterval: 10000,\n      });\n    \n    \n      // const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n    const plantIndex = data?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plantId);\n    const sensorIndex = data?.getUser.plants[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n    let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    \n    \n    // if (reading > -5 && reading <= 0) reading = 0;\n    // if (reading >= 100 && reading < 110) reading = 100;\n\n\n    // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n    // const readingFormatted = (module.reading >= 0 && module.reading <= 110) ? `${module.reading} % ðŸ’§` : 'Disconected';  \n    // console.log(\"module.reading\", module.reading, reading)\n    return (\n        <Text bold>{`${reading} % ðŸ’§`}</Text>\n    );\n};\n\nexport default HumidityReading;\n"]},"metadata":{},"sourceType":"module"}