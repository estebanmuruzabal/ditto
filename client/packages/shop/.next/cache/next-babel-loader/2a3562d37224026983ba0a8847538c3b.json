{"ast":null,"code":"var _jsxFileName = \"/Users/virginiamuruzabal/work/ditto/client/packages/shop/src/features/location-modal/location-modal.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { closeModal } from '@redq/reuse-modal';\nimport { useIntl } from 'react-intl';\nimport { getCookie, setCookie } from 'utils/session';\nimport { GoogleMap, Marker, LoadScript } from \"@react-google-maps/api\";\nconst googleApiKey = process.env.GOOGLE_API_KEY;\nexport default function LocationModal({\n  isPickUp\n}) {\n  // Your existing state variables and functions here\n  const {\n    0: address,\n    1: setAddress\n  } = useState(\"\");\n  const intl = useIntl(); // Handle place selection\n  // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: \"YOUR_API_KEY\"\n  // })\n  // const handleSelect = async (address) => {\n  //   console.log('address',address)\n  //   setAddress(address);\n  //   const results = await geocodeByAddress(address);\n  //   const latLng = await getLatLng(results[0]);\n  // };\n\n  const handleZipCode = () => {\n    setCookie('zip_code', address);\n    closeModal();\n  };\n\n  const handleSelect = address => {// geocodeByAddress(address)\n    //   .then(results => getLatLng(results[0]))\n    //   .then(latLng => {\n    //     console.log('Success', latLng)\n    //     setAddress(address)\n    //   })\n    //   .catch(error => console.error('Error', error));\n  }; // const handleSelect = address => {\n  //   geocodeByAddress(address)\n  //     .then(results => getLatLng(results[0]))\n  //     .then(latLng => {\n  //       console.log('Success', latLng)\n  //       setDeliveryAddress(address)\n  //     })\n  //     .catch(error => console.error('Error', error));\n  // };\n  // const isPointInPolygon = (latitude, longitude, polygon) => {\n  //   if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n  //     throw new TypeError('Invalid latitude or longitude. Numbers are expected')\n  //   } else if (!polygon || !Array.isArray(polygon)) {\n  //     throw new TypeError('Invalid polygon. Array with locations expected')\n  //   } else if (polygon.length === 0) {\n  //     throw new TypeError('Invalid polygon. Non-empty Array expected')\n  //   }\n  //   const x = latitude; const y = longitude\n  //   let inside = false\n  //   for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n  //     const xi = polygon[i][0]; const yi = polygon[i][1]\n  //     const xj = polygon[j][0]; const yj = polygon[j][1]\n  //     const intersect = ((yi > y) !== (yj > y)) &&\n  //             (x < (xj - xi) * (y - yi) / (yj - yi) + xi)\n  //     if (intersect) inside = !inside\n  //   }\n  //   return inside\n  // };\n  // const dogsBeachPolygon = [\n  //   { latitude: 32.7502030, longitude: -117.2432460},\n  //   { latitude: 32.7489451, longitude: -117.2523153},\n  //   { latitude: 32.7541973, longitude: -117.2525931},\n  //   { latitude: 32.7542674, longitude: -117.2460937},\n  // ]\n  // console.log('isInside:', isPointInPolygon(32.7449888, -117.2263579, dogsBeachPolygon))\n  // const fetchCurrentPosition = () => {\n  //   navigator.geolocation.getCurrentPosition(\n  //     function(position) {\n  //       var pos = new google.maps.LatLng(\n  //         position.coords.latitude,\n  //         position.coords.longitude\n  //       );\n  //       console.log(position.coords);\n  //       google.maps.geometry.poly.containsLocation(pos, refPoly.current.polygon)\n  //         ? setShowBtn(true)\n  //         : setShowBtn(false);\n  //     },\n  //     function(error) {\n  //       console.log(error);\n  //     }\n  //   );\n  // };\n\n\n  useEffect(() => {\n    if (!getCookie('first_visit')) {\n      setCookie('first_visit', true);\n    }\n  }, []);\n  console.log('addresss', address);\n  const containerStyle = {\n    width: '100%',\n    height: '400px'\n  };\n  const center = {\n    lat: 37.437041393899676,\n    lng: -4.191635586788259\n  };\n  return __jsx(LoadScript, {\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, __jsx(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, __jsx(Marker, {\n    position: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }))) //     {/* <SubHeading>\n  //       <FormattedMessage\n  //         id=\"locationModalSubHeading\"\n  //         defaultMessage=\"You have to select your location for deliver service perpous\"\n  //       />\n  //     </SubHeading> */}\n  //     {/* <PlacesAutocomplete\n  //       value={address}\n  //       onChange={(e) => setAddress(e)}\n  //       onSelect={handleSelect}\n  //       searchOptions={{\n  //         types: [],\n  //         componentRestrictions: { country: \"us\" },\n  //       }}\n  //     >\n  //       {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n  //         <div>\n  //           <input\n  //             {...getInputProps({\n  //               placeholder: \"Enter address\",\n  //               className: \"location-search-input\",\n  //               style: {\n  //                 display: 'block',\n  //                 width: '220px',\n  //                 padding:'0px 8px',\n  //                 appearance: 'none',\n  //                 fontFamily: `'Lato', sans-serif`,\n  //                 fontSize: 'base',\n  //                 lineHeight: 'inherit',\n  //                 border: '1px solid',\n  //                 borderColor: '#f1f1f1',\n  //                 borderRadius: '3px',\n  //                 backgroundColor: 'white',\n  //                 color: 'text.bold',\n  //                 height: '48px',\n  //                 transition: 'all 0.25s ease',\n  //                 // mb: 3,\n  //                 '&:focus': {\n  //                   borderColor: '#009E7F',\n  //                 },\n  //               },\n  //             })}\n  //           />\n  //           <div className=\"autocomplete-dropdown-container\">\n  //             {loading && <div>Loading...</div>}\n  //             {suggestions.map((suggestion) => {\n  //               const style = suggestion.active\n  //                 ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n  //                 : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n  //               return (\n  //                 <div {...getSuggestionItemProps(suggestion, { style })}>\n  //                   {suggestion.description}\n  //                 </div>\n  //               );\n  //             })}\n  //           </div>\n  //         </div>\n  //       )}\n  //     </PlacesAutocomplete> */}\n  //     <Button\n  //       fullwidth\n  //       radius={100}\n  //       onClick={handleZipCode}\n  //     >\n  //       <FormattedMessage id='continueBtn' defaultMessage='Continue' />\n  //     </Button>\n  //   </Container>\n  //   <OfferSection>\n  //     <GiftBox />\n  //     <Offer>\n  //       <FormattedMessage\n  //         id=\"locationModalFooter\"\n  //         defaultMessage=\"Free Delivery For 1st Order\"\n  //         values={{ number: 1 }}\n  //       />\n  //     </Offer>\n  //   </OfferSection>\n  // </Wrapper>\n  ;\n}","map":{"version":3,"sources":["/Users/virginiamuruzabal/work/ditto/client/packages/shop/src/features/location-modal/location-modal.tsx"],"names":["React","useState","useEffect","closeModal","useIntl","getCookie","setCookie","GoogleMap","Marker","LoadScript","googleApiKey","process","env","GOOGLE_API_KEY","LocationModal","isPickUp","address","setAddress","intl","handleZipCode","handleSelect","console","log","containerStyle","width","height","center","lat","lng","NEXT_PUBLIC_GOOGLE_MAPS_API_KEY"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,SAA2BC,OAA3B,QAA0C,YAA1C;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,eAArC;AAaA,SAASC,SAAT,EAAoCC,MAApC,EAA4CC,UAA5C,QAA8D,wBAA9D;AAaA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAjC;AAKA,eAAe,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAqC;AAClD;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBhB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMiB,IAAI,GAAGd,OAAO,EAApB,CAHkD,CAIlD;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMe,aAAa,GAAG,MAAM;AAC1Bb,IAAAA,SAAS,CAAC,UAAD,EAAaU,OAAb,CAAT;AACAb,IAAAA,UAAU;AACX,GAHD;;AAKA,QAAMiB,YAAY,GAAGJ,OAAO,IAAI,CAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AAED,GATD,CAvBkD,CAkCpD;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACG,SAAS,CAAC,aAAD,CAAd,EAA+B;AAC7BC,MAAAA,SAAS,CAAC,aAAD,EAAgB,IAAhB,CAAT;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAKAe,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,OAAxB;AAEA,QAAMO,cAAc,GAAG;AACrBC,IAAAA,KAAK,EAAE,MADc;AAErBC,IAAAA,MAAM,EAAE;AAFa,GAAvB;AAKA,QAAMC,MAAM,GAAG;AACbC,IAAAA,GAAG,EAAE,kBADQ;AAEbC,IAAAA,GAAG,EAAE,CAAC;AAFO,GAAf;AAKA,SAEM,MAAC,UAAD;AAAY,IAAA,gBAAgB,EAAEjB,OAAO,CAACC,GAAR,CAAYiB,+BAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,SAAD;AACE,IAAA,iBAAiB,EAAEN,cADrB;AAEE,IAAA,MAAM,EAAEG,MAFV;AAGE,IAAA,IAAI,EAAE,EAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEA,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADA,CAFN,CAWE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzFF;AA2FD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { closeModal } from '@redq/reuse-modal';\nimport MaskedInput from 'react-text-mask';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getCookie, setCookie } from 'utils/session';\nimport {\n  Wrapper,\n  Container,\n  LogoWrapper,\n  Heading,\n  SubHeading,\n  OfferSection,\n  Offer,\n  Button,\n  Input,\n} from './location-modal.style';\nimport { GiftBox } from 'assets/icons/GiftBox';\nimport { GoogleMap, useJsApiLoader, Marker, LoadScript } from \"@react-google-maps/api\";\nimport {\n  setKey,\n  setDefaults,\n  setLanguage,\n  setRegion,\n  fromAddress,\n  fromLatLng,\n  fromPlaceId,\n  setLocationType,\n  geocode,\n  RequestType,\n} from \"react-geocode\";\nconst googleApiKey = process.env.GOOGLE_API_KEY;\n\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n\n\nexport default function LocationModal({ isPickUp }) {\n  // Your existing state variables and functions here\n  const [address, setAddress] = useState(\"\");\n  const intl = useIntl();\n  // Handle place selection\n  \n  // const { isLoaded } = useJsApiLoader({\n  //   id: 'google-map-script',\n  //   googleMapsApiKey: \"YOUR_API_KEY\"\n  // })\n  \n  // const handleSelect = async (address) => {\n  //   console.log('address',address)\n  //   setAddress(address);\n  //   const results = await geocodeByAddress(address);\n  //   const latLng = await getLatLng(results[0]);\n  // };\n  \n  const handleZipCode = () => {\n    setCookie('zip_code', address);\n    closeModal();\n  };\n\n  const handleSelect = address => {\n    // geocodeByAddress(address)\n    //   .then(results => getLatLng(results[0]))\n    //   .then(latLng => {\n    //     console.log('Success', latLng)\n    //     setAddress(address)\n    //   })\n    //   .catch(error => console.error('Error', error));\n\n  };\n\n// const handleSelect = address => {\n  //   geocodeByAddress(address)\n  //     .then(results => getLatLng(results[0]))\n  //     .then(latLng => {\n  //       console.log('Success', latLng)\n  //       setDeliveryAddress(address)\n  //     })\n  //     .catch(error => console.error('Error', error));\n\n  // };\n\n  // const isPointInPolygon = (latitude, longitude, polygon) => {\n  //   if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n  //     throw new TypeError('Invalid latitude or longitude. Numbers are expected')\n  //   } else if (!polygon || !Array.isArray(polygon)) {\n  //     throw new TypeError('Invalid polygon. Array with locations expected')\n  //   } else if (polygon.length === 0) {\n  //     throw new TypeError('Invalid polygon. Non-empty Array expected')\n  //   }\n  \n  //   const x = latitude; const y = longitude\n  \n  //   let inside = false\n  //   for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n  //     const xi = polygon[i][0]; const yi = polygon[i][1]\n  //     const xj = polygon[j][0]; const yj = polygon[j][1]\n  \n  //     const intersect = ((yi > y) !== (yj > y)) &&\n  //             (x < (xj - xi) * (y - yi) / (yj - yi) + xi)\n  //     if (intersect) inside = !inside\n  //   }\n  \n  //   return inside\n  // };\n\n  // const dogsBeachPolygon = [\n  //   { latitude: 32.7502030, longitude: -117.2432460},\n  //   { latitude: 32.7489451, longitude: -117.2523153},\n  //   { latitude: 32.7541973, longitude: -117.2525931},\n  //   { latitude: 32.7542674, longitude: -117.2460937},\n  // ]\n\n  // console.log('isInside:', isPointInPolygon(32.7449888, -117.2263579, dogsBeachPolygon))\n  \n  // const fetchCurrentPosition = () => {\n  //   navigator.geolocation.getCurrentPosition(\n  //     function(position) {\n  //       var pos = new google.maps.LatLng(\n  //         position.coords.latitude,\n  //         position.coords.longitude\n  //       );\n\n  //       console.log(position.coords);\n  //       google.maps.geometry.poly.containsLocation(pos, refPoly.current.polygon)\n  //         ? setShowBtn(true)\n  //         : setShowBtn(false);\n  //     },\n  //     function(error) {\n  //       console.log(error);\n  //     }\n  //   );\n  // };\n\n  useEffect(() => {\n    if (!getCookie('first_visit')) {\n      setCookie('first_visit', true);\n    }\n  }, []);\n  console.log('addresss', address)\n\n  const containerStyle = {\n    width: '100%',\n    height: '400px'\n  };\n  \n  const center = {\n    lat: 37.437041393899676,\n    lng: -4.191635586788259\n  };\n\n  return (\n\n        <LoadScript googleMapsApiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}>\n        <GoogleMap\n          mapContainerStyle={containerStyle}\n          center={center}\n          zoom={10}\n        >\n          <Marker position={center} />\n        </GoogleMap>\n      </LoadScript>\n    //     {/* <SubHeading>\n    //       <FormattedMessage\n    //         id=\"locationModalSubHeading\"\n    //         defaultMessage=\"You have to select your location for deliver service perpous\"\n    //       />\n    //     </SubHeading> */}\n    //     {/* <PlacesAutocomplete\n    //       value={address}\n    //       onChange={(e) => setAddress(e)}\n    //       onSelect={handleSelect}\n    //       searchOptions={{\n    //         types: [],\n    //         componentRestrictions: { country: \"us\" },\n    //       }}\n    //     >\n    //       {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n    //         <div>\n    //           <input\n    //             {...getInputProps({\n    //               placeholder: \"Enter address\",\n    //               className: \"location-search-input\",\n    //               style: {\n    //                 display: 'block',\n    //                 width: '220px',\n\n    //                 padding:'0px 8px',\n    //                 appearance: 'none',\n    //                 fontFamily: `'Lato', sans-serif`,\n    //                 fontSize: 'base',\n    //                 lineHeight: 'inherit',\n    //                 border: '1px solid',\n    //                 borderColor: '#f1f1f1',\n    //                 borderRadius: '3px',\n    //                 backgroundColor: 'white',\n    //                 color: 'text.bold',\n    //                 height: '48px',\n    //                 transition: 'all 0.25s ease',\n    //                 // mb: 3,\n    //                 '&:focus': {\n    //                   borderColor: '#009E7F',\n    //                 },\n    //               },\n    //             })}\n    //           />\n    //           <div className=\"autocomplete-dropdown-container\">\n    //             {loading && <div>Loading...</div>}\n    //             {suggestions.map((suggestion) => {\n    //               const style = suggestion.active\n    //                 ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n    //                 : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n    //               return (\n    //                 <div {...getSuggestionItemProps(suggestion, { style })}>\n    //                   {suggestion.description}\n    //                 </div>\n    //               );\n    //             })}\n    //           </div>\n    //         </div>\n    //       )}\n    //     </PlacesAutocomplete> */}\n    //     <Button\n    //       fullwidth\n    //       radius={100}\n    //       onClick={handleZipCode}\n    //     >\n    //       <FormattedMessage id='continueBtn' defaultMessage='Continue' />\n    //     </Button>\n    //   </Container>\n    //   <OfferSection>\n    //     <GiftBox />\n    //     <Offer>\n    //       <FormattedMessage\n    //         id=\"locationModalFooter\"\n    //         defaultMessage=\"Free Delivery For 1st Order\"\n    //         values={{ number: 1 }}\n    //       />\n    //     </Offer>\n    //   </OfferSection>\n    // </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}