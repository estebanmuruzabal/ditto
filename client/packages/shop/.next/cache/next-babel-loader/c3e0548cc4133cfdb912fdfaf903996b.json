{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport moment from 'moment';\nimport { hasDittoBotUpdatedInLastMinute } from 'utils/ditto-bot';\n\nconst LastConectionReading = ({\n  plantIndex\n}) => {\n  var _data$getUser, _data$getUser$plants$, _data$getUser2;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\" // pollInterval: 10000,\n\n  }); // const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n\n  const lastTimeStamp = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants$ = _data$getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : _data$getUser$plants$.timestamp;\n  console.log('lastTimeStamp', lastTimeStamp); // const sensorIndex = data?.getUser.plantsx[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n  // let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n  return __jsx(Text, {\n    key: 'lastcontt' + plantIndex,\n    style: {\n      width: 'max-content'\n    }\n  }, (lastTimeStamp === null || lastTimeStamp === void 0 ? void 0 : lastTimeStamp.length) > 0 ? moment(lastTimeStamp).format('hh:mm A - DD MMM') : '', \" \", hasDittoBotUpdatedInLastMinute(lastTimeStamp, data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.plants.timeZone) ? '[ONLINE]' : '[OFFLINE]');\n};\n\nexport default LastConectionReading;","map":null,"metadata":{},"sourceType":"module"}