{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FormattedMessage } from 'react-intl';\nimport { useQuery } from '@apollo/react-hooks';\nimport Sticky from 'react-stickynode';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Popover from 'components/popover/popover';\nimport { ArrowDropDown } from 'assets/icons/ArrowDropDown';\nimport { CategoryIcon } from 'assets/icons/CategoryIcon';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { useAppState } from 'contexts/app/app.provider';\nimport { SidebarMobileLoader, SidebarLoader } from 'components/placeholder/placeholder';\nimport { CategoryWrapper, TreeWrapper, PopoverHandler, PopoverWrapper, SidebarWrapper, RequestMedicine } from './sidebar.style';\nimport { TreeMenu } from 'components/tree-menu/tree-menu';\nimport { GET_CATEGORIES } from 'graphql/query/category.query';\nimport { REQUEST_MEDICINE_MENU_ITEM } from 'site-settings/site-navigation';\n\nconst SidebarCategory = ({\n  deviceType: {\n    mobile,\n    tablet,\n    desktop\n  },\n  type\n}) => {\n  const router = useRouter();\n  const {\n    data,\n    loading\n  } = useQuery(GET_CATEGORIES, {\n    variables: {\n      type: router.query.type\n    }\n  });\n  const {\n    pathname,\n    query\n  } = router;\n  const selectedQueries = query.category;\n  const {\n    isRtl\n  } = useLocale();\n\n  const onCategoryClick = slug => {\n    const {\n      type\n    } = query,\n          rest = _objectWithoutProperties(query, [\"type\"]);\n\n    if (type) {\n      router.push({\n        pathname,\n        query: _objectSpread(_objectSpread({}, rest), {}, {\n          category: slug\n        })\n      }, {\n        pathname: `/${type}`,\n        query: _objectSpread(_objectSpread({}, rest), {}, {\n          category: slug\n        })\n      });\n    } else {\n      router.push({\n        pathname,\n        query: _objectSpread(_objectSpread({}, rest), {}, {\n          category: slug\n        })\n      });\n    }\n  };\n\n  const isSidebarSticky = useAppState('isSidebarSticky');\n\n  if (!data || loading) {\n    if (mobile || tablet) {\n      return __jsx(SidebarMobileLoader, null);\n    }\n\n    return __jsx(SidebarLoader, null);\n  }\n\n  return __jsx(CategoryWrapper, null, __jsx(PopoverWrapper, null, __jsx(Popover, {\n    handler: __jsx(PopoverHandler, null, __jsx(\"div\", null, __jsx(CategoryIcon, null), \"Select your Category\"), __jsx(\"div\", null, __jsx(ArrowDropDown, null))),\n    className: \"category-popover\",\n    content: __jsx(React.Fragment, null, type === 'medicine' && __jsx(Link, {\n      href: REQUEST_MEDICINE_MENU_ITEM.href\n    }, __jsx(RequestMedicine, null, __jsx(FormattedMessage, {\n      id: REQUEST_MEDICINE_MENU_ITEM.id,\n      defaultMessage: REQUEST_MEDICINE_MENU_ITEM.defaultMessage\n    }))), __jsx(TreeMenu, {\n      data: data.shopCategories.items,\n      onClick: onCategoryClick,\n      active: selectedQueries\n    }))\n  })), __jsx(SidebarWrapper, {\n    style: {\n      paddingTop: type === 'medicine' ? 0 : 45\n    }\n  }, __jsx(Sticky, {\n    enabled: isSidebarSticky,\n    top: type === 'medicine' ? 89 : 110\n  }, type === 'medicine' && __jsx(Link, {\n    href: REQUEST_MEDICINE_MENU_ITEM.href\n  }, __jsx(RequestMedicine, null, __jsx(FormattedMessage, {\n    id: REQUEST_MEDICINE_MENU_ITEM.id,\n    defaultMessage: REQUEST_MEDICINE_MENU_ITEM.defaultMessage\n  }))), __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: 688,\n    renderView: props => __jsx(\"div\", _extends({}, props, {\n      style: _objectSpread(_objectSpread({}, props.style), {}, {\n        marginLeft: isRtl ? props.style.marginRight : 0,\n        marginRight: isRtl ? 0 : props.style.marginRight\n      })\n    }))\n  }, __jsx(TreeWrapper, null, __jsx(TreeMenu, {\n    data: data.shopCategories.items,\n    onClick: onCategoryClick,\n    active: selectedQueries\n  }))))));\n};\n\nexport default SidebarCategory;","map":null,"metadata":{},"sourceType":"module"}