{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightReading.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nconst LightReading = ({\n  plant,\n  settingType\n}) => {\n  var _data$getUser, _data$getUser$plants;\n\n  const setting = plant.sensors.find(module => module.settingType === settingType);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000\n  });\n  const sensorIndex = Number(setting === null || setting === void 0 ? void 0 : setting.settingType[(setting === null || setting === void 0 ? void 0 : setting.settingType.length) - 1]);\n  const plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(plant => plant.plantId === plant.plantId); // const reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n  return __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, setting === null || setting === void 0 ? void 0 : setting.reading, \" % \", (setting === null || setting === void 0 ? void 0 : setting.reading) < 40 ? 'ðŸŒ™' : 'ðŸ’¡');\n};\n\nexport default LightReading;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/LightReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","LightReading","plant","settingType","setting","sensors","find","module","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","sensorIndex","Number","length","plantIndex","getUser","plants","findIndex","plantId","reading"],"mappings":";;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAOA,MAAMC,YAA6B,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA6B;AAAA;;AAC/D,QAAMC,OAAO,GAAGF,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAoBC,MAAD,IAAsBA,MAAM,CAACJ,WAAP,KAAuBA,WAAhE,CAAhB;AAEA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BX,QAAQ,CAACC,2BAAD,EAA8B;AACnEW,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAAzC;AAMA,QAAMC,WAAW,GAAGC,MAAM,CAACX,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAED,WAAT,CAAqB,CAAAC,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAED,WAAT,CAAqBa,MAArB,IAA8B,CAAnD,CAAD,CAA1B;AACA,QAAMC,UAAU,GAAGP,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEQ,OAAT,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,SAAvB,CAAkClB,KAAD,IAAgBA,KAAK,CAACmB,OAAN,KAAkBnB,KAAK,CAACmB,OAAzE,CAAnB,CAV+D,CAW/D;;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYjB,OAAZ,aAAYA,OAAZ,uBAAYA,OAAO,CAAEkB,OAArB,SAAiC,CAAAlB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEkB,OAAT,IAAmB,EAAnB,GAAwB,IAAxB,GAA+B,IAAhE,CADJ;AAGH,CAfD;;AAiBA,eAAerB,YAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  plant: any;\n  settingType: SensorsTypes;\n}\n\nconst LightReading: React.FC<Props> = ({ plant, settingType  }) => {\n    const setting = plant.sensors.find((module: ISetting) => module.settingType === settingType);\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 10000,\n      });\n    \n    const sensorIndex = Number(setting?.settingType[setting?.settingType.length - 1]);\n    const plantIndex = data?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plant.plantId);            \n    // const reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    return (\n        <Text bold>{setting?.reading} % {setting?.reading < 40 ? 'ðŸŒ™' : 'ðŸ’¡'}</Text>\n    );\n};\n\nexport default LightReading;\n"]},"metadata":{},"sourceType":"module"}