{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { DeliveryMethodsConstants, plazaBelgranoPolygon, plazaEspañaPolygon, plazaNueveDeJulioPolygon, plazadoceDeOctubrePolygon, resistenciaZipCode } from 'utils/constant';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { ActionButton, ActionsButtons, BannerIcon, Button, ButtonGroup, CardWrapper, Container, DeliveryMethods, DeliveryText, Heading, Input, Options, Wrapper } from './delivery-selection.style';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport DeliveryIcon from 'assets/images/locationIcon.webp';\nimport { Plus } from 'assets/icons/PlusMinus';\nimport RadioCardTWO from 'components/radio-card/radio-card-two';\nimport RadioGroupThree from 'components/radio-group/radio-group-three';\nimport { IconWrapper } from '../checkout-two/checkout-two.style';\n\nconst DeliverySelection = (_ref) => {\n  var _props$submitResult2, _props$submitResult2$;\n\n  let props = Object.assign({}, _ref);\n  const [zipCode, setZipCode] = React.useState('');\n  const [searchResult, setSearchResult] = React.useState([]);\n  const {\n    0: deliveryAddressAutocomplete,\n    1: setDeliveryAddressAutocomplete\n  } = useState(\"\");\n  const {\n    0: insideDeliveryArea,\n    1: setInsideDeliveryArea\n  } = useState(true); // const setDeliveryMethod =  (deliveryOrPickupMethodSelected) => {\n  //   const deliveryMethod = isPickUpSelected ? deliveryOrPickupMethodSelected : {...deliveryOrPickupMethodSelected, deliveryAddressAutocomplete};\n  //   setDeliveryMethodSelected(deliveryMethod)\n  //   props.setDeliveryAddress(deliveryMethod, false)\n  //   // setCookie(deliveryMethodCookieKeyName, deliveryMethod);\n  //   // }\n  // };\n\n  function inside(point, vs) {\n    var x = point[0],\n        y = point[1];\n    var inside = false;\n\n    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n      var xi = vs[i][0],\n          yi = vs[i][1];\n      var xj = vs[j][0],\n          yj = vs[j][1];\n      var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n      if (intersect) inside = !inside;\n    }\n\n    return inside;\n  }\n\n  ;\n\n  const searchPickupZipCode = e => {\n    var _props$deliveryMethod;\n\n    const zipCode = e.target.value;\n    handleOnFocus(e);\n    setZipCode(zipCode);\n    const pickUpOptionsMethods = (_props$deliveryMethod = props.deliveryMethods) === null || _props$deliveryMethod === void 0 ? void 0 : _props$deliveryMethod.filter(deliveryMethod => {\n      return deliveryMethod.isPickUp === true;\n    }); // const methodFound = pickUpOptionsMethods.filter(method => method.details.includes(zipCode)\n\n    const methodsFound = zipCode === resistenciaZipCode ? pickUpOptionsMethods : []; // e.stopPropagation();\n\n    props.setDeliveryMethodsSelected(methodsFound.length > 0 ? methodsFound : null);\n  };\n\n  const setDelivery = (e, deli) => {\n    e === null || e === void 0 ? void 0 : e.stopPropagation();\n    props.setDeliveryMethodType(deli);\n    props.setDeliveryMethodsSelected(null);\n    setZipCode('');\n  };\n\n  const deleteDeliveryAddress = () => {\n    setDeliveryAddressAutocomplete('');\n    setInsideDeliveryArea(true);\n    setZipCode('');\n  };\n\n  const deleteDeliverySelection = () => {\n    props.setDeliveryMethodsSelected(null);\n    props.setDeliveryAddress(null, true);\n    setDeliveryAddressAutocomplete('');\n    setInsideDeliveryArea(true);\n    props.setDeliveryMethodType(null);\n    setZipCode('');\n  };\n\n  const handleOnFocus = event => {\n    event.preventDefault();\n    event.stopPropagation();\n  }; // deliveryMethodSelected\n\n\n  const isPickUpSelected = props.deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP;\n  const isDeliverySelected = props.deliveryMethodTypeSelected === DeliveryMethodsConstants.DELIVERY;\n  const intl = useIntl();\n\n  const handleSelect = async (address, addressAlreadyAdded) => {\n    const results = await geocodeByAddress(address);\n    console.log('results', results);\n    const latLng = await getLatLng(results[0]);\n    let deliveryOptionsMethods = [];\n    let insideDeliveryArea = false;\n\n    if (inside([latLng.lat, latLng.lng], plazadoceDeOctubrePolygon)) {\n      var _props$deliveryMethod2;\n\n      console.log('inside plazadoceDeOctubrePolygon');\n      insideDeliveryArea = true;\n      deliveryOptionsMethods = (_props$deliveryMethod2 = props.deliveryMethods) === null || _props$deliveryMethod2 === void 0 ? void 0 : _props$deliveryMethod2.filter(deliveryMethod => {\n        if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Lunes')) {\n          deliveryMethod.name = 'GRATIS';\n          return true;\n        }\n\n        return !deliveryMethod.isPickUp;\n      });\n    } else if (inside([latLng.lat, latLng.lng], plazaBelgranoPolygon)) {\n      var _props$deliveryMethod3;\n\n      console.log('inside plazaBelgranoPolygon');\n      insideDeliveryArea = true;\n      deliveryOptionsMethods = (_props$deliveryMethod3 = props.deliveryMethods) === null || _props$deliveryMethod3 === void 0 ? void 0 : _props$deliveryMethod3.filter(deliveryMethod => {\n        if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Martes')) {\n          deliveryMethod.name = 'GRATIS';\n          return true;\n        }\n\n        return !deliveryMethod.isPickUp;\n      });\n    } else if (inside([latLng.lat, latLng.lng], plazaNueveDeJulioPolygon)) {\n      var _props$deliveryMethod4;\n\n      console.log('inside plazaNueveDeJulioPolygon');\n      insideDeliveryArea = true;\n      deliveryOptionsMethods = (_props$deliveryMethod4 = props.deliveryMethods) === null || _props$deliveryMethod4 === void 0 ? void 0 : _props$deliveryMethod4.filter(deliveryMethod => {\n        if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Miercoles')) {\n          deliveryMethod.name = 'GRATIS';\n          return true;\n        }\n\n        return !deliveryMethod.isPickUp;\n      });\n    } else if (inside([latLng.lat, latLng.lng], plazaEspañaPolygon)) {\n      var _props$deliveryMethod5;\n\n      insideDeliveryArea = true;\n      console.log('inside plazaEspañaPolygon');\n      deliveryOptionsMethods = (_props$deliveryMethod5 = props.deliveryMethods) === null || _props$deliveryMethod5 === void 0 ? void 0 : _props$deliveryMethod5.filter(deliveryMethod => {\n        if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Jueves')) {\n          deliveryMethod.name = 'GRATIS';\n          return true;\n        }\n\n        return !deliveryMethod.isPickUp;\n      });\n    }\n\n    if (insideDeliveryArea) {\n      var _results$;\n\n      console.log('sad');\n      setInsideDeliveryArea(true);\n      props.setDeliveryMethodsSelected(deliveryOptionsMethods);\n      props.setDeliveryAddress((_results$ = results[0]) === null || _results$ === void 0 ? void 0 : _results$.formatted_address, addressAlreadyAdded);\n    } else {\n      setInsideDeliveryArea(false);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(DeliveryMethods, null, __jsx(Options, {\n    style: {\n      justifyContent: !props.deliveryMethodsSelected ? 'space-between' : 'space-between'\n    }\n  }, __jsx(CardWrapper, {\n    color: isPickUpSelected ? '#009E7F' : '#e4f4fc',\n    onClick: e => setDelivery(e, DeliveryMethodsConstants.PICKUP)\n  }, __jsx(FormattedMessage, {\n    id: \"pickUpId\",\n    defaultMessage: \"notFoundId\"\n  })), __jsx(CardWrapper, {\n    color: isDeliverySelected ? '#009E7F' : '#e4f4fc',\n    onClick: e => setDelivery(e, DeliveryMethodsConstants.DELIVERY)\n  }, __jsx(FormattedMessage, {\n    id: \"deliveryId\",\n    defaultMessage: \"notFoundId2\"\n  })))), !!props.userSavedAddresses.length && props.deliveryMethodTypeSelected === DeliveryMethodsConstants.DELIVERY && __jsx(ButtonGroup, null, __jsx(RadioGroupThree, {\n    items: props.userSavedAddresses,\n    component: (item, index) => {\n      var _props$submitResult, _props$submitResult$d;\n\n      return __jsx(RadioCardTWO, {\n        id: `${index}-addresses`,\n        key: index,\n        address: item.address,\n        location: item.location,\n        instructions: item.instructions,\n        title: item.title,\n        name: \"address\",\n        isChecked: (_props$submitResult = props.submitResult) === null || _props$submitResult === void 0 ? void 0 : (_props$submitResult$d = _props$submitResult.delivery_address) === null || _props$submitResult$d === void 0 ? void 0 : _props$submitResult$d.includes(item.address),\n        onChange: () => props.handlePrimary(item, 'address'),\n        onClick: () => {\n          var _item$address, _item$address2;\n\n          handleSelect(`${(_item$address = item.address) === null || _item$address === void 0 ? void 0 : _item$address.split(\",\")[0]} ${(_item$address2 = item.address) === null || _item$address2 === void 0 ? void 0 : _item$address2.split(\",\")[1]}, ${item.location}, ${item.instructions}`, true);\n        },\n        hasEdit: false // onEdit={() => props.handleEditDelete(item, index, 'edit', 'address')}\n        ,\n        onDelete: () => props.handleEditDelete(item, index, 'delete', 'address')\n      });\n    },\n    secondaryComponent: !((_props$submitResult2 = props.submitResult) === null || _props$submitResult2 === void 0 ? void 0 : (_props$submitResult2$ = _props$submitResult2.delivery_address) === null || _props$submitResult2$ === void 0 ? void 0 : _props$submitResult2$.length) ? null : __jsx(Button, {\n      className: \"addButton\",\n      variant: \"text\",\n      type: \"button\",\n      onClick: () => deleteDeliverySelection()\n    }, __jsx(IconWrapper, null, __jsx(Plus, {\n      width: \"10px\"\n    })), __jsx(FormattedMessage, {\n      id: \"changeAddress\",\n      defaultMessage: \"Add New\"\n    }))\n  })), __jsx(Wrapper, null, !!props.deliveryMethodTypeSelected && __jsx(Container, null, !props.deliveryMethodsSelected && __jsx(React.Fragment, null, __jsx(Heading, {\n    onClick: e => handleOnFocus(e)\n  }, isPickUpSelected ? __jsx(FormattedMessage, {\n    id: \"pickupModalheading\",\n    defaultMessage: \"pickupModalheading\"\n  }) : __jsx(FormattedMessage, {\n    id: \"deliveryModalheading\",\n    defaultMessage: \"deliveryModalheading\"\n  })), isPickUpSelected ? __jsx(\"div\", {\n    onClick: e => handleOnFocus(e)\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    onFocus: e => handleOnFocus(e) // placeholder='Código postal'\n    ,\n    value: zipCode,\n    autoComplete: \"off\" // we have to change the onChange because the is no one for the controller name actualy\n    ,\n    onChange: e => searchPickupZipCode(e)\n  })) : __jsx(PlacesAutocomplete, {\n    value: deliveryAddressAutocomplete,\n    onChange: e => setDeliveryAddressAutocomplete(e),\n    onSelect: e => handleSelect(e, false),\n    searchOptions: {\n      types: [],\n      componentRestrictions: {\n        country: \"ar\"\n      }\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => __jsx(\"div\", {\n    onClick: e => handleOnFocus(e)\n  }, __jsx(\"div\", {\n    style: {\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'left',\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: '0px 0px'\n    }\n  }, __jsx(\"input\", getInputProps({\n    placeholder: \"Calle, altura, localidad\",\n    className: \"location-search-input\",\n    style: {\n      width: '220px',\n      padding: '0px 8px',\n      appearance: 'none',\n      fontFamily: `'Lato', sans-serif`,\n      fontSize: '15',\n      lineHeight: 'inherit',\n      border: '1px solid',\n      borderColor: '#f7f7f7',\n      borderRadius: '6px',\n      backgroundColor: '#f7f7f7',\n      color: '#0D1136',\n      height: '48px',\n      transition: 'all 0.25s ease',\n      // mb: 3,\n      '&:hover,&:focus': {\n        outline: 0,\n        borderColor: '#009e7f'\n      }\n    }\n  })), (deliveryAddressAutocomplete === null || deliveryAddressAutocomplete === void 0 ? void 0 : deliveryAddressAutocomplete.length) ? __jsx(ActionsButtons, {\n    className: \"button-wrapper\"\n  }, __jsx(ActionButton, {\n    onClick: () => deleteDeliveryAddress(),\n    className: \"delete-btn\"\n  }, __jsx(CloseIcon, null))) : ''), __jsx(\"div\", {\n    className: \"autocomplete-dropdown-container\"\n  }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map((suggestion, i) => {\n    var _suggestion$descripti, _suggestion$descripti2;\n\n    const style = suggestion.active ? {\n      backgroundColor: \"#fafafa\",\n      cursor: \"pointer\",\n      borderBottom: \"1px solid gray\",\n      justifyContent: \"flex-start\",\n      display: 'flex',\n      maxWidth: '320px'\n    } : {\n      backgroundColor: \"#ffffff\",\n      cursor: \"pointer\",\n      borderBottom: \"1px solid gray\",\n      justifyContent: \"flex-start\",\n      display: 'flex',\n      maxWidth: '320px',\n      alignItems: \"center\"\n    };\n    return __jsx(\"div\", _extends({\n      key: `${i}-suggestion`\n    }, getSuggestionItemProps(suggestion, {\n      style\n    })), __jsx(BannerIcon, null, __jsx(\"img\", {\n      src: DeliveryIcon,\n      alt: \"\"\n    })), (_suggestion$descripti = suggestion.description) === null || _suggestion$descripti === void 0 ? void 0 : _suggestion$descripti.split(\",\")[0], (_suggestion$descripti2 = suggestion.description) === null || _suggestion$descripti2 === void 0 ? void 0 : _suggestion$descripti2.split(\",\")[1]);\n  })))), !props.deliveryMethodsSelected && zipCode.length >= 4 && props.deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP && __jsx(DeliveryText, null, intl.formatMessage({\n    id: 'noDittoPickUpLocations',\n    defaultMessage: 'noDittoPickUpLocations'\n  })), !insideDeliveryArea && __jsx(DeliveryText, null, intl.formatMessage({\n    id: 'noDeliveryThereYet',\n    defaultMessage: 'noDeliveryThereYet'\n  }))))));\n};\n\nexport default DeliverySelection;","map":null,"metadata":{},"sourceType":"module"}