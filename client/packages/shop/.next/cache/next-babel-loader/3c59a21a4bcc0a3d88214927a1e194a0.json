{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/LightReading.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\n\nconst LightReading = ({\n  module,\n  plantId,\n  latestDataFetched\n}) => {\n  var _latestDataFetched$ge, _latestDataFetched$ge2, _latestDataFetched$ge3, _latestDataFetched$ge4, _latestDataFetched$ge5, _latestDataFetched$ge6;\n\n  const plantIndex = latestDataFetched === null || latestDataFetched === void 0 ? void 0 : (_latestDataFetched$ge = latestDataFetched.getUser) === null || _latestDataFetched$ge === void 0 ? void 0 : (_latestDataFetched$ge2 = _latestDataFetched$ge.plants) === null || _latestDataFetched$ge2 === void 0 ? void 0 : _latestDataFetched$ge2.findIndex(plant => plant.plantId === plantId);\n  const sensorIndex = latestDataFetched === null || latestDataFetched === void 0 ? void 0 : (_latestDataFetched$ge3 = latestDataFetched.getUser.plants[plantIndex]) === null || _latestDataFetched$ge3 === void 0 ? void 0 : (_latestDataFetched$ge4 = _latestDataFetched$ge3.sensors) === null || _latestDataFetched$ge4 === void 0 ? void 0 : _latestDataFetched$ge4.findIndex(sensor => sensor.settingType === module.settingType);\n  let reading = latestDataFetched === null || latestDataFetched === void 0 ? void 0 : (_latestDataFetched$ge5 = latestDataFetched.getUser.plants[plantIndex]) === null || _latestDataFetched$ge5 === void 0 ? void 0 : (_latestDataFetched$ge6 = _latestDataFetched$ge5.sensors[sensorIndex]) === null || _latestDataFetched$ge6 === void 0 ? void 0 : _latestDataFetched$ge6.reading;\n  return __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, reading, \" % \", reading < 40 ? 'ðŸŒ™' : 'ðŸ’¡');\n};\n\nexport default LightReading;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/LightReading.tsx"],"names":["React","Text","LightReading","module","plantId","latestDataFetched","plantIndex","getUser","plants","findIndex","plant","sensorIndex","sensors","sensor","settingType","reading"],"mappings":";;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,yBAAxR;;AAeA,MAAMC,YAA6B,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA;AAAnB,CAAD,KAA6C;AAAA;;AAE7E,QAAMC,UAAU,GAAGD,iBAAH,aAAGA,iBAAH,gDAAGA,iBAAiB,CAAEE,OAAtB,oFAAG,sBAA4BC,MAA/B,2DAAG,uBAAoCC,SAApC,CAA+CC,KAAD,IAAgBA,KAAK,CAACN,OAAN,KAAkBA,OAAhF,CAAnB;AACA,QAAMO,WAAW,GAAGN,iBAAH,aAAGA,iBAAH,iDAAGA,iBAAiB,CAAEE,OAAnB,CAA2BC,MAA3B,CAAkCF,UAAlC,CAAH,qFAAG,uBAA+CM,OAAlD,2DAAG,uBAAwDH,SAAxD,CAAmEI,MAAD,IAAiBA,MAAM,CAACC,WAAP,KAAuBX,MAAM,CAACW,WAAjH,CAApB;AACA,MAAIC,OAAO,GAAGV,iBAAH,aAAGA,iBAAH,iDAAGA,iBAAiB,CAAEE,OAAnB,CAA2BC,MAA3B,CAAkCF,UAAlC,CAAH,qFAAG,uBAA+CM,OAA/C,CAAuDD,WAAvD,CAAH,2DAAG,uBAAqEI,OAAnF;AAEF,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYA,OAAZ,SAAwBA,OAAO,GAAG,EAAV,GAAe,IAAf,GAAsB,IAA9C,CADJ;AAGH,CATD;;AAWA,eAAeb,YAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  module: any;\n  plantId: any;\n  latestDataFetched: any;\n}\n\nconst LightReading: React.FC<Props> = ({ module, plantId, latestDataFetched  }) => {\n\n      const plantIndex = latestDataFetched?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plantId);\n      const sensorIndex = latestDataFetched?.getUser.plants[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n      let reading = latestDataFetched?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n    return (\n        <Text bold>{reading} % {reading < 40 ? 'ðŸŒ™' : 'ðŸ’¡'}</Text>\n    );\n};\n\nexport default LightReading;\n"]},"metadata":{},"sourceType":"module"}