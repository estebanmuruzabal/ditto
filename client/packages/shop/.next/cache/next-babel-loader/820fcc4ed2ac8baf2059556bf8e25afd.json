{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport Router from 'next/router';\nimport { Button } from 'components/button/button';\nimport RadioCard from 'components/radio-card/radio-card';\nimport RadioGroup from 'components/radio-group/radio-group';\nimport { Input } from 'components/forms/input';\nimport { Label } from 'components/forms/label';\nimport Uploader from 'components/upload/upload';\nimport UpdateAddress from 'components/address-card/address-card';\nimport UpdateContact from 'components/contact-card/contact-card';\nimport { DELETE_ADDRESS } from 'graphql/mutation/address';\nimport { DELETE_CARD } from 'graphql/mutation/card';\nimport { DELETE_CONTACT } from 'graphql/mutation/contact';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation } from '@apollo/react-hooks';\nimport FormWrapper, { Row, Col, Container, FormTitleWrapper, FormTitle, NoteText, Heading, DeliveryAddress, ButtonGroup, Contact, SubmitBtnWrapper } from './request-product.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage } from 'react-intl';\n\nconst Checkout = () => {\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: isValid,\n    1: setIsValid\n  } = useState(false);\n  const {\n    address,\n    contact\n  } = state;\n  const {\n    0: medicineNameOne,\n    1: setMedicineNameOne\n  } = useState('');\n  const {\n    0: quantityOne,\n    1: setQuantityOne\n  } = useState('');\n  const {\n    0: medicineNameTwo,\n    1: setMedicineNameTwo\n  } = useState('');\n  const {\n    0: quantityTwo,\n    1: setQuantityTwo\n  } = useState('');\n  const [deleteContactMutation] = useMutation(DELETE_CONTACT);\n  const [deleteAddressMutation] = useMutation(DELETE_ADDRESS);\n  const [deletePaymentCardMutation] = useMutation(DELETE_CARD);\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    Router.push('/medicine');\n    setLoading(false);\n  }; // Add or edit modal\n\n\n  const handleModal = (modalComponent, modalProps = {}, className = 'add-address-modal') => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  const handleEditDelete = async (item, type, name) => {\n    if (type === 'edit') {\n      const modalComponent = name === 'address' ? UpdateAddress : UpdateContact;\n      handleModal(modalComponent, item);\n    } else {\n      switch (name) {\n        case 'payment':\n          dispatch({\n            type: 'DELETE_CARD',\n            payload: item.id\n          });\n          return await deletePaymentCardMutation({\n            variables: {\n              cardId: JSON.stringify(item.id)\n            }\n          });\n\n        case 'contact':\n          dispatch({\n            type: 'DELETE_CONTACT',\n            payload: item.id\n          });\n          return await deleteContactMutation({\n            variables: {\n              contactId: JSON.stringify(item.id)\n            }\n          });\n\n        case 'address':\n          dispatch({\n            type: 'DELETE_ADDRESS',\n            payload: item.id\n          });\n          return await deleteAddressMutation({\n            variables: {\n              addressId: JSON.stringify(item.id)\n            }\n          });\n\n        default:\n          return false;\n      }\n    }\n  };\n\n  return __jsx(\"form\", null, __jsx(FormWrapper, null, __jsx(Container, null, __jsx(FormTitleWrapper, null, __jsx(FormTitle, null, __jsx(FormattedMessage, {\n    id: \"reqMedicine\",\n    defaultMessage: \"Request Medicine\"\n  }))), __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"noteHead\",\n    defaultMessage: \"Note\"\n  })), __jsx(NoteText, null, __jsx(FormattedMessage, {\n    id: \"noteDescription\",\n    defaultMessage: \"Product availability & price will confirm over phone. Delivery Charge inside the city ${inside} & outside the city ${outside}.\",\n    values: {\n      inside: 5,\n      outside: 10\n    }\n  })), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"rmMedicineName\"\n  })), __jsx(Input, {\n    type: \"text\",\n    label: \"Medicine Name\",\n    name: \"medicine-Name\",\n    placeholder: \"Enter medicine name\",\n    value: medicineNameOne,\n    onChange: e => setMedicineNameOne(e.target.value),\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\"\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"rmMedicineQuantity\"\n  })), __jsx(Input, {\n    type: \"text\",\n    label: \"Quantity\",\n    name: \"quantity\",\n    placeholder: \"Enter quantity\",\n    value: quantityOne,\n    onChange: e => setQuantityOne(e.target.value),\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\"\n  }))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"rmMedicineName\"\n  })), __jsx(Input, {\n    type: \"text\",\n    label: \"Medicine Name\",\n    name: \"medicine-Name\",\n    placeholder: \"Enter medicine name\",\n    value: medicineNameTwo,\n    onChange: e => setMedicineNameTwo(e.target.value),\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\"\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"rmMedicineQuantity\"\n  })), __jsx(Input, {\n    type: \"text\",\n    label: \"Quantity\",\n    name: \"quantity\",\n    placeholder: \"Enter quantity\",\n    value: quantityTwo,\n    onChange: e => setQuantityTwo(e.target.value),\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\"\n  }))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"rmPrescripttionUpload\",\n    defaultMessage: \"Upload your prescription\"\n  }))), __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(Uploader, {\n    onChange: \"\",\n    intlUploadText: \"rmUploadText\"\n  }))), __jsx(DeliveryAddress, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"checkoutDeliveryAddress\",\n    defaultMessage: \"Select Your Delivery Address\"\n  })), __jsx(ButtonGroup, null, __jsx(RadioGroup, {\n    items: address,\n    component: item => __jsx(RadioCard, {\n      id: item.id,\n      key: item.id,\n      title: item.name,\n      content: item.info,\n      name: \"address\",\n      checked: item.type === 'primary',\n      onChange: () => dispatch({\n        type: 'SET_PRIMARY_ADDRESS',\n        payload: item.id.toString()\n      }),\n      onEdit: () => handleEditDelete(item, 'edit', 'address'),\n      onDelete: () => handleEditDelete(item, 'delete', 'address')\n    }),\n    secondaryComponent: __jsx(Button, {\n      size: \"big\",\n      variant: \"outlined\",\n      type: \"button\",\n      className: \"add-button\",\n      onClick: () => handleModal(UpdateAddress, 'add-address-modal')\n    }, __jsx(FormattedMessage, {\n      id: \"addAddressBtn\",\n      defaultMessage: \"Add Adderss\"\n    }))\n  }))), __jsx(Contact, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"contactNumberText\",\n    defaultMessage: \"Select Your Contact Number\"\n  })), __jsx(ButtonGroup, null, __jsx(RadioGroup, {\n    items: contact,\n    component: item => __jsx(RadioCard, {\n      id: item.id,\n      key: item.id,\n      title: item.type,\n      content: item.number,\n      checked: item.type === 'primary',\n      onChange: () => dispatch({\n        type: 'SET_PRIMARY_CONTACT',\n        payload: item.id.toString()\n      }),\n      name: \"contact\",\n      onEdit: () => handleEditDelete(item, 'edit', 'contact'),\n      onDelete: () => handleEditDelete(item, 'delete', 'contact')\n    }),\n    secondaryComponent: __jsx(Button, {\n      size: \"big\",\n      variant: \"outlined\",\n      type: \"button\",\n      className: \"add-button\",\n      onClick: () => handleModal(UpdateContact, {}, 'add-contact-modal')\n    }, __jsx(FormattedMessage, {\n      id: \"addContactBtn\",\n      defaultMessage: \"Add Contact\"\n    }))\n  }))), __jsx(SubmitBtnWrapper, null, __jsx(Button, {\n    type: \"button\",\n    onClick: handleSubmit,\n    size: \"big\",\n    loading: loading,\n    style: {\n      width: '100%'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"submitRequest\",\n    defaultMessage: \"Submit Request\"\n  }))))));\n};\n\nexport default Checkout;","map":null,"metadata":{},"sourceType":"module"}