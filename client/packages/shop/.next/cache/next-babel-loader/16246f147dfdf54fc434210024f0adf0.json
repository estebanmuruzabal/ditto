{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ButtonsContainer, DayContainer, Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text, WeekContainer } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\nimport TimePicker from 'react-time-picker';\nimport { WeekDays } from 'utils/constant';\nimport { UPDATE_HUMIDITY_1_SETTINGS, UPDATE_HUMIDITY_2_SETTINGS, UPDATE_LIGHT_SETTINGS } from 'graphql/query/plants.query'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nvar FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required')\n  }),\n  handleSubmit: function handleSubmit(values) {// do submitting things\n  }\n});\n\nvar AddTimeSchedule = function AddTimeSchedule(props) {\n  var isValid = props.isValid,\n      item = props.item,\n      values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n  var addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      isSmartLightingOn = _useState2[0],\n      isSmartLighting = _useState2[1];\n\n  var _useState3 = useState('00:00'),\n      startTime = _useState3[0],\n      startTimeChange = _useState3[1];\n\n  var _useState4 = useState('23:59'),\n      endTime = _useState4[0],\n      endTimeChange = _useState4[1];\n\n  var _useState5 = useState([]),\n      daysSelected = _useState5[0],\n      setDaysSelected = _useState5[1];\n\n  var _useMutation = useMutation(UPDATE_LIGHT_SETTINGS),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateLightSettings = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_HUMIDITY_1_SETTINGS),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateHumiditySettings1 = _useMutation4[0];\n\n  var _useMutation5 = useMutation(UPDATE_HUMIDITY_2_SETTINGS),\n      _useMutation6 = _slicedToArray(_useMutation5, 1),\n      updateHumiditySettings2 = _useMutation6[0];\n\n  var intl = useIntl();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newSchedule;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              newSchedule = {\n                daysToRepeat: daysSelected,\n                startTime: startTime,\n                endTime: endTime,\n                enabled: true,\n                smartLight: isSmartLightingOn\n              };\n              setLoading(true); // if (isValid) {\n\n              _context.t0 = item.name;\n              _context.next = _context.t0 === 'add-light-schedule' ? 5 : _context.t0 === 'add-humidity-1-schedule' ? 11 : _context.t0 === 'add-humidity-2-schedule' ? 17 : 23;\n              break;\n\n            case 5:\n              item.plant.lightSettings.scheduledOnTimes = item.plant.lightSettings.scheduledOnTimes ? item.plant.lightSettings.scheduledOnTimes : [];\n              item.plant.lightSettings.scheduledOnTimes.push(newSchedule);\n              dispatch({\n                type: 'HANDLE_LIGHT_SETTINGS_CHANGE',\n                payload: {\n                  plant: item.plant,\n                  value: item.plant.lightSettings.scheduledOnTimes,\n                  field: 'scheduledOnTimes'\n                }\n              });\n              _context.next = 10;\n              return updateLightSettings({\n                variables: {\n                  id: item === null || item === void 0 ? void 0 : item.id,\n                  controllerId: item.plant.controllerId,\n                  input: item.plant.lightSettings\n                }\n              });\n\n            case 10:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 11:\n              item.plant.soilHumiditySettings1.scheduledOnTimes = item.plant.soilHumiditySettings1.scheduledOnTimes ? item.plant.soilHumiditySettings1.scheduledOnTimes : [];\n              item.plant.soilHumiditySettings1.scheduledOnTimes.push(newSchedule);\n              dispatch({\n                type: 'HANDLE_HUMIDITY_1_SETTINGS_CHANGE',\n                payload: {\n                  plant: item.plant,\n                  value: item.plant.soilHumiditySettings1.scheduledOnTimes,\n                  field: 'scheduledOnTimes'\n                }\n              });\n              _context.next = 16;\n              return updateHumiditySettings1({\n                variables: {\n                  id: item === null || item === void 0 ? void 0 : item.id,\n                  controllerId: item.plant.controllerId,\n                  input: item.plant.soilHumiditySettings1\n                }\n              });\n\n            case 16:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 17:\n              item.plant.soilHumiditySettings2.scheduledOnTimes = item.plant.soilHumiditySettings2.scheduledOnTimes ? item.plant.soilHumiditySettings2.scheduledOnTimes : [];\n              item.plant.soilHumiditySettings2.scheduledOnTimes.push(newSchedule);\n              dispatch({\n                type: 'HANDLE_HUMIDITY_2_SETTINGS_CHANGE',\n                payload: {\n                  plant: item.plant,\n                  value: item.plant.soilHumiditySettings2.scheduledOnTimes,\n                  field: 'scheduledOnTimes'\n                }\n              });\n              _context.next = 22;\n              return updateHumiditySettings2({\n                variables: {\n                  id: item === null || item === void 0 ? void 0 : item.id,\n                  controllerId: item.plant.controllerId,\n                  input: item.plant.soilHumiditySettings2\n                }\n              });\n\n            case 22:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 23:\n              return _context.abrupt(\"break\", 24);\n\n            case 24:\n              closeModal();\n              setLoading(false); // }\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleDaysAddition = function handleDaysAddition(day) {\n    var dayIndex = daysSelected.indexOf(day);\n    var newDaysSelectedArray = daysSelected;\n    dayIndex >= 0 ? newDaysSelectedArray.splice(dayIndex, 1) : newDaysSelectedArray.push(day);\n    setDaysSelected(newDaysSelectedArray);\n  }; // const weekDays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n  // const lightSchedule = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]],\n  //     startTime: '00:00',\n  //     endTime: '23:59',\n  //     enabled: true,\n  //     smartLight: false\n  // }\n  // const b = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]]\n  // }\n  // const onTimes = [a, b]\n  //set notification schedule\n  // [mon] tue wed thu ...\n  // 00:00 --- 07:15\n  // 15:15 ----- 23:59\n  // Add time Schedule (button)\n  // (when pressing the button you see this pop up)\n  // Add time Schedule\n  //start time: 00:00\n  //end time: 23:59\n  // repeat: (touch and you can see all days of the week to select/deselect) press ok, and original view is seeing the selected days\n  // also the smart option for when is no light and there should be light\n\n\n  return (// <Form style={{ height: '100px' }}>\n    __jsx(Form, null, __jsx(PlantsSensorContainer, null, __jsx(Heading, null, __jsx(Heading, null, intl.formatMessage({\n      id: 'addTimeScheduleId',\n      defaultMessage: 'addTimeScheduleId'\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"startTimeId\",\n      defaultMessage: \"startTimeId\"\n    }))), __jsx(ListDes, null, __jsx(TimePicker, {\n      onChange: function onChange(e) {\n        return startTimeChange(e);\n      },\n      value: startTime,\n      disableClock: true\n    }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n      bold: true\n    }, __jsx(FormattedMessage, {\n      id: \"endTimeId\",\n      defaultMessage: \"endTimeId\"\n    }))), __jsx(ListDes, null, __jsx(TimePicker, {\n      onChange: function onChange(e) {\n        return endTimeChange(e);\n      },\n      value: endTime,\n      disableClock: true\n    }))), __jsx(WeekContainer, null, Object.keys(WeekDays).map(function (day, i) {\n      return __jsx(DayContainer, {\n        key: i + '-day-container',\n        style: {\n          backgroundColor: daysSelected.indexOf(day) >= 0 ? '#b99c9c' : 'transparent'\n        },\n        onClick: function onClick() {\n          return handleDaysAddition(day);\n        }\n      }, day.substring(0, 3));\n    })), __jsx(ButtonsContainer, null, __jsx(Button, {\n      onClick: handleSubmit,\n      type: \"submit\" // style={{ width: '100%', height: '44px', marginTop: '200px' }}\n      ,\n      loader: __jsx(Loader, null),\n      isDisabled: loading,\n      isLoading: loading\n    }, __jsx(FormattedMessage, {\n      id: \"addTimeFrameId\",\n      defaultMessage: \"addTimeFrameId\"\n    })), __jsx(Button, {\n      onClick: function onClick() {\n        return closeModal();\n      },\n      style: {\n        marginLeft: '20px'\n      },\n      loader: __jsx(Loader, null),\n      isDisabled: loading,\n      isLoading: loading\n    }, __jsx(FormattedMessage, {\n      id: \"cancelTimeFrameId\",\n      defaultMessage: \"cancelTimeFrameId\"\n    })))))\n  );\n};\n\nexport default FormEnhancer(AddTimeSchedule);","map":null,"metadata":{},"sourceType":"module"}