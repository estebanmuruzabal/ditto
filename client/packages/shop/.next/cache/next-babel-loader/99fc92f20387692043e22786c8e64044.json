{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nconst Reading = ({\n  errorId,\n  plant,\n  settingType,\n  handleSettingsChange,\n  onDeleteSchedule,\n  data: data1,\n  openTab,\n  setOpenTab,\n  handleDeleteSensor\n}) => {\n  var _plant$sensors$sensor;\n\n  const setting = plant.sensors.find(sensor => sensor.settingType === settingType);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 5000\n  });\n  console.log('data?.getUser', data);\n  const sensorReadingName = (_plant$sensors$sensor = plant.sensors[sensorIndex].settingType) === null || _plant$sensors$sensor === void 0 ? void 0 : _plant$sensors$sensor.toLocaleLowerCase();\n  console.log('sensorReadingName::', sensorReadingName); // @ts-ignore\n\n  setting.reading = plant[sensorReadingName]; // const reading = (setting?.reading >= -5 && setting?.reading < 0) ? 0 + ' % ðŸ’§' : (setting?.reading >= 0 && setting?.reading <= 100 && setting?.reading) ? setting?.reading + ' % ðŸ’§' : 'Disconected';\n\n  return (// <Text bold>{reading} </Text>\n    __jsx(Text, {\n      bold: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"lala\")\n  );\n};\n\nexport default Reading;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","Reading","errorId","plant","settingType","handleSettingsChange","onDeleteSchedule","data","data1","openTab","setOpenTab","handleDeleteSensor","setting","sensors","find","sensor","loading","error","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","console","log","sensorReadingName","sensorIndex","toLocaleLowerCase","reading"],"mappings":";;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAcA,MAAMC,OAAwB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,WAAlB;AAA+BC,EAAAA,oBAA/B;AAAqDC,EAAAA,gBAArD;AAAuEC,EAAAA,IAAI,EAAEC,KAA7E;AAAoFC,EAAAA,OAApF;AAA6FC,EAAAA,UAA7F;AAAyGC,EAAAA;AAAzG,CAAD,KAAoI;AAAA;;AACjK,QAAMC,OAAO,GAAGT,KAAK,CAACU,OAAN,CAAcC,IAAd,CAAoBC,MAAD,IAAsBA,MAAM,CAACX,WAAP,KAAuBA,WAAhE,CAAhB;AAEA,QAAM;AAAEY,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBV,IAAAA;AAAlB,MAA2BR,QAAQ,CAACC,2BAAD,EAA8B;AACnEkB,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAAzC;AAOAC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bf,IAA7B;AAEA,QAAMgB,iBAAiB,4BAAGpB,KAAK,CAACU,OAAN,CAAcW,WAAd,EAA2BpB,WAA9B,0DAAG,sBAAwCqB,iBAAxC,EAA1B;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,iBAAnC,EAbiK,CAcjK;;AACAX,EAAAA,OAAO,CAACc,OAAR,GAAkBvB,KAAK,CAACoB,iBAAD,CAAvB,CAfiK,CAiBjK;;AACA,SACI;AACA,UAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAIH,CAtBD;;AAwBA,eAAetB,OAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  data?: any;\n  plant: any;\n  openTab: string;\n  errorId: string;\n  setOpenTab: (settingType: string) => void;\n  handleDeleteSensor: (plant: any, settingType: string) => void;\n  settingType: SensorsTypes;\n  handleSettingsChange: (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => void;\n  onDeleteSchedule: (plant: any, settingType: SensorsTypes, position: number) => void;\n}\n\nconst Reading: React.FC<Props> = ({ errorId, plant, settingType, handleSettingsChange, onDeleteSchedule, data: data1, openTab, setOpenTab, handleDeleteSensor  }) => {\n    const setting = plant.sensors.find((sensor: ISetting) => sensor.settingType === settingType);\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 5000,\n      });\n    \n\n    console.log('data?.getUser', data);\n\n    const sensorReadingName = plant.sensors[sensorIndex].settingType?.toLocaleLowerCase();\n    console.log('sensorReadingName::', sensorReadingName)\n    // @ts-ignore\n    setting.reading = plant[sensorReadingName];\n\n    // const reading = (setting?.reading >= -5 && setting?.reading < 0) ? 0 + ' % ðŸ’§' : (setting?.reading >= 0 && setting?.reading <= 100 && setting?.reading) ? setting?.reading + ' % ðŸ’§' : 'Disconected';\n    return (\n        // <Text bold>{reading} </Text>\n        <Text bold>lala</Text>\n    );\n};\n\nexport default Reading;\n"]},"metadata":{},"sourceType":"module"}