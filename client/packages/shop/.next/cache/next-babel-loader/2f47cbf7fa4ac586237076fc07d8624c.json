{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { ADD_ADDRESS, UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { DeliveryText, FieldWrapper, Heading, PickUpOptions } from './address-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { DELIVERY_METHOD } from 'graphql/query/delivery';\nimport { getCookie } from 'utils/session';\nimport { deliveryMethodCookieKeyName, plazaBelgranoPolygon, plazadoceDeOctubrePolygon, plazaEspañaPolygon, plazaNueveDeJulioPolygon } from 'utils/constant';\nimport Checkbox from 'components/checkbox/checkbox'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    const ID = props.item.id;\n    const addressItem = props.item.item;\n    return {\n      id: ID || null,\n      addressId: addressItem.id || null,\n      title: addressItem.title || '',\n      address: addressItem.address || '',\n      instructions: addressItem.instructions || '',\n      location: addressItem.location || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    title: Yup.string().required('Required!'),\n    address: Yup.string().required('Required'),\n    location: Yup.string().required('Required')\n  }),\n  handleSubmit: values => {// do submitting things\n  }\n});\n\nconst UpdateAddressTwo = props => {\n  var _deliverData$delivery;\n\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting\n  } = props;\n  const {\n    data: deliverData\n  } = useQuery(DELIVERY_METHOD);\n  const deliveryMethods = deliverData === null || deliverData === void 0 ? void 0 : (_deliverData$delivery = deliverData.deliveryMethods) === null || _deliverData$delivery === void 0 ? void 0 : _deliverData$delivery.items;\n  const [searchResult, setSearchResult] = React.useState([]);\n  const [deliveryAddress, setDeliveryAddress] = React.useState(\"\");\n  const [notInsideDeliveryAreas, setNotInsideDeliveryAreas] = React.useState(false);\n  useEffect(() => {\n    const savedDeliveryMethod = getCookie(deliveryMethodCookieKeyName);\n\n    if (savedDeliveryMethod) {\n      const deliveryMethodSaved = JSON.parse(savedDeliveryMethod);\n      console.log(deliveryMethodSaved);\n      setDeliveryAddress(deliveryMethodSaved === null || deliveryMethodSaved === void 0 ? void 0 : deliveryMethodSaved.deliveryAddress);\n    }\n  }, []);\n  const ID = item.id;\n  let newAddressid = null;\n  const addressItem = item.item;\n  const addressValue = {\n    id: ID,\n    addressId: addressItem.id,\n    title: values.title,\n    address: values.address,\n    location: values.location,\n    instructions: values.instructions,\n    is_primary: true\n  };\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const intl = useIntl();\n  const [updateAddressMutation] = useMutation(UPDATE_ADDRESS);\n  const [addAddressMutation] = useMutation(ADD_ADDRESS);\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      const {\n        id,\n        addressId,\n        title,\n        address,\n        location,\n        instructions\n      } = addressValue;\n\n      if (Object.keys(addressItem).length === 0) {\n        const {\n          data\n        } = await addAddressMutation({\n          variables: {\n            id,\n            title,\n            address,\n            location,\n            instructions\n          }\n        });\n        newAddressid = data.addDeliveryAddress.id;\n        addressValue.id = data.addDeliveryAddress.id;\n        dispatch({\n          type: 'ADD_ADDRESS',\n          payload: addressValue\n        });\n        closeModal();\n      } else {\n        const updateAddressData = await updateAddressMutation({\n          variables: {\n            id,\n            addressId,\n            title,\n            address,\n            location,\n            instructions\n          }\n        });\n        dispatch({\n          type: 'UPDATE_ADDRESS',\n          payload: {\n            value: addressValue,\n            id: addressItem.id\n          }\n        });\n        closeModal();\n      }\n    }\n  };\n\n  function inside(point, vs) {\n    var x = point[0],\n        y = point[1];\n    var inside = false;\n\n    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n      var xi = vs[i][0],\n          yi = vs[i][1];\n      var xj = vs[j][0],\n          yj = vs[j][1];\n      var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n      if (intersect) inside = !inside;\n    }\n\n    return inside;\n  }\n\n  ;\n\n  const handleSelect = async address => {\n    setDeliveryAddress(address);\n    const results = await geocodeByAddress(address);\n    const latLng = await getLatLng(results[0]);\n    setNotInsideDeliveryAreas(false);\n    let deliveryOptionsMethods = [];\n\n    if (inside([latLng.lat, latLng.lng], plazadoceDeOctubrePolygon)) {\n      deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(deliveryMethod => {\n        if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Lunes')) {\n          deliveryMethod.name = 'Delivery Gratis';\n          return true;\n        }\n\n        return !deliveryMethod.isPickUp;\n      });\n    } else if (inside([latLng.lat, latLng.lng], plazaBelgranoPolygon)) {\n      deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(deliveryMethod => {\n        if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Martes')) {\n          deliveryMethod.name = 'Delivery Gratis';\n          return true;\n        }\n\n        return !deliveryMethod.isPickUp;\n      });\n    } else if (inside([latLng.lat, latLng.lng], plazaNueveDeJulioPolygon)) {\n      deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(deliveryMethod => {\n        if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Miercoles')) {\n          deliveryMethod.name = 'Delivery Gratis';\n          return true;\n        }\n\n        return !deliveryMethod.isPickUp;\n      });\n    } else if (inside([latLng.lat, latLng.lng], plazaEspañaPolygon)) {\n      deliveryOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(deliveryMethod => {\n        if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Jueves')) {\n          deliveryMethod.name = 'Delivery Gratis';\n          return true;\n        }\n\n        return !deliveryMethod.isPickUp;\n      });\n    } else {\n      setNotInsideDeliveryAreas(true);\n      console.log(inside([latLng.lat, latLng.lng], plazaNueveDeJulioPolygon));\n    }\n\n    setSearchResult(deliveryOptionsMethods);\n  };\n\n  return __jsx(Form, null, __jsx(Heading, null, intl.formatMessage({\n    id: (addressItem === null || addressItem === void 0 ? void 0 : addressItem.id) ? 'editAddressId' : 'addNewAddressId',\n    defaultMessage: 'Address name'\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"title\",\n    type: \"text\",\n    width: \"100%\",\n    placeholder: intl.formatMessage({\n      id: 'addressRefId',\n      defaultMessage: 'Address name'\n    }),\n    error: touched.title && errors.title,\n    value: values.title,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(FieldWrapper, null, __jsx(PlacesAutocomplete, {\n    value: deliveryAddress && (deliveryAddress === null || deliveryAddress === void 0 ? void 0 : deliveryAddress.split(',')[0]),\n    onChange: e => setDeliveryAddress(e),\n    onSelect: handleSelect,\n    searchOptions: {\n      types: [],\n      componentRestrictions: {\n        country: \"ar\"\n      }\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => __jsx(\"div\", null, __jsx(\"input\", getInputProps({\n    placeholder: \"Calle, altura, localidad\",\n    className: \"location-search-input\",\n    style: {\n      width: '300px',\n      padding: '0px 8px',\n      appearance: 'none',\n      fontFamily: `'Lato', sans-serif`,\n      fontSize: '15',\n      lineHeight: 'inherit',\n      border: '1px solid',\n      borderColor: '#f7f7f7',\n      borderRadius: '6px',\n      backgroundColor: 'white',\n      color: '#0D1136',\n      height: '48px',\n      transition: 'all 0.25s ease',\n      // mb: 3,\n      '&:hover,&:focus': {\n        outline: 0,\n        borderColor: '#009e7f'\n      }\n    }\n  })), __jsx(\"div\", {\n    className: \"autocomplete-dropdown-container\"\n  }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map(suggestion => {\n    const style = suggestion.active ? {\n      backgroundColor: \"#fafafa\",\n      cursor: \"pointer\"\n    } : {\n      backgroundColor: \"#ffffff\",\n      cursor: \"pointer\"\n    };\n    return __jsx(\"div\", getSuggestionItemProps(suggestion, {\n      style\n    }), suggestion.description);\n  })))), (searchResult === null || searchResult === void 0 ? void 0 : searchResult.length) ? searchResult.map((deliveryMethod, i) => {\n    var _deliveryMethodSelect;\n\n    return __jsx(PickUpOptions, null, __jsx(Checkbox, {\n      keyName: `${i}-deliveryMethods`,\n      isChecked: ((_deliveryMethodSelect = deliveryMethodSelected) === null || _deliveryMethodSelect === void 0 ? void 0 : _deliveryMethodSelect.id) === deliveryMethod.id,\n      labelText: `${deliveryMethod.name} - ${deliveryMethod.details} `,\n      id: `deliveryMethod-${i}`,\n      onChange: e => {\n        var _deliveryMethodSelect2;\n\n        setDeliveryMethodAndSaveCookie(((_deliveryMethodSelect2 = deliveryMethodSelected) === null || _deliveryMethodSelect2 === void 0 ? void 0 : _deliveryMethodSelect2.id) === deliveryMethod.id ? null : deliveryMethod);\n      }\n    }));\n  }) : '', notInsideDeliveryAreas && __jsx(DeliveryText, null, intl.formatMessage({\n    id: 'noDeliveryThereYet',\n    defaultMessage: 'noDeliveryThereYet'\n  }))), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"location\",\n    type: \"text\",\n    placeholder: intl.formatMessage({\n      id: 'locationId',\n      defaultMessage: 'Localidad'\n    }),\n    width: \"100%\",\n    error: touched.location && errors.location,\n    value: deliveryAddress && deliveryAddress.split(',')[1],\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(FieldWrapper, null, __jsx(TextField, {\n    id: \"instructions\",\n    as: \"textarea\",\n    width: \"100%\",\n    placeholder: intl.formatMessage({\n      id: 'instructionsId',\n      defaultMessage: 'Delivery instructions'\n    }),\n    error: touched.instructions && errors.instructions,\n    value: values.instructions,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    style: {\n      width: '100%',\n      height: '44px'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedAddressId\",\n    defaultMessage: \"Save Address\"\n  })));\n};\n\nexport default FormEnhancer(UpdateAddressTwo);","map":null,"metadata":{},"sourceType":"module"}