{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/HumidityReading.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nvar HumidityReading = function HumidityReading(_ref) {\n  _s();\n\n  var plant = _ref.plant,\n      settingType = _ref.settingType;\n  var setting = plant.sensors.find(function (module) {\n    return module.settingType === settingType;\n  });\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var sensorIndex = Number(setting === null || setting === void 0 ? void 0 : setting.settingType[(setting === null || setting === void 0 ? void 0 : setting.settingType.length) - 1]); // const plantIndex = data?.getUser?.plants?.findIndex((p: any) => p.plantId === plant.plantId);            \n  // let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex - 1]?.reading;\n  // console.log('setting?.settingType', setting?.settingType)\n  // console.log('plantIndex', plantIndex)\n  // console.log('reading', reading)\n  // console.log('data', data)\n  // console.log('-----')\n  // if (reading > -5 && reading <= 0) reading = 0;\n  // if (reading >= 100 && reading < 110) reading = 100;\n  // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n\n  var readingFormatted = reading >= 0 && reading <= 110 ? \"\".concat(reading, \" % \\uD83D\\uDCA7\") : 'Disconected';\n  return __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, readingFormatted);\n};\n\n_s(HumidityReading, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = HumidityReading;\nexport default HumidityReading;\n\nvar _c;\n\n$RefreshReg$(_c, \"HumidityReading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/HumidityReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","HumidityReading","plant","settingType","setting","sensors","find","module","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","loading","error","data","sensorIndex","Number","length","readingFormatted","reading"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAOA,IAAMC,eAAgC,GAAG,SAAnCA,eAAmC,OAA6B;AAAA;;AAAA,MAA1BC,KAA0B,QAA1BA,KAA0B;AAAA,MAAnBC,WAAmB,QAAnBA,WAAmB;AAClE,MAAMC,OAAO,GAAGF,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmB,UAACC,MAAD;AAAA,WAAsBA,MAAM,CAACJ,WAAP,KAAuBA,WAA7C;AAAA,GAAnB,CAAhB;;AADkE,kBAGjCJ,QAAQ,CAACC,2BAAD,EAA8B;AACnEQ,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAHyB;AAAA,MAG1DC,OAH0D,aAG1DA,OAH0D;AAAA,MAGjDC,KAHiD,aAGjDA,KAHiD;AAAA,MAG1CC,IAH0C,aAG1CA,IAH0C;;AASlE,MAAMC,WAAW,GAAGC,MAAM,CAACX,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAED,WAAT,CAAqB,CAAAC,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAED,WAAT,CAAqBa,MAArB,IAA8B,CAAnD,CAAD,CAA1B,CATkE,CAWlE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,MAAMC,gBAAgB,GAAIC,OAAO,IAAI,CAAX,IAAgBA,OAAO,IAAI,GAA5B,aAAsCA,OAAtC,uBAAuD,aAAhF;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYD,gBAAZ,CADJ;AAGH,CA3BD;;GAAMhB,e;UAG+BF,Q;;;KAH/BE,e;AA6BN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  plant: any;\n  settingType: SensorsTypes;\n}\n\nconst HumidityReading: React.FC<Props> = ({ plant, settingType  }) => {\n    const setting = plant.sensors.find((module: ISetting) => module.settingType === settingType);\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 10000,\n      });\n    \n    const sensorIndex = Number(setting?.settingType[setting?.settingType.length - 1]);\n\n    // const plantIndex = data?.getUser?.plants?.findIndex((p: any) => p.plantId === plant.plantId);            \n    // let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex - 1]?.reading;\n    // console.log('setting?.settingType', setting?.settingType)\n    // console.log('plantIndex', plantIndex)\n    // console.log('reading', reading)\n    // console.log('data', data)\n    // console.log('-----')\n    // if (reading > -5 && reading <= 0) reading = 0;\n    // if (reading >= 100 && reading < 110) reading = 100;\n\n\n    // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n    const readingFormatted = (reading >= 0 && reading <= 110) ? `${reading} % ðŸ’§` : 'Disconected';  \n    return (\n        <Text bold>{readingFormatted}</Text>\n    );\n};\n\nexport default HumidityReading;\n"]},"metadata":{},"sourceType":"module"}