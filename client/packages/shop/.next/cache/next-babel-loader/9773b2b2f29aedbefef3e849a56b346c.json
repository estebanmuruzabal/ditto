{"ast":null,"code":"import moment from \"moment\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_LOGGED_IN_USER_SETTINGS } from \"graphql/query/customer.query\";\nexport const getSensorWithoutNumber = settingType => {\n  if (!isNaN(Number(settingType[settingType.length - 1]))) {\n    return settingType.substring(0, settingType.length - 2);\n  }\n\n  console.log('didnt work');\n};\nexport const getLastNumOfSensor = settingType => {\n  if (!isNaN(Number(settingType[settingType.length - 1]))) {\n    return Number(settingType.substring(settingType.length, settingType.length - 1));\n  }\n\n  console.log('didnt work 2');\n};\nexport const hasDittoBotUpdatedInLastMinute = (lastTimeStamp, timeZone) => {\n  var _data$getUser;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 1000\n  });\n  const plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.plants; // console.log('plantIndexssss', plantIndex)\n\n  const currentTimeMoment = moment(new Date().toLocaleString('en-US', {\n    timeZone\n  })); // console.log('currentTimeMoment', currentTimeMoment)\n\n  const lastTimeStampMoment = moment(new Date(lastTimeStamp)); // console.log('lastTimeStampMoment', lastTimeStampMoment)\n\n  const lastTimestampInMins = currentTimeMoment === null || currentTimeMoment === void 0 ? void 0 : currentTimeMoment.diff(lastTimeStampMoment, 'minutes'); // we are updating acutally every 5 seconds, but just in case we check if in the last minute there was any conection\n\n  return lastTimestampInMins < 1;\n};","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/utils/ditto-bot.ts"],"names":["moment","useQuery","GET_LOGGED_IN_USER_SETTINGS","getSensorWithoutNumber","settingType","isNaN","Number","length","substring","console","log","getLastNumOfSensor","hasDittoBotUpdatedInLastMinute","lastTimeStamp","timeZone","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","plantIndex","getUser","plants","currentTimeMoment","Date","toLocaleString","lastTimeStampMoment","lastTimestampInMins","diff"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AAEA,OAAO,MAAMC,sBAAsB,GAAIC,WAAD,IAAwC;AAC1E,MAAI,CAACC,KAAK,CAACC,MAAM,CAACF,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAZ,CAAP,CAAV,EAAyD;AACrD,WAAOH,WAAW,CAACI,SAAZ,CAAsB,CAAtB,EAAyBJ,WAAW,CAACG,MAAZ,GAAqB,CAA9C,CAAP;AACH;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,CALM;AAOP,OAAO,MAAMC,kBAAkB,GAAIP,WAAD,IAAwC;AACtE,MAAI,CAACC,KAAK,CAACC,MAAM,CAACF,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAZ,CAAP,CAAV,EAAyD;AACrD,WAAOD,MAAM,CAACF,WAAW,CAACI,SAAZ,CAAsBJ,WAAW,CAACG,MAAlC,EAA0CH,WAAW,CAACG,MAAZ,GAAqB,CAA/D,CAAD,CAAb;AACH;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,CALM;AAQP,OAAO,MAAME,8BAA8B,GAAG,CAACC,aAAD,EAAwBC,QAAxB,KAA6C;AAAA;;AACvF,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BhB,QAAQ,CAACC,2BAAD,EAA8B;AACnEgB,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAAzC;AAME,QAAMC,UAAU,GAAGJ,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEK,OAAT,kDAAG,cAAeC,MAAlC,CAPqF,CASvF;;AACA,QAAMC,iBAAiB,GAAGxB,MAAM,CAAC,IAAIyB,IAAJ,GAAWC,cAAX,CAA0B,OAA1B,EAAmC;AAAEZ,IAAAA;AAAF,GAAnC,CAAD,CAAhC,CAVuF,CAWvF;;AACA,QAAMa,mBAAmB,GAAG3B,MAAM,CAAC,IAAIyB,IAAJ,CAASZ,aAAT,CAAD,CAAlC,CAZuF,CAavF;;AACA,QAAMe,mBAAmB,GAAGJ,iBAAH,aAAGA,iBAAH,uBAAGA,iBAAiB,CAAEK,IAAnB,CAAwBF,mBAAxB,EAA6C,SAA7C,CAA5B,CAduF,CAgBvF;;AACA,SAAOC,mBAAmB,GAAG,CAA7B;AACH,CAlBM","sourcesContent":["import moment from \"moment\";\nimport { SensorsTypes } from \"./constant\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_LOGGED_IN_USER_SETTINGS } from \"graphql/query/customer.query\";\n\nexport const getSensorWithoutNumber = (settingType: SensorsTypes) : string => {\n    if (!isNaN(Number(settingType[settingType.length - 1]))) {\n        return settingType.substring(0, settingType.length - 2);\n    }\n    console.log('didnt work')\n};\n\nexport const getLastNumOfSensor = (settingType: SensorsTypes) : number => {\n    if (!isNaN(Number(settingType[settingType.length - 1]))) {\n        return Number(settingType.substring(settingType.length, settingType.length - 1));\n    }\n    console.log('didnt work 2')\n};\n\n\nexport const hasDittoBotUpdatedInLastMinute = (lastTimeStamp: string, timeZone: string) => {\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 1000,\n      });\n    \n      const plantIndex = data?.getUser?.plants;\n      \n    // console.log('plantIndexssss', plantIndex)\n    const currentTimeMoment = moment(new Date().toLocaleString('en-US', { timeZone }));\n    // console.log('currentTimeMoment', currentTimeMoment)\n    const lastTimeStampMoment = moment(new Date(lastTimeStamp));\n    // console.log('lastTimeStampMoment', lastTimeStampMoment)\n    const lastTimestampInMins = currentTimeMoment?.diff(lastTimeStampMoment, 'minutes');\n\n    // we are updating acutally every 5 seconds, but just in case we check if in the last minute there was any conection\n    return lastTimestampInMins < 1;\n}"]},"metadata":{},"sourceType":"module"}