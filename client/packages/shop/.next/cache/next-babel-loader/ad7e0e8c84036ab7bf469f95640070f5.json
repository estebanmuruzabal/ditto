{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport localForage from 'localforage';\n\nvar isObjectLiked = function isObjectLiked(value) {\n  return value.constructor.name === 'Array' || value.constructor.name === 'Object';\n};\n\nvar rehydrate = function rehydrate(value, defaultValue) {\n  if (!value) return defaultValue; // if (value === 'false') str = false;\n  // if (value === 'true') str = true;\n  // if (!isObjectLiked(value)) {\n  //   return value;\n  // }\n\n  try {\n    var parse = JSON.parse(value);\n    return parse;\n  } catch (err) {\n    return defaultValue;\n  }\n};\n\nvar hydrate = function hydrate(value) {\n  if (!isObjectLiked(value)) {\n    return value;\n  }\n\n  return JSON.stringify(value);\n};\n\nvar createMigration = function createMigration(opts, data) {\n  return new Promise(function (resolve, reject) {\n    var key = \"\".concat(opts.key, \"-version\");\n    localForage.getItem(key, function (err, version) {\n      if (version !== opts.version) {\n        data = opts.migrate(data);\n        localForage.setItem(opts.key, rehydrate(data), function (err) {\n          if (err) return reject(err);\n          localForage.setItem(key, opts.version, function (err) {\n            if (err) return reject(err);\n            return resolve(data);\n          });\n        });\n      } else {\n        resolve(data);\n      }\n    });\n  });\n};\n\nvar config = {\n  key: '@session',\n  version: 1,\n  migrate: function migrate(state) {\n    return _objectSpread({}, state);\n  }\n};\nexport var useStorage = function useStorage(state, setState) {\n  _s();\n\n  var _useState = useState(false),\n      rehydrated = _useState[0],\n      setRehydrated = _useState[1];\n\n  var _useState2 = useState(null),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  useEffect(function () {\n    function init() {\n      return _init.apply(this, arguments);\n    }\n\n    function _init() {\n      _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return localForage.getItem(config.key, function (err, value) {\n                  if (err) {\n                    setRehydrated(true);\n                    return setError(err);\n                  } // Migrate persisted data\n\n\n                  var restoredValue = rehydrate(value);\n\n                  if (typeof config.migrate === 'function') {\n                    createMigration(config, restoredValue).then(function (data) {\n                      return setState(data);\n                    }).then(function () {\n                      return setRehydrated(true);\n                    });\n                  } else {\n                    setState(restoredValue);\n                    setRehydrated(true);\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _init.apply(this, arguments);\n    }\n\n    init();\n  }, []);\n  useEffect(function () {\n    // if (isNil(state) || isEmpty(state)) {\n    //   localForage.removeItem(config.key);\n    // }\n    localForage.setItem(config.key, hydrate(state));\n  }, [state]);\n  return {\n    rehydrated: rehydrated,\n    error: error\n  };\n};\n\n_s(useStorage, \"9DNzL48X4yDoK1QiDj4VAlT7VRE=\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/utils/use-storage.ts"],"names":["useState","useEffect","localForage","isObjectLiked","value","constructor","name","rehydrate","defaultValue","parse","JSON","err","hydrate","stringify","createMigration","opts","data","Promise","resolve","reject","key","getItem","version","migrate","setItem","config","state","useStorage","setState","rehydrated","setRehydrated","error","setError","init","restoredValue","then"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport localForage from 'localforage';\nconst isObjectLiked = (value) =>\n  value.constructor.name === 'Array' || value.constructor.name === 'Object';\n\nconst rehydrate = (value: any, defaultValue?: any) => {\n  if (!value) return defaultValue;\n  // if (value === 'false') str = false;\n  // if (value === 'true') str = true;\n  // if (!isObjectLiked(value)) {\n  //   return value;\n  // }\n  try {\n    const parse = JSON.parse(value);\n    return parse;\n  } catch (err) {\n    return defaultValue;\n  }\n};\n\nconst hydrate = (value) => {\n  if (!isObjectLiked(value)) {\n    return value;\n  }\n  return JSON.stringify(value);\n};\nconst createMigration = (opts, data) => {\n  return new Promise((resolve, reject) => {\n    const key = `${opts.key}-version`;\n    localForage.getItem(key, (err, version) => {\n      if (version !== opts.version) {\n        data = opts.migrate(data);\n        localForage.setItem(opts.key, rehydrate(data), (err) => {\n          if (err) return reject(err);\n          localForage.setItem(key, opts.version, (err) => {\n            if (err) return reject(err);\n            return resolve(data);\n          });\n        });\n      } else {\n        resolve(data);\n      }\n    });\n  });\n};\n\nconst config = {\n  key: '@session',\n  version: 1,\n  migrate: (state) => {\n    return { ...state };\n  },\n};\n\nexport const useStorage = (state, setState) => {\n  const [rehydrated, setRehydrated] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function init() {\n      await localForage.getItem(config.key, (err, value) => {\n        if (err) {\n          setRehydrated(true);\n          return setError(err);\n        }\n        // Migrate persisted data\n        const restoredValue = rehydrate(value);\n        if (typeof config.migrate === 'function') {\n          createMigration(config, restoredValue)\n            .then((data) => setState(data))\n            .then(() => setRehydrated(true));\n        } else {\n          setState(restoredValue);\n          setRehydrated(true);\n        }\n      });\n    }\n    init();\n  }, []);\n\n  useEffect(() => {\n    // if (isNil(state) || isEmpty(state)) {\n    //   localForage.removeItem(config.key);\n    // }\n    localForage.setItem(config.key, hydrate(state));\n  }, [state]);\n\n  return {\n    rehydrated,\n    error,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}