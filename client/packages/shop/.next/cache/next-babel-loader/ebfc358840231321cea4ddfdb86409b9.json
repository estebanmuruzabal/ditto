{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/LastConectionReading.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport moment from 'moment';\n\nvar LastConectionReading = function LastConectionReading(_ref) {\n  _s();\n\n  var _data$getUser, _data$getUser$plants;\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data; // const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n\n\n  var lastTimeStamp = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.timestamp; // console.log('plantIndex', plantIndex)\n  // const sensorIndex = data?.getUser.plantsx[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n  // let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n  return __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, (lastTimeStamp === null || lastTimeStamp === void 0 ? void 0 : lastTimeStamp.length) > 0 ? moment(lastTimeStamp === null || lastTimeStamp === void 0 ? void 0 : lastTimeStamp.timestamp).format('hh:mm A - DD MMM') : '', \" \", hasDittoBotUpdatedInLastMinute(lastTimeStamp, plant.timeZone) ? '[ONLINE]' : '[OFFLINE]');\n};\n\n_s(LastConectionReading, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = LastConectionReading;\nexport default LastConectionReading;\n\nvar _c;\n\n$RefreshReg$(_c, \"LastConectionReading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/LastConectionReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","moment","LastConectionReading","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","loading","error","data","lastTimeStamp","getUser","plants","timestamp","length","format","hasDittoBotUpdatedInLastMinute","plant","timeZone"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,yBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAOA,IAAMC,oBAAqC,GAAG,SAAxCA,oBAAwC,OAAU;AAAA;;AAAA;;AAAA;;AAAA,kBAErBH,QAAQ,CAACC,2BAAD,EAA8B;AACrEG,IAAAA,2BAA2B,EAAE,IADwC;AAErEC,IAAAA,WAAW,EAAE,cAFwD;AAGrEC,IAAAA,YAAY,EAAE;AAHuD,GAA9B,CAFa;AAAA,MAE9CC,OAF8C,aAE9CA,OAF8C;AAAA,MAErCC,KAFqC,aAErCA,KAFqC;AAAA,MAE9BC,IAF8B,aAE9BA,IAF8B,EAStD;;;AACA,MAAMC,aAAa,GAAGD,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEE,OAAT,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,SAA7C,CAVsD,CAWtD;AACA;AACA;;AAEE,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO,CAAAH,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEI,MAAf,IAAwB,CAAxB,GAA4BZ,MAAM,CAACQ,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEG,SAAhB,CAAN,CAAiCE,MAAjC,CAAwC,kBAAxC,CAA5B,GAA0F,EAAjG,OAAsGC,8BAA8B,CAACN,aAAD,EAAgBO,KAAK,CAACC,QAAtB,CAA9B,GAAgE,UAAhE,GAA6E,WAAnL,CADF;AAGH,CAlBD;;GAAMf,oB;UAE6BH,Q;;;KAF7BG,oB;AAoBN,eAAeA,oBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nimport moment from 'moment';\n\ninterface Props {\n  module: any;\n  plantId: any;\n}\n\nconst LastConectionReading: React.FC<Props> = ({  }) => {\n\n  const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000,\n  });\n\n\n  // const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n  const lastTimeStamp = data?.getUser?.plants?.timestamp;\n  // console.log('plantIndex', plantIndex)\n  // const sensorIndex = data?.getUser.plantsx[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n  // let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n  \n    return (\n      <Text>{lastTimeStamp?.length > 0 ? moment(lastTimeStamp?.timestamp).format('hh:mm A - DD MMM') : ''} {hasDittoBotUpdatedInLastMinute(lastTimeStamp, plant.timeZone) ? '[ONLINE]' : '[OFFLINE]'}</Text>\n    );\n};\n\nexport default LastConectionReading;\n"]},"metadata":{},"sourceType":"module"}