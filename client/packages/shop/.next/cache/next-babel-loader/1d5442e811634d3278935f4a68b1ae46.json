{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/LastConectionReading.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nconst LastConectionReading = ({}) => {\n  var _data$getUser, _data$getUser2, _data$getUser2$plants;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000\n  }); // const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n\n  const plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.plants;\n  console.log('plantIndex', plantIndex); // const sensorIndex = data?.getUser.plantsx[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n  // let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n\n  return __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, (data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : (_data$getUser2$plants = _data$getUser2.plants.timestamp) === null || _data$getUser2$plants === void 0 ? void 0 : _data$getUser2$plants.length) > 0 ? moment(plant.timestamp).format('hh:mm A - DD MMM') : '', \" \", hasDittoBotUpdatedInLastMinute(plant.timestamp, plant.timeZone) ? '[ONLINE]' : '[OFFLINE]');\n};\n\nexport default LastConectionReading;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/LastConectionReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","LastConectionReading","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","plantIndex","getUser","plants","console","log","timestamp","length","moment","plant","format","hasDittoBotUpdatedInLastMinute","timeZone"],"mappings":";;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,yBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAOA,MAAMC,oBAAqC,GAAG,CAAC,EAAD,KAAU;AAAA;;AAEtD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,QAAQ,CAACC,2BAAD,EAA8B;AACrEK,IAAAA,2BAA2B,EAAE,IADwC;AAErEC,IAAAA,WAAW,EAAE,cAFwD;AAGrEC,IAAAA,YAAY,EAAE;AAHuD,GAA9B,CAAzC,CAFsD,CAStD;;AACA,QAAMC,UAAU,GAAGJ,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEK,OAAT,kDAAG,cAAeC,MAAlC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,UAA1B,EAXsD,CAYtD;AACA;;AAEE,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO,CAAAJ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,8BAAAA,IAAI,CAAEK,OAAN,2FAAeC,MAAf,CAAsBG,SAAtB,gFAAiCC,MAAjC,IAA0C,CAA1C,GAA8CC,MAAM,CAACC,KAAK,CAACH,SAAP,CAAN,CAAwBI,MAAxB,CAA+B,kBAA/B,CAA9C,GAAmG,EAA1G,OAA+GC,8BAA8B,CAACF,KAAK,CAACH,SAAP,EAAkBG,KAAK,CAACG,QAAxB,CAA9B,GAAkE,UAAlE,GAA+E,WAA9L,CADF;AAGH,CAlBD;;AAoBA,eAAelB,oBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  module: any;\n  plantId: any;\n}\n\nconst LastConectionReading: React.FC<Props> = ({  }) => {\n\n  const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000,\n  });\n\n\n  // const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n  const plantIndex = data?.getUser?.plants;\n  console.log('plantIndex', plantIndex)\n  // const sensorIndex = data?.getUser.plantsx[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n  // let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n  \n    return (\n      <Text>{data?.getUser?.plants.timestamp?.length > 0 ? moment(plant.timestamp).format('hh:mm A - DD MMM') : ''} {hasDittoBotUpdatedInLastMinute(plant.timestamp, plant.timeZone) ? '[ONLINE]' : '[OFFLINE]'}</Text>\n    );\n};\n\nexport default LastConectionReading;\n"]},"metadata":{},"sourceType":"module"}