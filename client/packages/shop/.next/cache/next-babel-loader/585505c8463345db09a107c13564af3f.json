{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/add-time-schedule/add-schedule-card.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\nimport TimePicker from 'react-time-picker'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required')\n  }),\n  handleSubmit: values => {// do submitting things\n  }\n});\n\nconst AddTimeSchedule = props => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: value,\n    1: onChange\n  } = useState('10:00');\n  const [addressMutation, {\n    data\n  }] = useMutation(UPDATE_ADDRESS);\n  const intl = useIntl();\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      const addressData = await addressMutation({\n        variables: {\n          addressInput: JSON.stringify(addressValue)\n        }\n      });\n      setLoading(true);\n      dispatch({\n        type: 'ADD_OR_UPDATE_ADDRESS',\n        payload: addressValue\n      });\n      closeModal();\n      setLoading(false);\n    }\n  }; // const onOpeningsChange = (e: any) => {\n  //   setOpenings(e);\n  //   console.log('openings::::::', e)\n  // };\n  // const weekDays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n  // const lightSchedule = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]],\n  //     startTime: '00:00',\n  //     endTime: '23:59',\n  //     enabled: true,\n  //     smartLight: false\n  // }\n  // const b = {\n  //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]]\n  // }\n  // const onTimes = [a, b]\n  //set notification schedule\n  // [mon] tue wed thu ...\n  // 00:00 --- 07:15\n  // 15:15 ----- 23:59\n  // Add time Schedule (button)\n  // (when pressing the button you see this pop up)\n  // Add time Schedule\n  //start time: 00:00\n  //end time: 23:59\n  // repeat: (touch and you can see all days of the week to select/deselect) press ok, and original view is seeing the selected days\n  // also the smart option for when is no light and there should be light\n\n\n  return __jsx(Form, {\n    style: {\n      height: '300px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, intl.formatMessage({\n    id: 'addTimeScheduleId',\n    defaultMessage: 'addTimeScheduleId'\n  }))), __jsx(PlantsSensorContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantName\",\n    defaultMessage: \"plantName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }))), __jsx(TimePicker, {\n    onChange: onChange,\n    value: value // className={{ height: '' }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    style: {\n      width: '100%',\n      height: '44px',\n      marginTop: '200px'\n    },\n    loader: __jsx(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }),\n    isDisabled: loading,\n    isLoading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedAddressId\",\n    defaultMessage: \"Save Address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default FormEnhancer(AddTimeSchedule);","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/components/add-time-schedule/add-schedule-card.tsx"],"names":["React","useContext","useState","Yup","withFormik","Form","closeModal","Button","useMutation","UPDATE_ADDRESS","Heading","ListDes","ListItem","ListTitle","PlantsSensorContainer","Text","ProfileContext","FormattedMessage","useIntl","Loader","TimePicker","FormEnhancer","mapPropsToValues","props","id","item","name","info","validationSchema","object","shape","string","required","handleSubmit","values","AddTimeSchedule","isValid","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","addressValue","type","state","dispatch","loading","setLoading","value","onChange","addressMutation","data","intl","addressData","variables","addressInput","JSON","stringify","payload","height","formatMessage","defaultMessage","width","marginTop"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\n\nimport TimePicker from 'react-time-picker'\n\n\n// Shape of form values\ninterface FormValues {\n  id?: number | null;\n  name?: string;\n  info?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n}\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik<MyFormProps, FormValues>({\n  \n  // Transform outer props into form values\n  mapPropsToValues: (props) => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || '',\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required'),\n  }),\n  handleSubmit: (values) => {\n    // do submitting things\n  },\n});\n\nconst AddTimeSchedule = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n\n    handleReset,\n    isSubmitting,\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info,\n  };\n  const { state, dispatch } = useContext(ProfileContext);\n  const [loading, setLoading] = useState(false);\n  const [value, onChange] = useState('10:00');\n  const [addressMutation, { data }] = useMutation(UPDATE_ADDRESS);\n  const intl = useIntl();\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      const addressData = await addressMutation({\n        variables: { addressInput: JSON.stringify(addressValue) },\n      });\n      \n      setLoading(true);\n      dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: addressValue });\n      closeModal();\n      setLoading(false);\n    }\n  };\n\n  // const onOpeningsChange = (e: any) => {\n  //   setOpenings(e);\n  //   console.log('openings::::::', e)\n  // };\n\n    // const weekDays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n\n    // const lightSchedule = {\n    //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]],\n    //     startTime: '00:00',\n    //     endTime: '23:59',\n    //     enabled: true,\n    //     smartLight: false\n    // }\n\n    // const b = {\n    //     daysToRepeat: [weekDays[0], weekDays[2], weekDays[3]]\n    // }\n    // const onTimes = [a, b]\n\n\n    //set notification schedule\n    // [mon] tue wed thu ...\n    // 00:00 --- 07:15\n    // 15:15 ----- 23:59\n    // Add time Schedule (button)\n\n    // (when pressing the button you see this pop up)\n    // Add time Schedule\n    //start time: 00:00\n    //end time: 23:59\n\n    // repeat: (touch and you can see all days of the week to select/deselect) press ok, and original view is seeing the selected days\n\n\n    // also the smart option for when is no light and there should be light\n  return (\n    <Form style={{ height: '300px' }}>\n      <Heading>{<Heading>{intl.formatMessage({ id: 'addTimeScheduleId', defaultMessage: 'addTimeScheduleId' })}</Heading>}</Heading>\n      \n      <PlantsSensorContainer>\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id=\"plantName\"\n                defaultMessage=\"plantName\"\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n           \n          </ListDes>\n        </ListItem>\n      </PlantsSensorContainer>\n\n      <TimePicker\n        onChange={onChange}\n        value={value}\n        // className={{ height: '' }}\n      />\n      \n      <Button\n        onClick={handleSubmit}\n        type=\"submit\"\n        style={{ width: '100%', height: '44px', marginTop: '200px' }}\n        loader={<Loader />}\n        isDisabled={loading}\n        isLoading={loading}\n      >\n        <FormattedMessage id=\"savedAddressId\" defaultMessage=\"Save Address\" />\n      </Button>\n    </Form>\n  );\n};\n\nexport default FormEnhancer(AddTimeSchedule);\n"]},"metadata":{},"sourceType":"module"}