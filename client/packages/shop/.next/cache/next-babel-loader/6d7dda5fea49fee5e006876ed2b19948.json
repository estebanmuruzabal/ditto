{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const useWindowSize = () => {\n  const isClient = false && window.document && window.document.createElement;\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n};","map":{"version":3,"sources":["/Users/virginiamuruzabal/work/ditto/client/packages/shop/src/utils/useWindowSize.ts"],"names":["useState","useEffect","useWindowSize","isClient","window","document","createElement","getSize","width","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAMC,QAAQ,GACZ,SACAC,MAAM,CAACC,QADP,IAEAD,MAAM,CAACC,QAAP,CAAgBC,aAHlB;;AAKA,WAASC,OAAT,GAAmB;AACjB,WAAO;AACLC,MAAAA,KAAK,EAAEL,QAAQ,GAAGC,MAAM,CAACK,UAAV,GAAuBC,SADjC;AAELC,MAAAA,MAAM,EAAER,QAAQ,GAAGC,MAAM,CAACQ,WAAV,GAAwBF;AAFnC,KAAP;AAID;;AAED,QAAM;AAAA,OAACG,UAAD;AAAA,OAAaC;AAAb,MAA8Bd,QAAQ,CAACO,OAAD,CAA5C;AAEAN,EAAAA,SAAS,CAAC,MAAW;AACnB,QAAI,CAACE,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,aAASY,YAAT,GAAwB;AACtBD,MAAAA,aAAa,CAACP,OAAO,EAAR,CAAb;AACD;;AAEDH,IAAAA,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMX,MAAM,CAACa,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GAXQ,EAWN,EAXM,CAAT,CAfiC,CA0BzB;;AAER,SAAOF,UAAP;AACD,CA7BM","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useWindowSize = () => {\n  const isClient =\n    typeof window !== 'undefined' &&\n    window.document &&\n    window.document.createElement;\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined,\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect((): any => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n};\n"]},"metadata":{},"sourceType":"module"}