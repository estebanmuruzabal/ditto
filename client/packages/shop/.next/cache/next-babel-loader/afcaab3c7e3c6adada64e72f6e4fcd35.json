{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/virginiamuruzabal/work/ditto/client/packages/shop/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* import { useEffect } from 'react';\nimport Head from 'next/head';\nimport Router from 'next/router';\n\n// the redirect will only happen on the client-side. This is by design,\nconst IndexPage: React.FC<{}> = () => {\n  useEffect(() => {\n    Router.replace('/[type]', '/grocery');\n  });\n  return (\n    <Head>\n      <meta name=\"robots\" content=\"noindex, nofollow\" />\n    </Head>\n  );\n};\n\nexport default IndexPage;\n\n\n */\nimport { useEffect } from 'react';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { useIntl } from 'react-intl'; // the redirect will only happen on the client-side. This is by design,\n\nvar IndexPage = function IndexPage() {\n  _s();\n\n  var selectedMenu = null;\n  var defaultMenu = null;\n  var intl = useIntl();\n\n  var _useQuery = useQuery(GET_TYPE, {\n    variables: {\n      searchText: ''\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: intl.formatMessage({\n        id: 'loading',\n        defaultMessage: 'Cargando...'\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: 'Error occured for only domain routing',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n  var typeMenu = data.types.items.map(function (item) {\n    return {\n      id: item.id,\n      href: \"/\".concat(item.slug)\n    };\n  }); // if error here, is because you have to add at least one type from admin\n\n  defaultMenu = typeMenu[0].href;\n\n  if (localStorage.getItem('myMenu')) {\n    selectedMenu = JSON.parse(localStorage.getItem('myMenu'));\n    selectedMenu = selectedMenu.href;\n  }\n\n  try {\n    useEffect(function () {\n      Router.replace('/[type]', selectedMenu !== null ? selectedMenu : defaultMenu);\n    });\n  } catch (exceptionVar) {\n    console.log('catch', exceptionVar);\n  } finally {\n    // BUGGG\n    Router.replace('/home');\n  }\n\n  return __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, __jsx(\"meta\", {\n    name: \"robots\",\n    content: \"noindex, nofollow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(IndexPage, \"YpJIkrAEdrqybUV5GFbaLxDI3iU=\", false, function () {\n  return [useIntl, useQuery];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/Users/virginiamuruzabal/work/ditto/client/packages/shop/src/pages/index.tsx"],"names":["useEffect","Head","Router","useQuery","GET_TYPE","ErrorMessage","useIntl","IndexPage","selectedMenu","defaultMenu","intl","variables","searchText","data","error","loading","formatMessage","id","defaultMessage","typeMenu","types","items","map","item","href","slug","localStorage","getItem","JSON","parse","replace","exceptionVar","console","log"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,SAASC,OAAT,QAAwB,YAAxB,C,CAEA;;AACA,IAAMC,SAAuB,GAAG,SAA1BA,SAA0B,GAAM;AAAA;;AACpC,MAAIC,YAAY,GAAG,IAAnB;AACA,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAMC,IAAI,GAAGJ,OAAO,EAApB;;AAHoC,kBAIHH,QAAQ,CACvCC,QADuC,EAEvC;AACEO,IAAAA,SAAS,EAAE;AACTC,MAAAA,UAAU,EAAE;AADH;AADb,GAFuC,CAJL;AAAA,MAI5BC,IAJ4B,aAI5BA,IAJ4B;AAAA,MAItBC,KAJsB,aAItBA,KAJsB;AAAA,MAIfC,OAJe,aAIfA,OAJe;;AAYpC,MAAIA,OAAJ,EAAa;AACX,WAAO,MAAC,YAAD;AAAc,MAAA,OAAO,EAAEL,IAAI,CAACM,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE,SAAN;AAAiBC,QAAAA,cAAc,EAAE;AAAjC,OAAnB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAAA;;AAED,MAAIJ,KAAJ,EAAW;AACT,WACE,MAAC,YAAD;AAAc,MAAA,OAAO,EAAE,uCAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAAA;AAED,MAAMK,QAAQ,GAAGN,IAAI,CAACO,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqB,UAACC,IAAD,EAAU;AAC9C,WAAO;AACLN,MAAAA,EAAE,EAAEM,IAAI,CAACN,EADJ;AAELO,MAAAA,IAAI,aAAMD,IAAI,CAACE,IAAX;AAFC,KAAP;AAID,GALgB,CAAjB,CAtBoC,CA4BpC;;AACAhB,EAAAA,WAAW,GAAGU,QAAQ,CAAC,CAAD,CAAR,CAAYK,IAA1B;;AACA,MAAGE,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAH,EAAkC;AAChCnB,IAAAA,YAAY,GAAGoB,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CAAf;AACAnB,IAAAA,YAAY,GAAGA,YAAY,CAACgB,IAA5B;AACD;;AAED,MAAI;AACFxB,IAAAA,SAAS,CAAC,YAAM;AACdE,MAAAA,MAAM,CAAC4B,OAAP,CAAe,SAAf,EAA0BtB,YAAY,KAAK,IAAjB,GAAwBA,YAAxB,GAAuCC,WAAjE;AACD,KAFQ,CAAT;AAGD,GAJD,CAIE,OAAOsB,YAAP,EAAqB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,YAArB;AACD,GAND,SAMU;AACR;AACA7B,IAAAA,MAAM,CAAC4B,OAAP,CAAe,OAAf;AACD;;AAED,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,IAAI,EAAC,QAAX;AAAoB,IAAA,OAAO,EAAC,mBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAnDD;;GAAMvB,S;UAGSD,O,EACoBH,Q;;;KAJ7BI,S;AAqDN,eAAeA,SAAf","sourcesContent":["/* import { useEffect } from 'react';\nimport Head from 'next/head';\nimport Router from 'next/router';\n\n// the redirect will only happen on the client-side. This is by design,\nconst IndexPage: React.FC<{}> = () => {\n  useEffect(() => {\n    Router.replace('/[type]', '/grocery');\n  });\n  return (\n    <Head>\n      <meta name=\"robots\" content=\"noindex, nofollow\" />\n    </Head>\n  );\n};\n\nexport default IndexPage;\n\n\n */\nimport { useEffect } from 'react';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { useIntl } from 'react-intl';\n\n// the redirect will only happen on the client-side. This is by design,\nconst IndexPage: React.FC<{}> = () => {\n  let selectedMenu = null;\n  let defaultMenu = null;\n  const intl = useIntl();\n  const { data, error, loading } = useQuery(\n    GET_TYPE,\n    {\n      variables: {\n        searchText: ''\n      }\n    }\n  );\n  if (loading) {\n    return <ErrorMessage message={intl.formatMessage({ id: 'loading', defaultMessage: 'Cargando...' })} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={'Error occured for only domain routing'} />\n    );\n  };\n\n  const typeMenu = data.types.items.map((item) => {\n    return({\n      id: item.id,\n      href: `/${item.slug}`\n    })\n  })\n  // if error here, is because you have to add at least one type from admin\n  defaultMenu = typeMenu[0].href;\n  if(localStorage.getItem('myMenu')){\n    selectedMenu = JSON.parse(localStorage.getItem('myMenu'));\n    selectedMenu = selectedMenu.href;\n  }\n\n  try {\n    useEffect(() => {\n      Router.replace('/[type]', selectedMenu !== null ? selectedMenu : defaultMenu);\n    });\n  } catch (exceptionVar) {\n    console.log('catch', exceptionVar)\n  } finally {\n    // BUGGG\n    Router.replace('/home');\n  }\n\n  return (\n    <Head>\n      <meta name=\"robots\" content=\"noindex, nofollow\" />\n    </Head>\n  );\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}