{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { openModal } from '@redq/reuse-modal';\nimport Router from 'next/router';\nimport { FormattedMessage } from 'react-intl';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Drawer from 'components/drawer/drawer';\nimport { Button } from 'components/button/button';\nimport NavLink from 'components/nav-link/nav-link';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport AuthenticationForm from 'features/authentication-form';\nimport { HamburgerIcon, DrawerContentWrapper, DrawerClose, DrawerProfile, LogoutView, LoginView, UserAvatar, UserDetails, DrawerMenu, DrawerMenuItem, UserOptionMenu } from './header.style';\nimport UserImage from 'assets/images/user.jpg';\nimport { AUTHORIZED_MENU_ITEMS, MOBILE_DRAWER_MENU } from 'site-settings/site-navigation';\nimport { useAppState, useAppDispatch } from 'contexts/app/app.provider';\nimport { ProfileContext } from 'contexts/profile/profile.context';\n\nconst MobileDrawer = () => {\n  const isDrawerOpen = useAppState('isDrawerOpen');\n  const dispatch = useAppDispatch();\n  const {\n    authState: {\n      isAuthenticated\n    },\n    authDispatch\n  } = useContext(AuthContext);\n  const {\n    state\n  } = useContext(ProfileContext);\n  console.log(state);\n\n  if (state) {\n    const {\n      name,\n      phone\n    } = state;\n  } // Toggle drawer\n\n\n  const toggleHandler = React.useCallback(() => {\n    dispatch({\n      type: 'TOGGLE_DRAWER'\n    });\n  }, [dispatch]);\n\n  const handleLogout = () => {\n    if (false) {\n      localStorage.removeItem('access_token');\n      authDispatch({\n        type: 'SIGN_OUT'\n      });\n      Router.push('/');\n    }\n  };\n\n  const signInOutForm = () => {\n    dispatch({\n      type: 'TOGGLE_DRAWER'\n    });\n    authDispatch({\n      type: 'SIGNIN'\n    });\n    openModal({\n      show: true,\n      overlayClassName: 'quick-view-overlay',\n      closeOnClickOutside: true,\n      component: AuthenticationForm,\n      closeComponent: '',\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'quick-view-modal',\n        width: 458,\n        height: 'auto'\n      }\n    });\n  };\n\n  return __jsx(Drawer, {\n    width: \"316px\",\n    drawerHandler: __jsx(HamburgerIcon, null, __jsx(\"span\", null), __jsx(\"span\", null), __jsx(\"span\", null)),\n    open: isDrawerOpen,\n    toggleHandler: toggleHandler,\n    closeButton: __jsx(DrawerClose, null, __jsx(CloseIcon, null))\n  }, __jsx(Scrollbars, {\n    autoHide: true\n  }, __jsx(DrawerContentWrapper, null, __jsx(DrawerProfile, null, isAuthenticated ? __jsx(LoginView, null, __jsx(UserAvatar, null, __jsx(\"img\", {\n    src: UserImage,\n    alt: \"user_avatar\"\n  })), __jsx(UserDetails, null)) : __jsx(LogoutView, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: signInOutForm\n  }, __jsx(FormattedMessage, {\n    id: \"mobileSignInButtonText\",\n    defaultMessage: \"join\"\n  })))), __jsx(DrawerMenu, null, isAuthenticated && AUTHORIZED_MENU_ITEMS.map((item, idx) => __jsx(DrawerMenuItem, {\n    key: item.id\n  }, __jsx(NavLink, {\n    onClick: toggleHandler,\n    href: item.href,\n    label: item.defaultMessage,\n    intlId: item.id,\n    className: \"drawer_menu_item\"\n  }))), MOBILE_DRAWER_MENU.map(item => __jsx(DrawerMenuItem, {\n    key: item.id\n  }, __jsx(NavLink, {\n    onClick: toggleHandler,\n    href: item.href,\n    label: item.defaultMessage,\n    intlId: item.id,\n    className: \"drawer_menu_item\"\n  })))), isAuthenticated && __jsx(UserOptionMenu, null, __jsx(DrawerMenuItem, null, __jsx(\"div\", {\n    onClick: handleLogout,\n    className: \"drawer_menu_item\"\n  }, __jsx(\"span\", {\n    className: \"logoutBtn\"\n  }, __jsx(FormattedMessage, {\n    id: \"navlinkLogout\",\n    defaultMessage: \"Logout\"\n  }))))))));\n};\n\nexport default MobileDrawer;","map":null,"metadata":{},"sourceType":"module"}