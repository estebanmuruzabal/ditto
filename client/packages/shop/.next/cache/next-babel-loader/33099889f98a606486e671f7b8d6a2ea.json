{"ast":null,"code":"import moment from \"moment\";\nexport var getSensorWithoutNumber = function getSensorWithoutNumber(settingType) {\n  if (!isNaN(Number(settingType[settingType.length - 1]))) {\n    return settingType.substring(0, settingType.length - 2);\n  }\n\n  console.log('didnt work');\n};\nexport var getLastNumOfSensor = function getLastNumOfSensor(settingType) {\n  if (!isNaN(Number(settingType[settingType.length - 1]))) {\n    return Number(settingType.substring(settingType.length, settingType.length - 1));\n  }\n\n  console.log('didnt work 2');\n};\nexport var logTimeStampWithTimeFilter = function logTimeStampWithTimeFilter(timestamp, reading) {\n  var _setting, _setting$logs, _setting4;\n\n  if (((_setting = setting) === null || _setting === void 0 ? void 0 : (_setting$logs = _setting.logs) === null || _setting$logs === void 0 ? void 0 : _setting$logs.length) > 0) {\n    var _setting2, _setting2$logs, _setting3, _setting3$logs;\n\n    var currentTimeMoment = moment(new Date().toLocaleString('en-US', {\n      timeZone: 'America/Argentina/Buenos_Aires'\n    }));\n    var lastTimeStamp = (_setting2 = setting) === null || _setting2 === void 0 ? void 0 : (_setting2$logs = _setting2.logs[((_setting3 = setting) === null || _setting3 === void 0 ? void 0 : (_setting3$logs = _setting3.logs) === null || _setting3$logs === void 0 ? void 0 : _setting3$logs.length) - 1]) === null || _setting2$logs === void 0 ? void 0 : _setting2$logs.timestamp;\n    var lastTimeStampMoment = moment(new Date(lastTimeStamp));\n    var lastTimestampInMins = currentTimeMoment === null || currentTimeMoment === void 0 ? void 0 : currentTimeMoment.diff(lastTimeStampMoment, 'minutes'); // if it hasnt pass more than 30 mins, we dont log anything basically\n\n    if (lastTimestampInMins < 30) return setting;\n  }\n\n  (_setting4 = setting) === null || _setting4 === void 0 ? void 0 : _setting4.logs.push({\n    reading: reading,\n    timestamp: new Date().toLocaleString('en-US', {\n      timeZone: 'America/Argentina/Buenos_Aires'\n    })\n  });\n  return setting;\n};","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/utils/ditto-bot.ts"],"names":["moment","getSensorWithoutNumber","settingType","isNaN","Number","length","substring","console","log","getLastNumOfSensor","logTimeStampWithTimeFilter","timestamp","reading","setting","logs","currentTimeMoment","Date","toLocaleString","timeZone","lastTimeStamp","lastTimeStampMoment","lastTimestampInMins","diff","push"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAGA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,WAAD,EAAwC;AAC1E,MAAI,CAACC,KAAK,CAACC,MAAM,CAACF,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAZ,CAAP,CAAV,EAAyD;AACrD,WAAOH,WAAW,CAACI,SAAZ,CAAsB,CAAtB,EAAyBJ,WAAW,CAACG,MAAZ,GAAqB,CAA9C,CAAP;AACH;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,CALM;AAOP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACP,WAAD,EAAwC;AACtE,MAAI,CAACC,KAAK,CAACC,MAAM,CAACF,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAZ,CAAP,CAAV,EAAyD;AACrD,WAAOD,MAAM,CAACF,WAAW,CAACI,SAAZ,CAAsBJ,WAAW,CAACG,MAAlC,EAA0CH,WAAW,CAACG,MAAZ,GAAqB,CAA/D,CAAD,CAAb;AACH;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,CALM;AAQP,OAAO,IAAME,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,SAAD,EAA4BC,OAA5B,EAAgD;AAAA;;AACtF,MAAI,aAAAC,OAAO,UAAP,6DAASC,IAAT,gEAAeT,MAAf,IAAwB,CAA5B,EAA+B;AAAA;;AAC3B,QAAMU,iBAAiB,GAAGf,MAAM,CAAC,IAAIgB,IAAJ,GAAWC,cAAX,CAA0B,OAA1B,EAAmC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAnC,CAAD,CAAhC;AACA,QAAMC,aAAa,gBAAGN,OAAH,gEAAG,UAASC,IAAT,CAAc,cAAAD,OAAO,UAAP,gEAASC,IAAT,kEAAeT,MAAf,IAAwB,CAAtC,CAAH,mDAAG,eAA0CM,SAAhE;AACA,QAAMS,mBAAmB,GAAGpB,MAAM,CAAC,IAAIgB,IAAJ,CAASG,aAAT,CAAD,CAAlC;AACA,QAAME,mBAAmB,GAAGN,iBAAH,aAAGA,iBAAH,uBAAGA,iBAAiB,CAAEO,IAAnB,CAAwBF,mBAAxB,EAA6C,SAA7C,CAA5B,CAJ2B,CAM3B;;AACA,QAAIC,mBAAmB,GAAG,EAA1B,EAA8B,OAAOR,OAAP;AACjC;;AAED,eAAAA,OAAO,UAAP,8CAASC,IAAT,CAAcS,IAAd,CAAmB;AAAEX,IAAAA,OAAO,EAAPA,OAAF;AAAWD,IAAAA,SAAS,EAAE,IAAIK,IAAJ,GAAWC,cAAX,CAA0B,OAA1B,EAAmC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAnC;AAAtB,GAAnB;AAEA,SAAOL,OAAP;AACH,CAdM","sourcesContent":["import moment from \"moment\";\nimport { SensorsTypes } from \"./constant\";\n\nexport const getSensorWithoutNumber = (settingType: SensorsTypes) : string => {\n    if (!isNaN(Number(settingType[settingType.length - 1]))) {\n        return settingType.substring(0, settingType.length - 2);\n    }\n    console.log('didnt work')\n};\n\nexport const getLastNumOfSensor = (settingType: SensorsTypes) : number => {\n    if (!isNaN(Number(settingType[settingType.length - 1]))) {\n        return Number(settingType.substring(settingType.length, settingType.length - 1));\n    }\n    console.log('didnt work 2')\n};\n\n\nexport const logTimeStampWithTimeFilter = (timestamp: ISensorSetting, reading: number) => {\n    if (setting?.logs?.length > 0) {\n        const currentTimeMoment = moment(new Date().toLocaleString('en-US', { timeZone: 'America/Argentina/Buenos_Aires' }));\n        const lastTimeStamp = setting?.logs[setting?.logs?.length - 1]?.timestamp;\n        const lastTimeStampMoment = moment(new Date(lastTimeStamp));\n        const lastTimestampInMins = currentTimeMoment?.diff(lastTimeStampMoment, 'minutes');\n\n        // if it hasnt pass more than 30 mins, we dont log anything basically\n        if (lastTimestampInMins < 30) return setting;\n    }\n\n    setting?.logs.push({ reading, timestamp: new Date().toLocaleString('en-US', { timeZone: 'America/Argentina/Buenos_Aires' }) });\n\n    return setting;\n}"]},"metadata":{},"sourceType":"module"}