{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport dynamic from 'next/dynamic';\nimport { Button } from 'components/button/button';\nimport { ProductDetailsWrapper, ProductPreview, ProductInfo, ProductTitlePriceWrapper, ProductTitle, BackButton, ProductDescription, ButtonText, ProductMeta, ProductCartWrapper, ProductPriceWrapper, PriceContainerRow, PriceContainer, ProductPrice, SalePrice, ProductCartBtn, MetaSingle, MetaItem, RelatedItems } from './product-details-one.style';\nimport { LongArrowLeft } from 'assets/icons/LongArrowLeft';\nimport ReadMore from 'components/truncate/truncate';\nimport CarouselWithCustomDots from 'components/multi-carousel/multi-carouselV2';\nimport Products from 'components/product-grid/product-list/product-list';\nimport { CURRENCY } from 'utils/constant';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { useCart } from 'contexts/cart/use-cart';\nimport { Counter } from 'components/counter/counter';\nimport { ProductQuantityExceededMsg } from 'components/product-card/product-card.style';\nimport { HOME_PAGE } from 'site-settings/site-navigation';\nconst CartPopUp = dynamic(() => import('features/carts/cart-popup-two'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('features/carts/cart-popup-two')],\n    modules: ['features/carts/cart-popup-two']\n  }\n});\n\nconst ProductDetails = ({\n  product,\n  deviceType\n}) => {\n  var _getItem5, _getItem6, _Router$router, _product$description, _product$categories;\n\n  const {\n    isRtl\n  } = useLocale();\n  const {\n    addItem,\n    removeItem,\n    removeRecicledItemHandler,\n    addRecicledItemHandler,\n    isInCart,\n    getItem\n  } = useCart();\n  const {\n    0: showProductQuantityExceededMsg,\n    1: setShowProductQuantityExceededMsg\n  } = useState(false);\n  const data = product;\n  const intl = useIntl();\n\n  const handleAddClick = e => {\n    var _getItem, _getItem2;\n\n    const currentQuantity = (((_getItem = getItem(data.id)) === null || _getItem === void 0 ? void 0 : _getItem.quantity) || 0) + (((_getItem2 = getItem(data.id)) === null || _getItem2 === void 0 ? void 0 : _getItem2.recicledQuantity) || 0);\n    const stock = data.product_quantity;\n\n    if (stock <= currentQuantity) {\n      e.stopPropagation();\n      showProductQuantityExceededMsgFor5Sec();\n    } else {\n      e.stopPropagation();\n      addItem(data);\n    }\n  };\n\n  const handleRecicledAddClick = e => {\n    var _getItem3, _getItem4;\n\n    const currentQuantity = (((_getItem3 = getItem(data.id)) === null || _getItem3 === void 0 ? void 0 : _getItem3.quantity) || 0) + (((_getItem4 = getItem(data.id)) === null || _getItem4 === void 0 ? void 0 : _getItem4.recicledQuantity) || 0);\n    const stock = data.product_quantity;\n\n    if (stock <= currentQuantity) {\n      e.stopPropagation();\n      showProductQuantityExceededMsgFor5Sec();\n    } else {\n      e.stopPropagation();\n      addRecicledItemHandler(data);\n    }\n  };\n\n  const showProductQuantityExceededMsgFor5Sec = () => {\n    setShowProductQuantityExceededMsg(true);\n    setTimeout(() => {\n      setShowProductQuantityExceededMsg(false);\n    }, 1500);\n  };\n\n  const checkoutStatus = React.useRef(null);\n\n  const handleRemoveClick = e => {\n    e.stopPropagation();\n    removeItem(data);\n  };\n\n  const handleRecicledRemoveClick = e => {\n    e.stopPropagation();\n    removeRecicledItemHandler(data);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      window.scrollTo(0, 0);\n    }, 500);\n  }, []);\n  const finalPrice = product.sale_price ? product.sale_price : product.price;\n  const noRecicledQuantityInCart = (_getItem5 = getItem(data.id)) === null || _getItem5 === void 0 ? void 0 : _getItem5.quantity;\n  const reclicledQuantityInCart = (_getItem6 = getItem(data.id)) === null || _getItem6 === void 0 ? void 0 : _getItem6.recicledQuantity;\n  const hasEcoButton = data.packagePrice > 0;\n\n  const PriceContent = () => __jsx(React.Fragment, null, data.product_quantity != 0 ? __jsx(ProductCartWrapper, null, __jsx(ProductCartBtn, {\n    style: {\n      display: 'flex'\n    }\n  }, __jsx(PriceContainer, null, __jsx(PriceContainerRow, null, __jsx(ProductPriceWrapper, null, data.discountInPercent ? __jsx(SalePrice, null, CURRENCY, \" \", data.sale_price) : null, __jsx(ProductPrice, null, CURRENCY, finalPrice)), noRecicledQuantityInCart ? __jsx(React.Fragment, null, __jsx(Counter, {\n    value: getItem(data.id).quantity,\n    onDecrement: handleRemoveClick,\n    onIncrement: handleAddClick\n  })) : __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: handleAddClick\n  }, __jsx(ButtonText, null, __jsx(FormattedMessage, {\n    id: \"addCartButton\",\n    defaultMessage: \"Cart\"\n  })))), hasEcoButton ? __jsx(PriceContainerRow, null, __jsx(ProductPriceWrapper, null, __jsx(ProductPrice, null, \" \", CURRENCY, \" \", Number(finalPrice - data.packagePrice))), reclicledQuantityInCart ? __jsx(React.Fragment, null, __jsx(Counter, {\n    value: reclicledQuantityInCart,\n    onDecrement: handleRecicledRemoveClick,\n    onIncrement: handleRecicledAddClick\n  })) : __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: handleRecicledAddClick\n  }, __jsx(ButtonText, null, __jsx(FormattedMessage, {\n    id: \"addEcoToCartButton\",\n    defaultMessage: \"Cart\"\n  })))) : null)), noRecicledQuantityInCart || reclicledQuantityInCart ? __jsx(CartPopUp, {\n    showBuyNowBtn: true,\n    deviceType: deviceType\n  }) : null) : __jsx(ProductCartWrapper, null, __jsx(\"p\", {\n    style: {\n      color: '#ff5e5e',\n      fontWeight: 'bold'\n    }\n  }, intl.formatMessage({\n    id: 'outOfStock',\n    defaultMessage: 'Out of stock'\n  }))), showProductQuantityExceededMsg && __jsx(ProductQuantityExceededMsg, {\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"productStockLimit\",\n    defaultMessage: \"There is no more availability of this product\"\n  })), hasEcoButton && data.product_quantity != 0 && __jsx(\"span\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      margin: '0px 10px'\n    }\n  }, \"*\", __jsx(\"p\", {\n    className: \"eco-detail\"\n  }, __jsx(FormattedMessage, {\n    id: \"ecoDescription\",\n    defaultMessage: \"Eco purchase: you pay ${packageDiscount} if you have a package from us to returned.\",\n    values: {\n      packageDiscount: data.packagePrice\n    }\n  }))));\n\n  const hasBackRoute = Object.keys((_Router$router = Router.router) === null || _Router$router === void 0 ? void 0 : _Router$router.sdc).length !== 0;\n  console.log(hasBackRoute);\n  return __jsx(React.Fragment, null, __jsx(ProductDetailsWrapper, {\n    className: \"product-card\",\n    dir: \"ltr\"\n  }, !isRtl && __jsx(ProductPreview, null, __jsx(BackButton, null, __jsx(Button, {\n    type: \"button\",\n    size: \"small\",\n    style: {\n      backgroundColor: '#ffffff',\n      border: '1px solid #f1f1f1',\n      color: '#77798c'\n    },\n    onClick: () => hasBackRoute ? Router.back() : Router.push(HOME_PAGE)\n  }, __jsx(\"span\", {\n    style: {\n      marginRight: \"5px\"\n    }\n  }, __jsx(LongArrowLeft, null)), __jsx(FormattedMessage, {\n    id: \"backBtn\",\n    defaultMessage: \"Back\"\n  }))), __jsx(CarouselWithCustomDots, {\n    items: product.images,\n    deviceType: deviceType\n  })), __jsx(ProductInfo, {\n    dir: isRtl ? 'rtl' : 'ltr'\n  }, __jsx(ProductTitlePriceWrapper, null, __jsx(ProductTitle, null, product.name), __jsx(PriceContent, null)), __jsx(ProductDescription, null, ((_product$description = product.description) === null || _product$description === void 0 ? void 0 : _product$description.includes('<p')) ? __jsx(\"div\", {\n    className: \"html-content\",\n    dangerouslySetInnerHTML: {\n      __html: product.description\n    }\n  }) : __jsx(ReadMore, {\n    character: 600\n  }, product.description)), __jsx(ProductMeta, null, __jsx(MetaSingle, null, product === null || product === void 0 ? void 0 : (_product$categories = product.categories) === null || _product$categories === void 0 ? void 0 : _product$categories.map(item => __jsx(Link, {\n    href: `/${product.type.slug.toLowerCase()}?category=${item.slug}`,\n    key: `link-${item.id}`\n  }, __jsx(\"a\", null, __jsx(MetaItem, null, item.name))))))), isRtl && __jsx(ProductPreview, null, __jsx(BackButton, null, __jsx(Button, {\n    title: \"Back\",\n    intlButtonId: \"backBtn\",\n    iconPosition: \"left\",\n    size: \"small\",\n    style: {\n      backgroundColor: '#ffffff',\n      border: '1px solid #f1f1f1',\n      color: '#77798c'\n    },\n    icon: __jsx(LongArrowLeft, null),\n    onClick: Router.back\n  })), __jsx(CarouselWithCustomDots, {\n    items: product.images,\n    deviceType: deviceType\n  }))), __jsx(RelatedItems, null, __jsx(\"h2\", null, __jsx(FormattedMessage, {\n    id: \"intlReletedItems\",\n    defaultMessage: \"Related Items\"\n  })), __jsx(Products\n  /* type={product.type.toLowerCase()} */\n  , {\n    deviceType: deviceType,\n    loadMore: false,\n    fetchLimit: 10\n  })));\n};\n\nexport default ProductDetails;","map":null,"metadata":{},"sourceType":"module"}