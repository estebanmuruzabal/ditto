{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/contexts/language/language.provider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'assets/styles/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL, isLocale } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nvar LanguageContext = React.createContext({});\nexport var LanguageProvider = function LanguageProvider(_ref) {\n  _s();\n\n  var children = _ref.children,\n      messages = _ref.messages;\n\n  var _React$useState = React.useState('es'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      locale = _React$useState2[0],\n      setLocale = _React$useState2[1];\n\n  var changeLanguage = function changeLanguage(newLocale) {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n\n  React.useEffect(function () {\n    var localSetting = Cookie.get('locale');\n\n    if (localSetting && isLocale(localSetting)) {\n      document.documentElement.lang = localSetting;\n      setLocale(localSetting);\n    }\n  }, [locale]);\n  var isRtl = isRTL(locale);\n  return __jsx(LanguageContext.Provider, {\n    value: {\n      locale: locale,\n      changeLanguage: changeLanguage,\n      isRtl: isRtl\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(IntlProvider, {\n    locale: locale,\n    messages: messages[locale],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(InjectRTL, {\n    lang: locale,\n    dir: isRtl ? 'rtl' : 'ltr',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(StyleSheetManager, {\n    stylisPlugins: [],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, children))));\n};\n\n_s(LanguageProvider, \"CfVeNuNL7EVqRCKEr79e0QneSWA=\");\n\n_c = LanguageProvider;\nexport var useLocale = function useLocale() {\n  _s2();\n\n  return React.useContext(LanguageContext);\n};\n\n_s2(useLocale, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/contexts/language/language.provider.tsx"],"names":["React","IntlProvider","InjectRTL","Cookie","isRTL","isLocale","StyleSheetManager","LanguageContext","createContext","LanguageProvider","children","messages","useState","locale","setLocale","changeLanguage","newLocale","document","documentElement","lang","set","useEffect","localSetting","get","isRtl","useLocale","useContext"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AAGA,IAAMC,eAAe,GAAGP,KAAK,CAACQ,aAAN,CAAoB,EAApB,CAAxB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAA4B;AAAA;;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,wBAC9BX,KAAK,CAACY,QAAN,CAAe,IAAf,CAD8B;AAAA;AAAA,MACnDC,MADmD;AAAA,MAC3CC,SAD2C;;AAE1D,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAqB;AAC1CF,IAAAA,SAAS,CAACE,SAAD,CAAT;AACAC,IAAAA,QAAQ,CAACC,eAAT,CAAyBC,IAAzB,GAAgCH,SAAhC;AACAb,IAAAA,MAAM,CAACiB,GAAP,CAAW,QAAX,EAAqBJ,SAArB;AACD,GAJD;;AAKAhB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,YAAM;AACpB,QAAMC,YAAY,GAAGnB,MAAM,CAACoB,GAAP,CAAW,QAAX,CAArB;;AACA,QAAID,YAAY,IAAIjB,QAAQ,CAACiB,YAAD,CAA5B,EAA4C;AAC1CL,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,IAAzB,GAAgCG,YAAhC;AACAR,MAAAA,SAAS,CAACQ,YAAD,CAAT;AACD;AACF,GAND,EAMG,CAACT,MAAD,CANH;AAOA,MAAIW,KAAK,GAAGpB,KAAK,CAACS,MAAD,CAAjB;AAEA,SACE,MAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAM,EAANA,MAAF;AAAUE,MAAAA,cAAc,EAAdA,cAAV;AAA0BS,MAAAA,KAAK,EAALA;AAA1B,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEX,MAAtB;AAA8B,IAAA,QAAQ,EAAEF,QAAQ,CAACE,MAAD,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,IAAI,EAAEA,MAAjB;AAAyB,IAAA,GAAG,EAAEW,KAAK,GAAG,KAAH,GAAW,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAmB,IAAA,aAAa,EAAE,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,QADH,CADF,CADF,CADF,CADF;AAWD,CA3BM;;GAAMD,gB;;KAAAA,gB;AA6Bb,OAAO,IAAMgB,SAAS,GAAG,SAAZA,SAAY;AAAA;;AAAA,SAAMzB,KAAK,CAAC0B,UAAN,CAAiBnB,eAAjB,CAAN;AAAA,CAAlB;;IAAMkB,S","sourcesContent":["import React from 'react';\n\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'assets/styles/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL, isLocale } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nimport RTLPlugin from 'stylis-plugin-rtl';\n\nconst LanguageContext = React.createContext({} as any);\n\nexport const LanguageProvider = ({ children, messages }) => {\n  const [locale, setLocale] = React.useState('es');\n  const changeLanguage = (newLocale): void => {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n  React.useEffect(() => {\n    const localSetting = Cookie.get('locale');\n    if (localSetting && isLocale(localSetting)) {\n      document.documentElement.lang = localSetting;\n      setLocale(localSetting);\n    }\n  }, [locale]);\n  let isRtl = isRTL(locale);\n\n  return (\n    <LanguageContext.Provider value={{ locale, changeLanguage, isRtl }}>\n      <IntlProvider locale={locale} messages={messages[locale]}>\n        <InjectRTL lang={locale} dir={isRtl ? 'rtl' : 'ltr'}>\n          <StyleSheetManager stylisPlugins={[]}>\n            {children}\n          </StyleSheetManager>\n        </InjectRTL>\n      </IntlProvider>\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLocale = () => React.useContext(LanguageContext);\n"]},"metadata":{},"sourceType":"module"}