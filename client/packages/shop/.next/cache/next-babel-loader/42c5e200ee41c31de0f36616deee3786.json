{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { DeliveryMethodsConstants, plazaBelgranoPolygon, plazaEspañaPolygon, plazaNueveDeJulioPolygon, plazadoceDeOctubrePolygon, resistenciaZipCode } from 'utils/constant';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { ActionButton, ActionsButtons, BannerIcon, Button, ButtonGroup, CardWrapper, Container, DeliveryMethods, DeliveryText, Heading, Input, Options, Wrapper } from './delivery-selection.style';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport DeliveryIcon from 'assets/images/locationIcon.webp';\nimport { Plus } from 'assets/icons/PlusMinus';\nimport RadioCardTWO from 'components/radio-card/radio-card-two';\nimport RadioGroupThree from 'components/radio-group/radio-group-three';\nimport { IconWrapper } from '../checkout-two/checkout-two.style';\n\nvar DeliverySelection = function DeliverySelection(_ref) {\n  var _props$userSavedAddre, _props$submitResult2, _props$submitResult2$;\n\n  var props = _extends({}, _ref);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      zipCode = _React$useState2[0],\n      setZipCode = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchResult = _React$useState4[0],\n      setSearchResult = _React$useState4[1];\n\n  var _useState = useState(\"\"),\n      deliveryAddressAutocomplete = _useState[0],\n      setDeliveryAddressAutocomplete = _useState[1];\n\n  var _useState2 = useState(true),\n      insideDeliveryArea = _useState2[0],\n      setInsideDeliveryArea = _useState2[1]; // const setDeliveryMethod =  (deliveryOrPickupMethodSelected) => {\n  //   const deliveryMethod = isPickUpSelected ? deliveryOrPickupMethodSelected : {...deliveryOrPickupMethodSelected, deliveryAddressAutocomplete};\n  //   setDeliveryMethodSelected(deliveryMethod)\n  //   props.setDeliveryAddress(deliveryMethod, false)\n  //   // setCookie(deliveryMethodCookieKeyName, deliveryMethod);\n  //   // }\n  // };\n\n\n  function inside(point, vs) {\n    var x = point[0],\n        y = point[1];\n    var inside = false;\n\n    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n      var xi = vs[i][0],\n          yi = vs[i][1];\n      var xj = vs[j][0],\n          yj = vs[j][1];\n      var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n      if (intersect) inside = !inside;\n    }\n\n    return inside;\n  }\n\n  ;\n\n  var searchPickupZipCode = function searchPickupZipCode(e) {\n    var _props$deliveryMethod;\n\n    var zipCode = e.target.value;\n    handleOnFocus(e);\n    setZipCode(zipCode);\n    var pickUpOptionsMethods = (_props$deliveryMethod = props.deliveryMethods) === null || _props$deliveryMethod === void 0 ? void 0 : _props$deliveryMethod.filter(function (deliveryMethod) {\n      return deliveryMethod.isPickUp === true;\n    }); // const methodFound = pickUpOptionsMethods.filter(method => method.details.includes(zipCode)\n\n    var methodsFound = zipCode === resistenciaZipCode ? pickUpOptionsMethods : []; // e.stopPropagation();\n\n    props.setDeliveryMethodsSelected(methodsFound.length > 0 ? methodsFound : null);\n  };\n\n  var setDelivery = function setDelivery(e, deli) {\n    e === null || e === void 0 ? void 0 : e.stopPropagation();\n    props.setDeliveryMethodType(deli);\n    props.setDeliveryMethodsSelected(null);\n    setZipCode('');\n  };\n\n  var deleteDeliveryAddress = function deleteDeliveryAddress() {\n    setDeliveryAddressAutocomplete('');\n    setInsideDeliveryArea(true);\n    setZipCode('');\n  };\n\n  var deleteDeliverySelection = function deleteDeliverySelection() {\n    props.setDeliveryMethodsSelected(null);\n    props.setDeliveryAddress(null, true);\n    setDeliveryAddressAutocomplete('');\n    setInsideDeliveryArea(true);\n    props.setDeliveryMethodType(null);\n    setZipCode('');\n  };\n\n  var handleOnFocus = function handleOnFocus(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }; // deliveryMethodSelected\n\n\n  var isPickUpSelected = props.deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP;\n  var isDeliverySelected = props.deliveryMethodTypeSelected === DeliveryMethodsConstants.DELIVERY;\n  var intl = useIntl();\n\n  var handleSelect = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address, addressAlreadyAdded) {\n      var results, latLng, deliveryOptionsMethods, insideDeliveryArea, _props$deliveryMethod2, _props$deliveryMethod3, _props$deliveryMethod4, _props$deliveryMethod5, _results$;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return geocodeByAddress(address);\n\n            case 2:\n              results = _context.sent;\n              console.log('results', results);\n              _context.next = 6;\n              return getLatLng(results[0]);\n\n            case 6:\n              latLng = _context.sent;\n              deliveryOptionsMethods = [];\n              insideDeliveryArea = false;\n\n              if (inside([latLng.lat, latLng.lng], plazadoceDeOctubrePolygon)) {\n                console.log('inside plazadoceDeOctubrePolygon');\n                insideDeliveryArea = true;\n                deliveryOptionsMethods = (_props$deliveryMethod2 = props.deliveryMethods) === null || _props$deliveryMethod2 === void 0 ? void 0 : _props$deliveryMethod2.filter(function (deliveryMethod) {\n                  if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Lunes')) {\n                    deliveryMethod.name = 'GRATIS';\n                    return true;\n                  }\n\n                  return !deliveryMethod.isPickUp;\n                });\n              } else if (inside([latLng.lat, latLng.lng], plazaBelgranoPolygon)) {\n                console.log('inside plazaBelgranoPolygon');\n                insideDeliveryArea = true;\n                deliveryOptionsMethods = (_props$deliveryMethod3 = props.deliveryMethods) === null || _props$deliveryMethod3 === void 0 ? void 0 : _props$deliveryMethod3.filter(function (deliveryMethod) {\n                  if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Martes')) {\n                    deliveryMethod.name = 'GRATIS';\n                    return true;\n                  }\n\n                  return !deliveryMethod.isPickUp;\n                });\n              } else if (inside([latLng.lat, latLng.lng], plazaNueveDeJulioPolygon)) {\n                console.log('inside plazaNueveDeJulioPolygon');\n                insideDeliveryArea = true;\n                deliveryOptionsMethods = (_props$deliveryMethod4 = props.deliveryMethods) === null || _props$deliveryMethod4 === void 0 ? void 0 : _props$deliveryMethod4.filter(function (deliveryMethod) {\n                  if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Miercoles')) {\n                    deliveryMethod.name = 'GRATIS';\n                    return true;\n                  }\n\n                  return !deliveryMethod.isPickUp;\n                });\n              } else if (inside([latLng.lat, latLng.lng], plazaEspañaPolygon)) {\n                insideDeliveryArea = true;\n                console.log('inside plazaEspañaPolygon');\n                deliveryOptionsMethods = (_props$deliveryMethod5 = props.deliveryMethods) === null || _props$deliveryMethod5 === void 0 ? void 0 : _props$deliveryMethod5.filter(function (deliveryMethod) {\n                  if (!deliveryMethod.isPickUp && deliveryMethod.details.includes('Jueves')) {\n                    deliveryMethod.name = 'GRATIS';\n                    return true;\n                  }\n\n                  return !deliveryMethod.isPickUp;\n                });\n              }\n\n              if (insideDeliveryArea) {\n                console.log('sad');\n                setInsideDeliveryArea(true);\n                props.setDeliveryMethodsSelected(deliveryOptionsMethods);\n                props.setDeliveryAddress((_results$ = results[0]) === null || _results$ === void 0 ? void 0 : _results$.formatted_address, addressAlreadyAdded);\n              } else {\n                setInsideDeliveryArea(false);\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSelect(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(DeliveryMethods, null, __jsx(Options, {\n    style: {\n      justifyContent: !props.deliveryMethodsSelected ? 'space-between' : 'space-between'\n    }\n  }, __jsx(CardWrapper, {\n    color: isPickUpSelected ? '#009E7F' : '#e4f4fc',\n    onClick: function onClick(e) {\n      return setDelivery(e, DeliveryMethodsConstants.PICKUP);\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"pickUpId\",\n    defaultMessage: \"notFoundId\"\n  })), __jsx(CardWrapper, {\n    color: isDeliverySelected ? '#009E7F' : '#e4f4fc',\n    onClick: function onClick(e) {\n      return setDelivery(e, DeliveryMethodsConstants.DELIVERY);\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"deliveryId\",\n    defaultMessage: \"notFoundId2\"\n  })))), !!(props === null || props === void 0 ? void 0 : (_props$userSavedAddre = props.userSavedAddresses) === null || _props$userSavedAddre === void 0 ? void 0 : _props$userSavedAddre.length) && (props === null || props === void 0 ? void 0 : props.deliveryMethodTypeSelected) === DeliveryMethodsConstants.DELIVERY && __jsx(ButtonGroup, null, __jsx(RadioGroupThree, {\n    items: props.userSavedAddresses,\n    component: function component(item, index) {\n      var _props$submitResult, _props$submitResult$d;\n\n      return __jsx(RadioCardTWO, {\n        id: \"\".concat(index, \"-addresses\"),\n        key: index,\n        address: item.address,\n        location: item.location,\n        instructions: item.instructions,\n        title: item.title,\n        name: \"address\",\n        isChecked: (_props$submitResult = props.submitResult) === null || _props$submitResult === void 0 ? void 0 : (_props$submitResult$d = _props$submitResult.delivery_address) === null || _props$submitResult$d === void 0 ? void 0 : _props$submitResult$d.includes(item.address),\n        onChange: function onChange() {\n          return props.handlePrimary(item, 'address');\n        },\n        onClick: function onClick() {\n          var _item$address, _item$address2;\n\n          handleSelect(\"\".concat((_item$address = item.address) === null || _item$address === void 0 ? void 0 : _item$address.split(\",\")[0], \" \").concat((_item$address2 = item.address) === null || _item$address2 === void 0 ? void 0 : _item$address2.split(\",\")[1], \", \").concat(item.location, \", \").concat(item.instructions), true);\n        },\n        hasEdit: false // onEdit={() => props.handleEditDelete(item, index, 'edit', 'address')}\n        ,\n        onDelete: function onDelete() {\n          return props.handleEditDelete(item, index, 'delete', 'address');\n        }\n      });\n    },\n    secondaryComponent: !((_props$submitResult2 = props.submitResult) === null || _props$submitResult2 === void 0 ? void 0 : (_props$submitResult2$ = _props$submitResult2.delivery_address) === null || _props$submitResult2$ === void 0 ? void 0 : _props$submitResult2$.length) ? null : __jsx(Button, {\n      className: \"addButton\",\n      variant: \"text\",\n      type: \"button\",\n      onClick: function onClick() {\n        return deleteDeliverySelection();\n      }\n    }, __jsx(IconWrapper, null, __jsx(Plus, {\n      width: \"10px\"\n    })), __jsx(FormattedMessage, {\n      id: \"changeAddress\",\n      defaultMessage: \"Add New\"\n    }))\n  })), __jsx(Wrapper, null, !!props.deliveryMethodTypeSelected && __jsx(Container, null, !props.deliveryMethodsSelected && __jsx(React.Fragment, null, __jsx(Heading, {\n    onClick: function onClick(e) {\n      return handleOnFocus(e);\n    }\n  }, isPickUpSelected ? __jsx(FormattedMessage, {\n    id: \"pickupModalheading\",\n    defaultMessage: \"pickupModalheading\"\n  }) : __jsx(FormattedMessage, {\n    id: \"deliveryModalheading\",\n    defaultMessage: \"deliveryModalheading\"\n  })), isPickUpSelected ? __jsx(\"div\", {\n    onClick: function onClick(e) {\n      return handleOnFocus(e);\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    onFocus: function onFocus(e) {\n      return handleOnFocus(e);\n    } // placeholder='Código postal'\n    ,\n    value: zipCode,\n    autoComplete: \"off\" // we have to change the onChange because the is no one for the controller name actualy\n    ,\n    onChange: function onChange(e) {\n      return searchPickupZipCode(e);\n    }\n  })) : __jsx(PlacesAutocomplete, {\n    value: deliveryAddressAutocomplete,\n    onChange: function onChange(e) {\n      return setDeliveryAddressAutocomplete(e);\n    },\n    onSelect: function onSelect(e) {\n      return handleSelect(e, false);\n    },\n    searchOptions: {\n      types: [],\n      componentRestrictions: {\n        country: \"ar\"\n      }\n    }\n  }, function (_ref3) {\n    var getInputProps = _ref3.getInputProps,\n        suggestions = _ref3.suggestions,\n        getSuggestionItemProps = _ref3.getSuggestionItemProps,\n        loading = _ref3.loading;\n    return __jsx(\"div\", {\n      onClick: function onClick(e) {\n        return handleOnFocus(e);\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'left',\n        flexDirection: 'row',\n        alignItems: 'center',\n        padding: '0px 0px'\n      }\n    }, __jsx(\"input\", getInputProps({\n      placeholder: \"Calle, altura, localidad\",\n      className: \"location-search-input\",\n      style: {\n        width: '220px',\n        padding: '0px 8px',\n        appearance: 'none',\n        fontFamily: \"'Lato', sans-serif\",\n        fontSize: '15',\n        lineHeight: 'inherit',\n        border: '1px solid',\n        borderColor: '#f7f7f7',\n        borderRadius: '6px',\n        backgroundColor: '#f7f7f7',\n        color: '#0D1136',\n        height: '48px',\n        transition: 'all 0.25s ease',\n        // mb: 3,\n        '&:hover,&:focus': {\n          outline: 0,\n          borderColor: '#009e7f'\n        }\n      }\n    })), (deliveryAddressAutocomplete === null || deliveryAddressAutocomplete === void 0 ? void 0 : deliveryAddressAutocomplete.length) ? __jsx(ActionsButtons, {\n      className: \"button-wrapper\"\n    }, __jsx(ActionButton, {\n      onClick: function onClick() {\n        return deleteDeliveryAddress();\n      },\n      className: \"delete-btn\"\n    }, __jsx(CloseIcon, null))) : ''), __jsx(\"div\", {\n      className: \"autocomplete-dropdown-container\"\n    }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map(function (suggestion, i) {\n      var _suggestion$descripti, _suggestion$descripti2;\n\n      var style = suggestion.active ? {\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\",\n        borderBottom: \"1px solid gray\",\n        justifyContent: \"flex-start\",\n        display: 'flex',\n        maxWidth: '320px'\n      } : {\n        backgroundColor: \"#ffffff\",\n        cursor: \"pointer\",\n        borderBottom: \"1px solid gray\",\n        justifyContent: \"flex-start\",\n        display: 'flex',\n        maxWidth: '320px',\n        alignItems: \"center\"\n      };\n      return __jsx(\"div\", _extends({\n        key: \"\".concat(i, \"-suggestion\")\n      }, getSuggestionItemProps(suggestion, {\n        style: style\n      })), __jsx(BannerIcon, null, __jsx(\"img\", {\n        src: DeliveryIcon,\n        alt: \"\"\n      })), (_suggestion$descripti = suggestion.description) === null || _suggestion$descripti === void 0 ? void 0 : _suggestion$descripti.split(\",\")[0], (_suggestion$descripti2 = suggestion.description) === null || _suggestion$descripti2 === void 0 ? void 0 : _suggestion$descripti2.split(\",\")[1]);\n    })));\n  }), !props.deliveryMethodsSelected && zipCode.length >= 4 && props.deliveryMethodTypeSelected === DeliveryMethodsConstants.PICKUP && __jsx(DeliveryText, null, intl.formatMessage({\n    id: 'noDittoPickUpLocations',\n    defaultMessage: 'noDittoPickUpLocations'\n  })), !insideDeliveryArea && __jsx(DeliveryText, null, intl.formatMessage({\n    id: 'noDeliveryThereYet',\n    defaultMessage: 'noDeliveryThereYet'\n  }))))));\n};\n\nexport default DeliverySelection;","map":null,"metadata":{},"sourceType":"module"}