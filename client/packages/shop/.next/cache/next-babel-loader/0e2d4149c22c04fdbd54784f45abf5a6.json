{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer, useContext, createContext } from 'react';\nimport { reducer, cartItemsTotalPrice, cartDiscountAmount } from './cart.reducer';\nimport { useStorage } from 'utils/use-storage';\nconst CartContext = createContext({});\nconst INITIAL_STATE = {\n  isOpen: false,\n  items: [],\n  isRestaurant: false,\n  coupon: null\n};\n\nconst useCartActions = (initialCart = INITIAL_STATE) => {\n  var _state$items3;\n\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialCart);\n\n  const addItemHandler = (item, quantity = 1) => {\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: _objectSpread(_objectSpread({}, item), {}, {\n        quantity\n      })\n    });\n  };\n\n  const removeItemHandler = (item, quantity = 1) => {\n    dispatch({\n      type: 'REMOVE_ITEM',\n      payload: _objectSpread(_objectSpread({}, item), {}, {\n        quantity\n      })\n    });\n  };\n\n  const clearItemFromCartHandler = item => {\n    dispatch({\n      type: 'CLEAR_ITEM_FROM_CART',\n      payload: item\n    });\n  };\n\n  const clearCartHandler = () => {\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n  };\n\n  const toggleCartHandler = () => {\n    dispatch({\n      type: 'TOGGLE_CART'\n    });\n  };\n\n  const couponHandler = coupon => {\n    dispatch({\n      type: 'APPLY_COUPON',\n      payload: coupon\n    });\n  };\n\n  const removeCouponHandler = () => {\n    dispatch({\n      type: 'REMOVE_COUPON'\n    });\n  };\n\n  const rehydrateLocalState = payload => {\n    dispatch({\n      type: 'REHYDRATE',\n      payload\n    });\n  };\n\n  const toggleRestaurant = () => {\n    dispatch({\n      type: 'TOGGLE_RESTAURANT'\n    });\n  };\n\n  const isInCartHandler = id => {\n    var _state$items;\n\n    return (_state$items = state.items) === null || _state$items === void 0 ? void 0 : _state$items.some(item => item.id === id);\n  };\n\n  const getItemHandler = id => {\n    var _state$items2;\n\n    return (_state$items2 = state.items) === null || _state$items2 === void 0 ? void 0 : _state$items2.find(item => item.id === id);\n  };\n\n  const getCartItemsPrice = () => cartItemsTotalPrice(state.items).toFixed(2);\n\n  const getCartItemsTotalPrice = () => cartItemsTotalPrice(state.items, state.coupon).toFixed(2);\n\n  const getDiscount = () => cartDiscountAmount(state.items, state.coupon).toFixed(2);\n\n  const getItemsCount = (_state$items3 = state.items) === null || _state$items3 === void 0 ? void 0 : _state$items3.reduce((acc, item) => acc + item.quantity, 0);\n  return {\n    state,\n    getItemsCount,\n    rehydrateLocalState,\n    addItemHandler,\n    removeItemHandler,\n    clearItemFromCartHandler,\n    clearCartHandler,\n    isInCartHandler,\n    getItemHandler,\n    toggleCartHandler,\n    getCartItemsTotalPrice,\n    getCartItemsPrice,\n    couponHandler,\n    removeCouponHandler,\n    getDiscount,\n    toggleRestaurant\n  };\n};\n\nexport const CartProvider = ({\n  children\n}) => {\n  var _state$items4;\n\n  const {\n    state,\n    rehydrateLocalState,\n    getItemsCount,\n    addItemHandler,\n    removeItemHandler,\n    clearItemFromCartHandler,\n    clearCartHandler,\n    isInCartHandler,\n    getItemHandler,\n    toggleCartHandler,\n    getCartItemsTotalPrice,\n    couponHandler,\n    removeCouponHandler,\n    getCartItemsPrice,\n    getDiscount,\n    toggleRestaurant\n  } = useCartActions();\n  const {\n    rehydrated,\n    error\n  } = useStorage(state, rehydrateLocalState);\n  return __jsx(CartContext.Provider, {\n    value: {\n      isOpen: state.isOpen,\n      items: state.items,\n      coupon: state.coupon,\n      isRestaurant: state.isRestaurant,\n      cartItemsCount: (_state$items4 = state.items) === null || _state$items4 === void 0 ? void 0 : _state$items4.length,\n      itemsCount: getItemsCount,\n      addItem: addItemHandler,\n      removeItem: removeItemHandler,\n      removeItemFromCart: clearItemFromCartHandler,\n      clearCart: clearCartHandler,\n      isInCart: isInCartHandler,\n      getItem: getItemHandler,\n      toggleCart: toggleCartHandler,\n      calculatePrice: getCartItemsTotalPrice,\n      calculateSubTotalPrice: getCartItemsPrice,\n      applyCoupon: couponHandler,\n      removeCoupon: removeCouponHandler,\n      calculateDiscount: getDiscount,\n      toggleRestaurant\n    }\n  }, children);\n};\nexport const useCart = () => useContext(CartContext);","map":null,"metadata":{},"sourceType":"module"}