{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Button } from 'components/button/button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ButtonsContainer, DayContainer, Heading, ListDes, ListItem, ListTitle, PlantsSensorContainer, Text, WeekContainer } from './add-schedule-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Loader from 'components/loader/loader';\nimport TimePicker from 'react-time-picker';\nimport { WeekDays } from 'utils/constant';\nimport { UPDATE_SETTING } from 'graphql/query/plants.query';\n// Wrap our form with the using withFormik HoC\nvar FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Required!'),\n    info: Yup.string().required('Required')\n  }),\n  handleSubmit: function handleSubmit(values) {// do submitting things\n  }\n});\n\nvar AddTimeSchedule = function AddTimeSchedule(props) {\n  var _currentSchedule$star, _currentSchedule$endT, _currentSchedule$days;\n\n  var isValid = props.isValid,\n      item = props.item,\n      values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n  var addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n  var settingIndex = item.plant.sensors.findIndex(function (sensor) {\n    return sensor.settingType === item.settingType;\n  });\n  var currentSchedule = item.plant.sensors[settingIndex].scheduledOnTimes[item === null || item === void 0 ? void 0 : item.schedulePosition];\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      isSmartLightingOn = _useState2[0],\n      isSmartLighting = _useState2[1];\n\n  var _useState3 = useState(((_currentSchedule$star = currentSchedule.startTime) === null || _currentSchedule$star === void 0 ? void 0 : _currentSchedule$star.length) > 0 ? currentSchedule === null || currentSchedule === void 0 ? void 0 : currentSchedule.startTime : '00:00'),\n      startTime = _useState3[0],\n      startTimeChange = _useState3[1];\n\n  var _useState4 = useState((currentSchedule === null || currentSchedule === void 0 ? void 0 : (_currentSchedule$endT = currentSchedule.endTime) === null || _currentSchedule$endT === void 0 ? void 0 : _currentSchedule$endT.length) > 0 ? currentSchedule.endTime : '23:59'),\n      endTime = _useState4[0],\n      endTimeChange = _useState4[1];\n\n  var _useState5 = useState(((_currentSchedule$days = currentSchedule.daysToRepeat) === null || _currentSchedule$days === void 0 ? void 0 : _currentSchedule$days.length) >= 0 ? currentSchedule.daysToRepeat : []),\n      daysSelected = _useState5[0],\n      setDaysSelected = _useState5[1];\n\n  var _useMutation = useMutation(UPDATE_SETTING),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateSetting = _useMutation2[0];\n\n  var intl = useIntl();\n\n  var handleSettingsChange = function handleSettingsChange(plant, field, value, settingType) {\n    dispatch({\n      type: settingType,\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    dispatchSettingSave(plant, field, value, settingType);\n  };\n\n  var dispatchSettingSave = function dispatchSettingSave(plant, fieldName, fieldValue, settingType) {\n    var settingIndex = plant.sensors.findIndex(function (sensor) {\n      return sensor.settingType === settingType;\n    });\n    updateSetting({\n      variables: {\n        id: item.id,\n        plantId: plant.plantId,\n        input: _objectSpread(_objectSpread(_defineProperty({}, fieldName, fieldValue), plant.sensors[settingIndex]), {}, {\n          settingType: settingType\n        })\n      }\n    });\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _item$plant$sensors$s, _item$plant$sensors$s2, _item$plant$sensors$s3;\n\n      var newSchedule, settingIndex;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              newSchedule = {\n                daysToRepeat: daysSelected,\n                startTime: startTime,\n                endTime: endTime,\n                enabled: true,\n                smartLight: isSmartLightingOn\n              };\n              setLoading(true);\n              settingIndex = item.plant.sensors.findIndex(function (sensor) {\n                return sensor.settingType === item.settingType;\n              });\n              item.plant.sensors[settingIndex].scheduledOnTimes = ((_item$plant$sensors$s = item.plant.sensors[settingIndex]) === null || _item$plant$sensors$s === void 0 ? void 0 : (_item$plant$sensors$s2 = _item$plant$sensors$s.scheduledOnTimes) === null || _item$plant$sensors$s2 === void 0 ? void 0 : _item$plant$sensors$s2.length) >= 0 ? (_item$plant$sensors$s3 = item.plant.sensors[settingIndex]) === null || _item$plant$sensors$s3 === void 0 ? void 0 : _item$plant$sensors$s3.scheduledOnTimes : []; // if (isValid) {\n\n              item.plant.sensors[settingIndex].scheduledOnTimes.push(newSchedule);\n              handleSettingsChange(item.plant, 'scheduledOnTimes', item.plant.sensors[settingIndex].scheduledOnTimes, item.settingType);\n              closeModal();\n              setLoading(false); // }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleDaysAddition = function handleDaysAddition(day) {\n    var dayIndex = daysSelected.indexOf(day);\n    var newDaysSelectedArray = daysSelected;\n    dayIndex >= 0 ? newDaysSelectedArray.splice(dayIndex, 1) : newDaysSelectedArray.push(day);\n    setDaysSelected(newDaysSelectedArray);\n  };\n\n  return __jsx(Form, null, __jsx(PlantsSensorContainer, null, __jsx(Heading, null, __jsx(Heading, null, intl.formatMessage({\n    id: currentSchedule ? 'editTimeScheduleId' : 'addTimeScheduleId',\n    defaultMessage: 'addTimeScheduleId'\n  }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"startTimeId\",\n    defaultMessage: \"startTimeId\"\n  }))), __jsx(ListDes, null, __jsx(TimePicker, {\n    onChange: function onChange(e) {\n      return startTimeChange(e);\n    },\n    value: startTime,\n    disableClock: true\n  }))), __jsx(ListItem, null, __jsx(ListTitle, null, __jsx(Text, {\n    bold: true\n  }, __jsx(FormattedMessage, {\n    id: \"endTimeId\",\n    defaultMessage: \"endTimeId\"\n  }))), __jsx(ListDes, null, __jsx(TimePicker, {\n    onChange: function onChange(e) {\n      return endTimeChange(e);\n    },\n    value: endTime,\n    disableClock: true\n  }))), __jsx(WeekContainer, null, Object.keys(WeekDays).map(function (day, i) {\n    return __jsx(DayContainer, {\n      key: i + '-day-container',\n      style: {\n        backgroundColor: daysSelected.indexOf(day) >= 0 ? '#b99c9c' : 'transparent'\n      },\n      onClick: function onClick() {\n        return handleDaysAddition(day);\n      }\n    }, day.substring(0, 3));\n  })), __jsx(ButtonsContainer, null, __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\" // style={{ width: '100%', height: '44px', marginTop: '200px' }}\n    ,\n    loader: __jsx(Loader, null),\n    isDisabled: loading,\n    isLoading: loading\n  }, __jsx(FormattedMessage, {\n    id: currentSchedule ? \"editTimeFrameId\" : \"addTimeFrameId\",\n    defaultMessage: \"addTimeFrameId\"\n  })), __jsx(Button, {\n    onClick: function onClick() {\n      return closeModal();\n    },\n    style: {\n      marginLeft: '20px'\n    },\n    loader: __jsx(Loader, null),\n    isDisabled: loading,\n    isLoading: loading\n  }, __jsx(FormattedMessage, {\n    id: \"cancelTimeFrameId\",\n    defaultMessage: \"cancelTimeFrameId\"\n  })))));\n};\n\nexport default FormEnhancer(AddTimeSchedule);","map":null,"metadata":{},"sourceType":"module"}