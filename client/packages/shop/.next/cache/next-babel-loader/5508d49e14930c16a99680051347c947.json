{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/contexts/language/language.provider.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'assets/styles/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL, isLocale } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nconst LanguageContext = React.createContext({});\nexport const LanguageProvider = ({\n  children,\n  messages\n}) => {\n  const [locale, setLocale] = React.useState('');\n  const OPEN_CAGE_KEY = process.env.OPEN_CAGE_KEY;\n  const [location, setLocation] = React.useState('');\n\n  const changeLanguage = newLocale => {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n\n  React.useEffect(() => {\n    console.log(locale, location);\n    setLocateBasedOnLocation();\n  }, [locale, location]);\n\n  const setLocateBasedOnLocation = () => {\n    console.log('setLocateBasedOnLocationsetLocateBasedOnLocation');\n    if (!location) return;\n    const isUs = location.toLowerCase().includes('united states');\n    const isAr = location.toLowerCase().includes('argentina');\n\n    if (isUs && locale !== Locales.EN) {\n      changeLanguage(Locales.EN);\n    } else if (isAr && locale !== Locales.ES) {\n      changeLanguage(Locales.ES);\n    }\n  };\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.permissions.query({\n        name: \"geolocation\"\n      }).then(function (result) {\n        console.log(result);\n\n        if (result.state === \"granted\") {\n          //If granted then you can directly call your function here\n          navigator.geolocation.getCurrentPosition(success, errors, options);\n        } else if (result.state === \"prompt\") {\n          //If prompt then the user will be asked to give permission\n          navigator.geolocation.getCurrentPosition(success, errors, options);\n        } else if (result.state === \"denied\") {//If denied then you have to show instructions to enable location\n        }\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  function getLocationInfo(latitude, longitude) {\n    const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude},${longitude}&key=9224762c77b8486bb04d32f036690d2f`;\n    fetch(url).then(response => response.json()).then(data => {\n      console.log(data);\n\n      if (data.status.code === 200) {\n        console.log(\"results:\", data.results);\n        setLocation(data.results[0].formatted);\n      } else {\n        console.log(\"Reverse geolocation request failed.\");\n      }\n    }).catch(error => console.error(error));\n  }\n\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    var crd = pos.coords; // console.log(\"Your current position is:\");\n    // console.log(`Latitude : ${crd.latitude}`);\n    // console.log(`Longitude: ${crd.longitude}`);\n    // console.log(`More or less ${crd.accuracy} meters.`);\n\n    getLocationInfo(crd.latitude, crd.longitude);\n  }\n\n  function errors(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  React.useEffect(() => {\n    const localSetting = Cookie.get('locale');\n\n    if (localSetting && isLocale(localSetting)) {\n      document.documentElement.lang = localSetting;\n      setLocale(localSetting);\n    }\n  }, [locale]);\n  let isRtl = isRTL(locale);\n  return __jsx(LanguageContext.Provider, {\n    value: {\n      locale,\n      changeLanguage,\n      isRtl,\n      location\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, __jsx(IntlProvider, {\n    locale: locale,\n    messages: messages[locale],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, __jsx(InjectRTL, {\n    lang: locale,\n    dir: isRtl ? 'rtl' : 'ltr',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, __jsx(StyleSheetManager, {\n    stylisPlugins: [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, children))));\n};\nexport const useLocale = () => React.useContext(LanguageContext);","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/contexts/language/language.provider.tsx"],"names":["React","IntlProvider","InjectRTL","Cookie","isRTL","isLocale","StyleSheetManager","LanguageContext","createContext","LanguageProvider","children","messages","locale","setLocale","useState","OPEN_CAGE_KEY","process","env","location","setLocation","changeLanguage","newLocale","document","documentElement","lang","set","useEffect","console","log","setLocateBasedOnLocation","isUs","toLowerCase","includes","isAr","Locales","EN","ES","navigator","geolocation","permissions","query","name","then","result","state","getCurrentPosition","success","errors","options","getLocationInfo","latitude","longitude","url","fetch","response","json","data","status","code","results","formatted","catch","error","enableHighAccuracy","timeout","maximumAge","pos","crd","coords","err","warn","message","localSetting","get","isRtl","useLocale","useContext"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'assets/styles/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL, isLocale } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nimport RTLPlugin from 'stylis-plugin-rtl';\n\nconst LanguageContext = React.createContext({} as any);\n\nexport const LanguageProvider = ({ children, messages }) => {\n  const [locale, setLocale] = React.useState('');\n  const OPEN_CAGE_KEY = process.env.OPEN_CAGE_KEY;\n  const [location, setLocation] = React.useState('');\n\n  const changeLanguage = (newLocale): void => {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n\n\n  React.useEffect(() => {\n    console.log(locale, location)\n    setLocateBasedOnLocation()\n  }, [locale, location]);\n\n  const setLocateBasedOnLocation = () => {\n    console.log('setLocateBasedOnLocationsetLocateBasedOnLocation')\n    if (!location) return;\n    const isUs = location.toLowerCase().includes('united states')\n    const isAr = location.toLowerCase().includes('argentina')\n\n    if (isUs && locale !== Locales.EN) {\n      changeLanguage(Locales.EN)\n    } else if (isAr && locale !== Locales.ES) {\n      changeLanguage(Locales.ES)\n    }\n  }\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.permissions\n        .query({ name: \"geolocation\" })\n        .then(function (result) {\n          console.log(result);\n          if (result.state === \"granted\") {\n            //If granted then you can directly call your function here\n            navigator.geolocation.getCurrentPosition(success, errors, options);\n          } else if (result.state === \"prompt\") {\n            //If prompt then the user will be asked to give permission\n            navigator.geolocation.getCurrentPosition(success, errors, options);\n          } else if (result.state === \"denied\") {\n            //If denied then you have to show instructions to enable location\n          }\n        });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  \n  function getLocationInfo(latitude, longitude) {\n    const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude},${longitude}&key=9224762c77b8486bb04d32f036690d2f`;\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        if (data.status.code === 200) {\n\n          console.log(\"results:\", data.results);\n          setLocation(data.results[0].formatted);\n        } else {\n          console.log(\"Reverse geolocation request failed.\");\n        }\n      })\n      .catch((error) => console.error(error));\n  }\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0,\n  };\n  function success(pos) {\n    var crd = pos.coords;\n    // console.log(\"Your current position is:\");\n    // console.log(`Latitude : ${crd.latitude}`);\n    // console.log(`Longitude: ${crd.longitude}`);\n    // console.log(`More or less ${crd.accuracy} meters.`);\n    \n    getLocationInfo(crd.latitude, crd.longitude);\n  }\n\n  function errors(err) { console.warn(`ERROR(${err.code}): ${err.message}`); }\n\n\n  React.useEffect(() => {\n    const localSetting = Cookie.get('locale');\n    if (localSetting && isLocale(localSetting)) {\n      document.documentElement.lang = localSetting;\n      setLocale(localSetting);\n    }\n  }, [locale]);\n  let isRtl = isRTL(locale);\n\n  return (\n    <LanguageContext.Provider value={{ locale, changeLanguage, isRtl, location }}>\n      <IntlProvider locale={locale} messages={messages[locale]}>\n        <InjectRTL lang={locale} dir={isRtl ? 'rtl' : 'ltr'}>\n          <StyleSheetManager stylisPlugins={[]}>\n            {children}\n          </StyleSheetManager>\n        </InjectRTL>\n      </IntlProvider>\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLocale = () => React.useContext(LanguageContext);\n"]},"metadata":{},"sourceType":"module"}