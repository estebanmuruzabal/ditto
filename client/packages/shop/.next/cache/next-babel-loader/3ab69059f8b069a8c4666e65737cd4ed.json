{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/sub-header/sub-header.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { DeliveryMethods, DeliveryText, LocationContent, MethodOption, Options, SubHeaderWrapper } from './sub-header.style';\nimport { openModal } from '@redq/reuse-modal';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { useMedia } from 'utils/use-media';\nimport { FormattedMessage } from 'react-intl';\nimport PopoverBigger from 'components/popover-bigger/popover-bigger';\nimport LocationModal from 'features/location-modal/location-modal';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport AuthenticationForm from 'features/authentication-form';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleDown, faChevronCircleUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { DeliveryMethodsConstants } from 'utils/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { DELIVERY_METHOD } from 'graphql/query/delivery';\n\nconst LocationMenu = ({\n  cityAndStateText,\n  deliveryMethodSelected,\n  isOpen\n}) => {\n  const noOptionSelected = deliveryMethodSelected === DeliveryMethodsConstants.PICKUP || deliveryMethodSelected === DeliveryMethodsConstants.DELIVERY;\n  return __jsx(LocationContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, isOpen ? __jsx(FontAwesomeIcon, {\n    icon: faChevronCircleDown,\n    className: \"fas fa-chevron-down\",\n    style: {\n      color: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 14\n    }\n  }) : __jsx(FontAwesomeIcon, {\n    icon: faChevronCircleUp,\n    className: \"fas fa-chevron-up\",\n    style: {\n      color: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 14\n    }\n  }), __jsx(DeliveryText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, deliveryMethodSelected));\n};\n\nconst SubHeader = (_ref) => {\n  var _deliverData$delivery, _plant;\n\n  let props = Object.assign({}, _ref);\n  const {\n    location\n  } = useLocale();\n  const mobile = useMedia('(max-width: 580px)');\n  const [deliveryMethodSelected, setDeliveryMethod] = React.useState('How you want your items?');\n  const {\n    data: deliverData\n  } = useQuery(DELIVERY_METHOD);\n  const {\n    authDispatch\n  } = useContext(AuthContext);\n  const [subHeaderModal, setSubHeaderModal] = React.useState(false);\n\n  const setDelivery = (e, deli) => {\n    e.stopPropagation();\n    setDeliveryMethod(deli);\n  };\n\n  const deliveryMethods = deliverData === null || deliverData === void 0 ? void 0 : (_deliverData$delivery = deliverData.deliveryMethods) === null || _deliverData$delivery === void 0 ? void 0 : _deliverData$delivery.items; // const orderDeliveryMethod = deliveryMethods?.filter(method => method.id === myOrder?.delivery_method_id)[0];\n  // const deliveryDateAndTime = `${myOrder?.delivery_pickup_date} ${getDeliverySchedule(orderDeliveryMethod?.details, intl.locale)}`;\n\n  console.log('deliveryMethods', deliveryMethods);\n  const pickUpOptionsMethods = deliveryMethods === null || deliveryMethods === void 0 ? void 0 : deliveryMethods.filter(deliveryMethod => {\n    return deliveryMethod.isPickUp === true;\n  });\n  const isPickUp = deliveryMethodSelected === DeliveryMethodsConstants.PICKUP;\n  const hasDefaultPickUpOption = true;\n  const a = isPickUp && hasDefaultPickUpOption ? 'Find the closest PickUp Location' : 'Check delivery address ZIP CODE';\n  const cityAndStateText = isPickUp ? a : location ? mobile ? `${location.split(', ')[1]}, ${location.split(', ')[2]}` : `${location.split(', ')[0]}, ${location.split(', ')[1]}` : '';\n\n  const openLocationModal = () => {\n    authDispatch({\n      type: 'LOCATION_MODAL'\n    });\n    openModal({\n      show: true,\n      overlayClassName: 'quick-view-overlay',\n      closeOnClickOutside: true,\n      component: AuthenticationForm,\n      closeComponent: '',\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'quick-view-modal',\n        width: 458,\n        height: 'auto'\n      }\n    });\n  };\n\n  return __jsx(SubHeaderWrapper, {\n    className: props.className,\n    id: \"layout-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, __jsx(PopoverBigger, {\n    direction: \"left\",\n    className: \"user-pages-dropdown\",\n    openHandler: __jsx(LocationMenu, {\n      isOpen: false,\n      deliveryMethodSelected: deliveryMethodSelected,\n      cityAndStateText: cityAndStateText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 22\n      }\n    }),\n    closeHandler: __jsx(LocationMenu, {\n      isOpen: true,\n      deliveryMethodSelected: deliveryMethodSelected,\n      cityAndStateText: cityAndStateText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 23\n      }\n    }),\n    content: __jsx(DeliveryMethods, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, __jsx(Options, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, __jsx(MethodOption, {\n      onClick: e => setDelivery(e, DeliveryMethodsConstants.PICKUP),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, \"Pickup\"), __jsx(MethodOption, {\n      onClick: e => setDelivery(e, DeliveryMethodsConstants.DELIVERY),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }, \"Delivery\")), __jsx(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, __jsx(Heading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, isPickUp ? __jsx(FormattedMessage, {\n      id: \"pickupModalheading\",\n      defaultMessage: \"Select Your Location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }) : __jsx(FormattedMessage, {\n      id: \"deliveryModalheading\",\n      defaultMessage: \"Select Your Location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    })), __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      disabled: true,\n      value: (_plant = plant) === null || _plant === void 0 ? void 0 : _plant.name // we have to change the onChange because the is no one for the controller name actualy\n      ,\n      onChange: e => handleCreateUpdatePlantOnClick(plant, e.target.value, false, intl.locale),\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 18\n      }\n    }), __jsx(Button, {\n      fullwidth: true,\n      radius: 100,\n      onClick: handleZipCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"continueBtn\",\n      defaultMessage: \"Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }\n    }))), __jsx(OfferSection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }, __jsx(GiftBox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }), __jsx(Offer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"locationModalFooter\",\n      defaultMessage: \"Free Delivery For 1st Order\",\n      values: {\n        number: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }\n    })))), __jsx(LocationModal, {\n      isPick: deliveryMethodSelected === DeliveryMethodsConstants.PICKUP,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default SubHeader;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/sub-header/sub-header.tsx"],"names":["React","useContext","DeliveryMethods","DeliveryText","LocationContent","MethodOption","Options","SubHeaderWrapper","openModal","useLocale","useMedia","FormattedMessage","PopoverBigger","LocationModal","AuthContext","AuthenticationForm","FontAwesomeIcon","faChevronCircleDown","faChevronCircleUp","DeliveryMethodsConstants","useQuery","DELIVERY_METHOD","LocationMenu","cityAndStateText","deliveryMethodSelected","isOpen","noOptionSelected","PICKUP","DELIVERY","color","SubHeader","props","location","mobile","setDeliveryMethod","useState","data","deliverData","authDispatch","subHeaderModal","setSubHeaderModal","setDelivery","e","deli","stopPropagation","deliveryMethods","items","console","log","pickUpOptionsMethods","filter","deliveryMethod","isPickUp","hasDefaultPickUpOption","a","split","openLocationModal","type","show","overlayClassName","closeOnClickOutside","component","closeComponent","config","enableResizing","disableDragging","className","width","height","plant","name","handleCreateUpdatePlantOnClick","target","value","intl","locale","handleZipCode","number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { BannerIcon, BannerText, DeliveryMethods, DeliveryText, LocationContent, MethodOption, Options, SubHeaderWrapper } from './sub-header.style';\nimport { openModal } from '@redq/reuse-modal';\nimport { useLocale } from 'contexts/language/language.provider';\nimport DeliveryIcon from 'assets/images/locationIcon.webp';\nimport Popover from 'components/popover/popover';\nimport { useMedia } from 'utils/use-media';\nimport { MenuItem } from 'layouts/header/menu/language-switcher/language-switcher.style';\nimport { FormattedMessage } from 'react-intl';\nimport PopoverBigger from 'components/popover-bigger/popover-bigger';\nimport LocationModal from 'features/location-modal/location-modal';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport AuthenticationForm from 'features/authentication-form';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faChevronCircleDown, faChevronCircleUp, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { DeliveryMethodsConstants } from 'utils/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { DELIVERY_METHOD } from 'graphql/query/delivery';\n\ninterface Props {\n  className: string\n}\n\n\nconst LocationMenu = ({ cityAndStateText, deliveryMethodSelected, isOpen }) => {\n  const noOptionSelected = deliveryMethodSelected === DeliveryMethodsConstants.PICKUP || deliveryMethodSelected === DeliveryMethodsConstants.DELIVERY;\n  return (\n    <LocationContent>\n        { isOpen \n          ? (<FontAwesomeIcon icon={faChevronCircleDown} className=\"fas fa-chevron-down\" style={{ color: \"black\" }} />) \n          : (<FontAwesomeIcon icon={faChevronCircleUp} className=\"fas fa-chevron-up\" style={{ color: \"black\" }} />)\n        }\n        <DeliveryText>{deliveryMethodSelected}</DeliveryText>\n        {/* { noOptionSelected && (\n          <>\n              |\n            <BannerIcon><img src={DeliveryIcon} alt=\"\" /></BannerIcon>\n            <BannerText>{cityAndStateText && cityAndStateText}</BannerText>\n          </>\n        )} */}\n      </LocationContent>\n  );\n};\n\n\nconst SubHeader: React.FC<Props> = ({ ...props  }) => {\n  const { location } = useLocale();\n  const mobile = useMedia('(max-width: 580px)');\n  const [deliveryMethodSelected, setDeliveryMethod] = React.useState('How you want your items?');\n  const { data: deliverData } = useQuery(DELIVERY_METHOD)\n  const { authDispatch } = useContext<any>(AuthContext);\n  const [subHeaderModal, setSubHeaderModal] = React.useState(false);\n\n  const setDelivery =  (e, deli) => {\n    e.stopPropagation();\n    setDeliveryMethod(deli)\n  };\n\n  const deliveryMethods = deliverData?.deliveryMethods?.items;\n  // const orderDeliveryMethod = deliveryMethods?.filter(method => method.id === myOrder?.delivery_method_id)[0];\n  // const deliveryDateAndTime = `${myOrder?.delivery_pickup_date} ${getDeliverySchedule(orderDeliveryMethod?.details, intl.locale)}`;\n  console.log('deliveryMethods', deliveryMethods)\n\n  const pickUpOptionsMethods = deliveryMethods?.filter(deliveryMethod => {\n    return deliveryMethod.isPickUp === true;\n  });\n\n  const isPickUp = deliveryMethodSelected === DeliveryMethodsConstants.PICKUP;\n  const hasDefaultPickUpOption = true;\n  const a = (isPickUp && hasDefaultPickUpOption) ? 'Find the closest PickUp Location' : 'Check delivery address ZIP CODE';\n  const cityAndStateText = isPickUp ? a : location ? mobile ?\n    `${location.split(', ')[1]}, ${location.split(', ')[2]}`\n    : `${location.split(', ')[0]}, ${location.split(', ')[1]}`\n    : '';\n\n  const openLocationModal = () => {\n    authDispatch({\n      type: 'LOCATION_MODAL',\n    });\n\n    openModal({\n      show: true,\n      overlayClassName: 'quick-view-overlay',\n      closeOnClickOutside: true,\n      component: AuthenticationForm,\n      closeComponent: '',\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'quick-view-modal',\n        width: 458,\n        height: 'auto',\n      },\n    });\n\n  };\n\n  return (\n    <SubHeaderWrapper className={props.className} id=\"layout-header\">\n      <PopoverBigger\n        direction=\"left\"\n        className=\"user-pages-dropdown\"\n        openHandler={<LocationMenu\n          isOpen={false} deliveryMethodSelected={deliveryMethodSelected} cityAndStateText={cityAndStateText} />\n        }\n        closeHandler={<LocationMenu\n          isOpen={true} deliveryMethodSelected={deliveryMethodSelected} cityAndStateText={cityAndStateText}/>\n        }\n        content={\n          <DeliveryMethods>\n      \n            <Options>\n              <MethodOption onClick={(e) => setDelivery(e, DeliveryMethodsConstants.PICKUP)}>Pickup</MethodOption> \n              <MethodOption onClick={(e) => setDelivery(e, DeliveryMethodsConstants.DELIVERY)}>Delivery</MethodOption> \n            </Options>\n            <Wrapper>\n              <Container>\n                <Heading>\n                  { isPickUp ? (\n                    <FormattedMessage\n                      id=\"pickupModalheading\"\n                      defaultMessage=\"Select Your Location\"\n                    />\n                  ) : (\n                    <FormattedMessage\n                      id=\"deliveryModalheading\"\n                      defaultMessage=\"Select Your Location\"\n                    />\n                  )}\n                </Heading>\n                {/* <SubHeading>\n                  <FormattedMessage\n                    id=\"locationModalSubHeading\"\n                    defaultMessage=\"You have to select your location for deliver service perpous\"\n                  />\n                </SubHeading> */}\n                 <Input\n                            type='text'\n                            name='name'\n                            disabled={true}\n                            value={plant?.name}\n                            // we have to change the onChange because the is no one for the controller name actualy\n                            onChange={(e: any) => handleCreateUpdatePlantOnClick(plant, e.target.value, false, intl.locale)}\n                            backgroundColor='#F7F7F7'\n                            width='197px'\n                            height='34.5px'\n                          />\n                <Button\n                  fullwidth\n                  radius={100}\n                  onClick={handleZipCode}\n                >\n                  <FormattedMessage id='continueBtn' defaultMessage='Continue' />\n                </Button>\n              </Container>\n              <OfferSection>\n                <GiftBox />\n                <Offer>\n                  <FormattedMessage\n                    id=\"locationModalFooter\"\n                    defaultMessage=\"Free Delivery For 1st Order\"\n                    values={{ number: 1 }}\n                  />\n                </Offer>\n              </OfferSection>\n            </Wrapper>\n            <LocationModal\n              isPick={deliveryMethodSelected === DeliveryMethodsConstants.PICKUP}\n             />\n        </DeliveryMethods>\n        }\n      />\n  </SubHeaderWrapper>\n  );\n\n};\n\nexport default SubHeader;\n"]},"metadata":{},"sourceType":"module"}