{"ast":null,"code":"import moment from \"moment\";\nimport { timeZone } from \"./constant\";\nexport var getSensorWithoutNumber = function getSensorWithoutNumber(settingType) {\n  if (!isNaN(Number(settingType[settingType.length - 1]))) {\n    return settingType.substring(0, settingType.length - 2);\n  }\n\n  console.log('didnt work');\n};\nexport var getLastNumOfSensor = function getLastNumOfSensor(settingType) {\n  if (!isNaN(Number(settingType[settingType.length - 1]))) {\n    return Number(settingType.substring(settingType.length, settingType.length - 1));\n  }\n\n  console.log('didnt work 2');\n};\nexport var hasDittoBotUpdatedInLastMinute = function hasDittoBotUpdatedInLastMinute(lastTimeStamp) {\n  var currentTimeMoment = moment(new Date().toLocaleString('en-US', {\n    timeZone: timeZone\n  }));\n  var lastTimeStampMoment = moment(new Date(lastTimeStamp));\n  var lastTimestampInMins = currentTimeMoment === null || currentTimeMoment === void 0 ? void 0 : currentTimeMoment.diff(lastTimeStampMoment, 'minutes'); // we are updating acutally every 5 seconds, but just in case we check if in the last minute there was any conection\n\n  return lastTimestampInMins < 1;\n};","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/utils/ditto-bot.ts"],"names":["moment","timeZone","getSensorWithoutNumber","settingType","isNaN","Number","length","substring","console","log","getLastNumOfSensor","hasDittoBotUpdatedInLastMinute","lastTimeStamp","currentTimeMoment","Date","toLocaleString","lastTimeStampMoment","lastTimestampInMins","diff"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAAuBC,QAAvB,QAAuC,YAAvC;AAEA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,WAAD,EAAwC;AAC1E,MAAI,CAACC,KAAK,CAACC,MAAM,CAACF,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAZ,CAAP,CAAV,EAAyD;AACrD,WAAOH,WAAW,CAACI,SAAZ,CAAsB,CAAtB,EAAyBJ,WAAW,CAACG,MAAZ,GAAqB,CAA9C,CAAP;AACH;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,CALM;AAOP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACP,WAAD,EAAwC;AACtE,MAAI,CAACC,KAAK,CAACC,MAAM,CAACF,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAZ,CAAP,CAAV,EAAyD;AACrD,WAAOD,MAAM,CAACF,WAAW,CAACI,SAAZ,CAAsBJ,WAAW,CAACG,MAAlC,EAA0CH,WAAW,CAACG,MAAZ,GAAqB,CAA/D,CAAD,CAAb;AACH;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,CALM;AAQP,OAAO,IAAME,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,aAAD,EAA2B;AACrE,MAAMC,iBAAiB,GAAGb,MAAM,CAAC,IAAIc,IAAJ,GAAWC,cAAX,CAA0B,OAA1B,EAAmC;AAAEd,IAAAA,QAAQ,EAARA;AAAF,GAAnC,CAAD,CAAhC;AACA,MAAMe,mBAAmB,GAAGhB,MAAM,CAAC,IAAIc,IAAJ,CAASF,aAAT,CAAD,CAAlC;AACA,MAAMK,mBAAmB,GAAGJ,iBAAH,aAAGA,iBAAH,uBAAGA,iBAAiB,CAAEK,IAAnB,CAAwBF,mBAAxB,EAA6C,SAA7C,CAA5B,CAHqE,CAKrE;;AACA,SAAOC,mBAAmB,GAAG,CAA7B;AACH,CAPM","sourcesContent":["import moment from \"moment\";\nimport { SensorsTypes, timeZone } from \"./constant\";\n\nexport const getSensorWithoutNumber = (settingType: SensorsTypes) : string => {\n    if (!isNaN(Number(settingType[settingType.length - 1]))) {\n        return settingType.substring(0, settingType.length - 2);\n    }\n    console.log('didnt work')\n};\n\nexport const getLastNumOfSensor = (settingType: SensorsTypes) : number => {\n    if (!isNaN(Number(settingType[settingType.length - 1]))) {\n        return Number(settingType.substring(settingType.length, settingType.length - 1));\n    }\n    console.log('didnt work 2')\n};\n\n\nexport const hasDittoBotUpdatedInLastMinute = (lastTimeStamp: string) => {\n    const currentTimeMoment = moment(new Date().toLocaleString('en-US', { timeZone }));\n    const lastTimeStampMoment = moment(new Date(lastTimeStamp));\n    const lastTimestampInMins = currentTimeMoment?.diff(lastTimeStampMoment, 'minutes');\n\n    // we are updating acutally every 5 seconds, but just in case we check if in the last minute there was any conection\n    return lastTimestampInMins < 1;\n}"]},"metadata":{},"sourceType":"module"}