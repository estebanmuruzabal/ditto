{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\nconst {\n  loading,\n  error,\n  data = {}\n} = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n  notifyOnNetworkStatusChange: true,\n  fetchPolicy: \"network-only\" // pollInterval: 5000,\n\n});\n\nconst Reading = ({\n  errorId,\n  plant,\n  settingType,\n  handleSettingsChange,\n  onDeleteSchedule,\n  data,\n  openTab,\n  setOpenTab,\n  handleDeleteSensor\n}) => {\n  const setting = plant.sensors.find(sensor => sensor.settingType === settingType);\n  data === null || data === void 0 ? void 0 : data.getUser;\n  const reading = (setting === null || setting === void 0 ? void 0 : setting.reading) >= -5 && (setting === null || setting === void 0 ? void 0 : setting.reading) < 0 ? 0 + ' % ðŸ’§' : (setting === null || setting === void 0 ? void 0 : setting.reading) >= 0 && (setting === null || setting === void 0 ? void 0 : setting.reading) <= 100 && (setting === null || setting === void 0 ? void 0 : setting.reading) ? (setting === null || setting === void 0 ? void 0 : setting.reading) + ' % ðŸ’§' : 'Disconected';\n  return __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, reading, \" \");\n};\n\nexport default Reading;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/Reading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","Reading","errorId","plant","settingType","handleSettingsChange","onDeleteSchedule","openTab","setOpenTab","handleDeleteSensor","setting","sensors","find","sensor","getUser","reading"],"mappings":";;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AAEA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,IAAI,GAAG;AAAzB,IAAgCJ,QAAQ,CAACC,2BAAD,EAA8B;AACxEI,EAAAA,2BAA2B,EAAE,IAD2C;AAExEC,EAAAA,WAAW,EAAE,cAF2D,CAGxE;;AAHwE,CAA9B,CAA9C;;AAiBA,MAAMC,OAAwB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,WAAlB;AAA+BC,EAAAA,oBAA/B;AAAqDC,EAAAA,gBAArD;AAAuER,EAAAA,IAAvE;AAA6ES,EAAAA,OAA7E;AAAsFC,EAAAA,UAAtF;AAAkGC,EAAAA;AAAlG,CAAD,KAA6H;AAC1J,QAAMC,OAAO,GAAGP,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAoBC,MAAD,IAAsBA,MAAM,CAACT,WAAP,KAAuBA,WAAhE,CAAhB;AAEAN,EAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEgB,OAAN;AAEA,QAAMC,OAAO,GAAI,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,OAAT,KAAoB,CAAC,CAArB,IAA0B,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,OAAT,IAAmB,CAA9C,GAAmD,IAAI,OAAvD,GAAkE,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,OAAT,KAAoB,CAApB,IAAyB,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,OAAT,KAAoB,GAA7C,KAAoDL,OAApD,aAAoDA,OAApD,uBAAoDA,OAAO,CAAEK,OAA7D,CAAD,GAAyE,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,OAAT,IAAmB,OAA5F,GAAsG,aAAvL;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYA,OAAZ,MADJ;AAGH,CATD;;AAWA,eAAed,OAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nconst { loading, error, data = {} } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    // pollInterval: 5000,\n  });\ninterface Props {\n  data?: any;\n  plant: any;\n  openTab: string;\n  errorId: string;\n  setOpenTab: (settingType: string) => void;\n  handleDeleteSensor: (plant: any, settingType: string) => void;\n  settingType: SensorsTypes;\n  handleSettingsChange: (plant: any, field: string, value: string | boolean, settingType: SensorsTypes) => void;\n  onDeleteSchedule: (plant: any, settingType: SensorsTypes, position: number) => void;\n}\n\nconst Reading: React.FC<Props> = ({ errorId, plant, settingType, handleSettingsChange, onDeleteSchedule, data, openTab, setOpenTab, handleDeleteSensor  }) => {\n    const setting = plant.sensors.find((sensor: ISetting) => sensor.settingType === settingType);\n\n    data?.getUser\n\n    const reading = (setting?.reading >= -5 && setting?.reading < 0) ? 0 + ' % ðŸ’§' : (setting?.reading >= 0 && setting?.reading <= 100 && setting?.reading) ? setting?.reading + ' % ðŸ’§' : 'Disconected';\n    return (\n        <Text bold>{reading} </Text>\n    );\n};\n\nexport default Reading;\n"]},"metadata":{},"sourceType":"module"}