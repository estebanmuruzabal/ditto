{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, RelaysIds, SensorsTypes, ISettingsName } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\nimport { PlantsPageContainer, OrderDetails, BlockTitle, Text, ListItem, ListTitle, ListDes, ButtonText, PlantPageWrapper, PlantsWrapper } from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport Select from 'react-select';\n\nvar YourPlants = function YourPlants(_ref) {\n  _s();\n\n  var deviceType = _ref.deviceType;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER, {\n    pollInterval: 5000\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      userRefetch = _useQuery.refetch; // const router = useRouter();\n\n\n  var intl = useIntl();\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setPlantName = _useState[1];\n\n  var _useState2 = useState(''),\n      openTab = _useState2[0],\n      setOpenTab = _useState2[1];\n\n  var _useState3 = useState(''),\n      plantId = _useState3[0],\n      setControllerID = _useState3[1];\n\n  var _useState4 = useState(''),\n      userinfoMsg = _useState4[0],\n      setUserinfoMsg = _useState4[1];\n\n  var _useState5 = useState(''),\n      sensorSelected = _useState5[0],\n      setSensor = _useState5[1];\n\n  var _useMutation = useMutation(ADD_PLANT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addPlant = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_SETTING),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateSetting = _useMutation4[0];\n\n  var plants = state.plants;\n\n  if (loading) {\n    return __jsx(ErrorMessage, {\n      message: 'Cargando...',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 12\n      }\n    });\n  }\n\n  ;\n\n  if (error) {\n    return __jsx(ErrorMessage, {\n      message: error.message,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    });\n  }\n\n  ;\n\n  var isRelayIdAlreadyAssigend = function isRelayIdAlreadyAssigend(plant, field) {\n    if (field !== 'relayOneIdRelated' && field !== 'relayTwoIdRelated' && field !== 'relayThreeIdRelated' && field !== 'relayFourIdRelated') return false;\n    {\n      Object.keys(ISettingsName).map(function (settingName, i) {\n        var relaysIds = [RelaysIds.RELAY_ONE, RelaysIds.RELAY_TWO, RelaysIds.RELAY_THIRD, RelaysIds.RELAY_FOURTH];\n        var relayAlreadyAssigned = plant[settingName] && relaysIds.includes(plant[settingName][field]);\n\n        if (relayAlreadyAssigned) {\n          setUserinfoMsg(\"\".concat(intl.formatMessage({\n            id: 'relayAlreadyAssinged',\n            defaultMessage: 'Relay already assigned in '\n          }), \" \").concat(plant[settingName]));\n          setTimeout(function () {\n            setUserinfoMsg('');\n          }, 8000);\n          return true;\n        }\n      });\n    }\n    return false;\n  };\n\n  var handleSettingsChange = function handleSettingsChange(plant, field, value, settingName) {\n    if (isRelayIdAlreadyAssigend(plant, field)) return;\n    dispatch({\n      type: settingName,\n      payload: {\n        plant: plant,\n        value: value,\n        field: field\n      }\n    });\n    dispatchSettingSave(plant, field, value, settingName);\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var handleAddClick = function handleAddClick() {\n    var _data$getUser;\n\n    addPlant({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : _data$getUser.id,\n        name: name,\n        plantId: Number(plantId)\n      }\n    });\n    setUserinfoMsg('Update user info successfully');\n    userRefetch();\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var onDeleteSchedule = function onDeleteSchedule(plant, settingName, position) {\n    var _data$getUser2;\n\n    delete plant[settingName][position];\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser2 = data.getUser) === null || _data$getUser2 === void 0 ? void 0 : _data$getUser2.id,\n        plantId: plant.plantId,\n        input: _objectSpread(_objectSpread({}, plant[settingName]), {}, {\n          settingName: settingName\n        })\n      }\n    });\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  var getDefaultSetting = function getDefaultSetting(settingName) {\n    return {\n      name: '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: [],\n      scheduledOnTimes: [],\n      settingName: settingName\n    };\n  };\n\n  var dispatchSettingSave = function dispatchSettingSave(plant, fieldName, fieldValue, settingName) {\n    var _data$getUser3;\n\n    var plantSettingInput = plant[settingName];\n    plantSettingInput[fieldName] = fieldValue;\n    plantSettingInput.settingName = settingName;\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser3 = data.getUser) === null || _data$getUser3 === void 0 ? void 0 : _data$getUser3.id,\n        plantId: plant.plantId,\n        input: plantSettingInput\n      }\n    });\n  };\n\n  var dispatchNewSettingSave = function dispatchNewSettingSave(plant, settingName) {\n    var _data$getUser4;\n\n    updateSetting({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : (_data$getUser4 = data.getUser) === null || _data$getUser4 === void 0 ? void 0 : _data$getUser4.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(settingName)\n      }\n    });\n  }; // Add or edit modal\n\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-time-schedule-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  var selectStyle = {\n    control: function control(styles) {\n      return _objectSpread(_objectSpread({}, styles), {}, {\n        width: '197px',\n        textAlign: 'left'\n      });\n    }\n  };\n  var sensorsOptions = [{\n    value: SensorsTypes.DISTANCE,\n    label: intl.formatMessage({\n      id: 'distanceId',\n      defaultMessage: 'distanceId'\n    })\n  }, {\n    value: SensorsTypes.HUMIDITY,\n    label: intl.formatMessage({\n      id: 'moistHumidityId',\n      defaultMessage: 'moistHumidityId'\n    })\n  }, {\n    value: SensorsTypes.HUMIDITY_TEMPETURE,\n    label: intl.formatMessage({\n      id: 'airHumidityAndTempetureId',\n      defaultMessage: 'airHumidityAndTempetureId'\n    })\n  }, {\n    value: SensorsTypes.LIGHT,\n    label: intl.formatMessage({\n      id: 'lightSensorId',\n      defaultMessage: 'lightSensorId'\n    })\n  }, {\n    value: SensorsTypes.PLUG,\n    label: intl.formatMessage({\n      id: 'intelligentPlugId',\n      defaultMessage: 'intelligentPlugId'\n    })\n  }];\n  console.log(sensorSelected);\n  return __jsx(PlantPageWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/profile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: \"home-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"backProfileBtn\",\n    defaultMessage: \"Back to Profile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }))), __jsx(OrderDetails, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, __jsx(BlockTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"yourPlants\",\n    defaultMessage: \"Your Plants\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  })), (plants === null || plants === void 0 ? void 0 : plants.length) < 1 && __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 36\n    }\n  }, \"No tienes plantas registradas\"), plants === null || plants === void 0 ? void 0 : plants.map(function (plant, i) {\n    var sensors = plant.sensors;\n    return __jsx(PlantsWrapper, {\n      key: i + '-orderList',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, __jsx(ListItem, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 19\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 23\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"controllerNameId\",\n      defaultMessage: \"controllerNameId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 27\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 23\n      }\n    }, __jsx(Input, {\n      type: \"text\",\n      name: \"name\",\n      disabled: true,\n      value: (plant === null || plant === void 0 ? void 0 : plant.name) || '' // we have to change the onChange because the is no one for the controller name actualy\n      ,\n      onChange: function onChange(e) {\n        return handleSettingsChange(e, plant, 'name', e.target.value, ISettingsName.SOIL_HUMIDITY_SETTING_1);\n      },\n      backgroundColor: \"#F7F7F7\",\n      width: \"197px\",\n      height: \"34.5px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 25\n      }\n    }))), __jsx(ListItem, {\n      style: {\n        justifyContent: 'flex-start'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 21\n      }\n    }, __jsx(ListTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 23\n      }\n    }, __jsx(Text, {\n      bold: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 23\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addSensorId\",\n      defaultMessage: \"addSensorId\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 27\n      }\n    }))), __jsx(ListDes, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 23\n      }\n    }, __jsx(Select, {\n      onChange: function onChange(e) {\n        return dispatchNewSettingSave(plant, e.value);\n      },\n      value: sensorSelected // @ts-ignore\n      ,\n      options: sensorsOptions,\n      styles: selectStyle,\n      menuPosition: 'fixed',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 23\n      }\n    }))), sensors === null || sensors === void 0 ? void 0 : sensors.map(function (sensor) {\n      console.log('sensor', sensor);\n\n      switch (sensor.settingName) {\n        case SensorsTypes.HUMIDITY:\n          // check the number of same setting to send\n          return __jsx(SoilHumiditySensor, {\n            key: i + '-day-container',\n            data: data,\n            plant: plant,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingName: sensor.settingName,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 29\n            }\n          });\n\n        case SensorsTypes.LIGHT:\n          // check the number of same setting to send\n          return __jsx(SoilHumiditySensor, {\n            key: i + '-day-container',\n            data: data,\n            plant: plant,\n            openTab: openTab,\n            setOpenTab: setOpenTab,\n            settingName: sensor.settingName,\n            handleSettingsChange: handleSettingsChange,\n            onDeleteSchedule: onDeleteSchedule,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 29\n            }\n          });\n\n        default:\n          break;\n      }\n    }));\n  }), userinfoMsg && __jsx(SuccessMsg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"userInfoSuccess\",\n    defaultMessage: userinfoMsg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }\n  })))), __jsx(PlantsPageContainer, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }\n  }, __jsx(BlockTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addController\",\n    defaultMessage: \"Your Plants\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  })), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantNameField\",\n    defaultMessage: \"Name of the plant\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    onChange: function onChange(e) {\n      return setPlantName(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'plantNamePlaceholderId',\n      defaultMessage: 'Balcony plants'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }\n  }))), __jsx(ListItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }\n  }, __jsx(ListTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"plantIdField\",\n    defaultMessage: \"ID of the controller\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 15\n    }\n  }))), __jsx(ListDes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    name: \"plantId\",\n    value: plantId,\n    onChange: function onChange(e) {\n      return setControllerID(e.target.value);\n    },\n    placeholder: intl.formatMessage({\n      id: 'serialNumberPlaceholderId',\n      defaultMessage: 'Look behind Ditto Bot'\n    }),\n    backgroundColor: \"#F7F7F7\",\n    width: \"197px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 13\n    }\n  }))), __jsx(Button, {\n    className: \"cart-button\",\n    variant: \"secondary\",\n    borderRadius: 100,\n    onClick: handleAddClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }\n  }, __jsx(ButtonText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"addPlantButton\",\n    defaultMessage: \"Add plant\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }\n  }))))); // const renderAirTemperatureSensor = (plant: any, i: any) => {\n  //   return (\n  //     <PlantsSensorContainer>\n  //       <ListItem style={{ justifyContent: 'flex-start' }}>\n  //         <ListTitle>\n  //           <Text bold>\n  //             <FormattedMessage\n  //               id=\"tempSensorId\"\n  //               defaultMessage=\"tempSensorId\"\n  //             />\n  //           </Text>\n  //         </ListTitle>\n  //         <ListDes style={{ marginLeft: '10px' }}>\n  //           <Text>{plant?.tempeture} °</Text>\n  //         </ListDes>\n  //       </ListItem>\n  //     </PlantsSensorContainer>\n  //   )\n  // }\n  // const renderAirHumiditySensor = (plant: any, i: any) => {\n  //   return (\n  //     <PlantsSensorContainer>\n  //       <ListItem style={{ justifyContent: 'flex-start' }}>\n  //         <ListTitle>\n  //           <Text bold>\n  //             <FormattedMessage\n  //               id=\"humedadAmbienteSensorId\"\n  //               defaultMessage=\"humedadAmbienteSensorId\"\n  //             />\n  //           </Text>\n  //         </ListTitle>\n  //         <ListDes style={{ marginLeft: '10px' }}>\n  //           <Text>{plant?.airHumidity} %</Text>\n  //         </ListDes>\n  //       </ListItem>\n  //     </PlantsSensorContainer>\n  //   )\n  // }\n};\n\n_s(YourPlants, \"CjfzEbNGWsbwWzplaKhZS/xMZzw=\", false, function () {\n  return [useQuery, useIntl, useMutation, useMutation];\n});\n\n_c = YourPlants;\nexport default YourPlants;\n\nvar _c;\n\n$RefreshReg$(_c, \"YourPlants\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/your-plants.tsx"],"names":["React","useState","useContext","Link","openModal","useMutation","useQuery","CommonMode","RelaysIds","SensorsTypes","ISettingsName","ErrorMessage","PlantsPageContainer","OrderDetails","BlockTitle","Text","ListItem","ListTitle","ListDes","ButtonText","PlantPageWrapper","PlantsWrapper","FormattedMessage","useIntl","GET_LOGGED_IN_USER","Button","ADD_PLANT","UPDATE_SETTING","Input","ProfileContext","SuccessMsg","SoilHumiditySensor","Select","YourPlants","deviceType","state","dispatch","pollInterval","data","error","loading","userRefetch","refetch","intl","name","setPlantName","openTab","setOpenTab","plantId","setControllerID","userinfoMsg","setUserinfoMsg","sensorSelected","setSensor","addPlant","updateSetting","plants","message","isRelayIdAlreadyAssigend","plant","field","Object","keys","map","settingName","i","relaysIds","RELAY_ONE","RELAY_TWO","RELAY_THIRD","RELAY_FOURTH","relayAlreadyAssigned","includes","formatMessage","id","defaultMessage","setTimeout","handleSettingsChange","value","type","payload","dispatchSettingSave","handleAddClick","variables","getUser","Number","onDeleteSchedule","position","input","getDefaultSetting","whatsappWarningsOn","maxWarning","minWarning","mode","NONE","relayOneAutomatedTimeToRun","relayTwoAutomatedStartedTime","relayOneAutomatedStartedTime","relayOneIdRelated","relayOneWorking","relayTwoAutomatedTimeToRun","relayTwoIdRelated","relayTwoWorking","logs","scheduledOnTimes","fieldName","fieldValue","plantSettingInput","dispatchNewSettingSave","handleModal","modalComponent","modalProps","className","show","config","width","height","enableResizing","disableDragging","closeOnClickOutside","component","componentProps","item","selectStyle","control","styles","textAlign","sensorsOptions","DISTANCE","label","HUMIDITY","HUMIDITY_TEMPETURE","LIGHT","PLUG","console","log","length","sensors","e","target","SOIL_HUMIDITY_SETTING_1","justifyContent","sensor"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAAsCC,UAAtC,QAAwD,OAAxD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,EAA8CC,aAA9C,QAAmE,gBAAnE;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AAEA,SACEC,mBADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,IAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,OAPF,EAQEC,UARF,EASEC,gBATF,EAUEC,aAVF,QAYO,qBAZP;AAaA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,YAA1C;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,4BAA1C;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,UAAT,QAA2B,+CAA3B;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AAGA,OAAOC,MAAP,MAAmB,cAAnB;;AAcA,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAAoB;AAAA;;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,oBACpChC,UAAU,CAAC2B,cAAD,CAD0B;AAAA,MACxDM,KADwD,eACxDA,KADwD;AAAA,MACjDC,QADiD,eACjDA,QADiD;;AAAA,kBAET9B,QAAQ,CAACkB,kBAAD,EAAqB;AAClFa,IAAAA,YAAY,EAAE;AADoE,GAArB,CAFC;AAAA,MAExDC,IAFwD,aAExDA,IAFwD;AAAA,MAElDC,KAFkD,aAElDA,KAFkD;AAAA,MAE3CC,OAF2C,aAE3CA,OAF2C;AAAA,MAEzBC,WAFyB,aAElCC,OAFkC,EAKhE;;;AACA,MAAMC,IAAI,GAAGpB,OAAO,EAApB;;AANgE,kBAOnCtB,QAAQ,CAAC,EAAD,CAP2B;AAAA,MAOzD2C,IAPyD;AAAA,MAOnDC,YAPmD;;AAAA,mBAQlC5C,QAAQ,CAAC,EAAD,CAR0B;AAAA,MAQzD6C,OARyD;AAAA,MAQhDC,UARgD;;AAAA,mBAS7B9C,QAAQ,CAAC,EAAD,CATqB;AAAA,MASzD+C,OATyD;AAAA,MAShDC,eATgD;;AAAA,mBAU1BhD,QAAQ,CAAC,EAAD,CAVkB;AAAA,MAUzDiD,WAVyD;AAAA,MAU5CC,cAV4C;;AAAA,mBAW5BlD,QAAQ,CAAC,EAAD,CAXoB;AAAA,MAWzDmD,cAXyD;AAAA,MAWzCC,SAXyC;;AAAA,qBAY7ChD,WAAW,CAACqB,SAAD,CAZkC;AAAA;AAAA,MAYzD4B,QAZyD;;AAAA,sBAcxCjD,WAAW,CAACsB,cAAD,CAd6B;AAAA;AAAA,MAczD4B,aAdyD;;AAAA,MAexDC,MAfwD,GAe7CrB,KAf6C,CAexDqB,MAfwD;;AAiBhE,MAAIhB,OAAJ,EAAa;AACX,WAAO,MAAC,YAAD;AAAc,MAAA,OAAO,EAAE,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAAA;;AAED,MAAID,KAAJ,EAAW;AACT,WACE,MAAC,YAAD;AAAc,MAAA,OAAO,EAAEA,KAAK,CAACkB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAAA;;AAED,MAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,KAAD,EAAaC,KAAb,EAA+B;AAC9D,QAAIA,KAAK,KAAK,mBAAV,IAAiCA,KAAK,KAAK,mBAA3C,IAAkEA,KAAK,KAAK,qBAA5E,IAAqGA,KAAK,KAAK,oBAAnH,EAAyI,OAAO,KAAP;AAEzI;AAACC,MAAAA,MAAM,CAACC,IAAP,CAAYpD,aAAZ,EAA2BqD,GAA3B,CAA+B,UAACC,WAAD,EAAcC,CAAd,EAA4B;AAC1D,YAAMC,SAAS,GAAG,CAAC1D,SAAS,CAAC2D,SAAX,EAAsB3D,SAAS,CAAC4D,SAAhC,EAA2C5D,SAAS,CAAC6D,WAArD,EAAkE7D,SAAS,CAAC8D,YAA5E,CAAlB;AACA,YAAMC,oBAAoB,GAAGZ,KAAK,CAACK,WAAD,CAAL,IAAsBE,SAAS,CAACM,QAAV,CAAmBb,KAAK,CAACK,WAAD,CAAL,CAAmBJ,KAAnB,CAAnB,CAAnD;;AAEA,YAAIW,oBAAJ,EAA0B;AACxBpB,UAAAA,cAAc,WAAIR,IAAI,CAAC8B,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAE,sBAAN;AAA8BC,YAAAA,cAAc,EAAE;AAA9C,WAAnB,CAAJ,cAAwGhB,KAAK,CAACK,WAAD,CAA7G,EAAd;AACAY,UAAAA,UAAU,CAAC,YAAY;AACrBzB,YAAAA,cAAc,CAAC,EAAD,CAAd;AACD,WAFS,EAEP,IAFO,CAAV;AAGA,iBAAO,IAAP;AACD;AACD,OAXD;AAYD;AACD,WAAO,KAAP;AACA,GAjBD;;AAoBA,MAAM0B,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAClB,KAAD,EAAaC,KAAb,EAA4BkB,KAA5B,EAAqDd,WAArD,EAAoF;AAC/G,QAAIN,wBAAwB,CAACC,KAAD,EAAQC,KAAR,CAA5B,EAA4C;AAE5CxB,IAAAA,QAAQ,CAAC;AAAE2C,MAAAA,IAAI,EAAEf,WAAR;AAAqBgB,MAAAA,OAAO,EAAE;AAAErB,QAAAA,KAAK,EAALA,KAAF;AAASmB,QAAAA,KAAK,EAALA,KAAT;AAAgBlB,QAAAA,KAAK,EAALA;AAAhB;AAA9B,KAAD,CAAR;AAEAqB,IAAAA,mBAAmB,CAACtB,KAAD,EAAQC,KAAR,EAAekB,KAAf,EAAsBd,WAAtB,CAAnB;AAEAb,IAAAA,cAAc,CAAC,+BAAD,CAAd;AACAyB,IAAAA,UAAU,CAAC,YAAY;AACrBzB,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAXD;;AAaA,MAAM+B,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA;;AAC3B5B,IAAAA,QAAQ,CAAC;AACP6B,MAAAA,SAAS,EAAE;AACTT,QAAAA,EAAE,EAAEpC,IAAF,aAAEA,IAAF,wCAAEA,IAAI,CAAE8C,OAAR,kDAAE,cAAeV,EADV;AAET9B,QAAAA,IAAI,EAAJA,IAFS;AAGTI,QAAAA,OAAO,EAAEqC,MAAM,CAACrC,OAAD;AAHN;AADJ,KAAD,CAAR;AAQAG,IAAAA,cAAc,CAAC,+BAAD,CAAd;AACAV,IAAAA,WAAW;AACXmC,IAAAA,UAAU,CAAC,YAAY;AACrBzB,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAdD;;AAgBA,MAAMmC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC3B,KAAD,EAAaK,WAAb,EAAyCuB,QAAzC,EAA8D;AAAA;;AACrF,WAAO5B,KAAK,CAACK,WAAD,CAAL,CAAmBuB,QAAnB,CAAP;AAEAhC,IAAAA,aAAa,CAAC;AACZ4B,MAAAA,SAAS,EAAE;AACTT,QAAAA,EAAE,EAAEpC,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAE8C,OAAR,mDAAE,eAAeV,EADV;AAET1B,QAAAA,OAAO,EAAEW,KAAK,CAACX,OAFN;AAGTwC,QAAAA,KAAK,kCAAO7B,KAAK,CAACK,WAAD,CAAZ;AAA2BA,UAAAA,WAAW,EAAEA;AAAxC;AAHI;AADC,KAAD,CAAb;AAQAb,IAAAA,cAAc,CAAC,+BAAD,CAAd;AACAyB,IAAAA,UAAU,CAAC,YAAY;AACrBzB,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAfD;;AAiBA,MAAMsC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACzB,WAAD,EAAgC;AACxD,WAAO;AACLpB,MAAAA,IAAI,EAAE,EADD;AAEL8C,MAAAA,kBAAkB,EAAE,KAFf;AAGLC,MAAAA,UAAU,EAAE,EAHP;AAILC,MAAAA,UAAU,EAAE,EAJP;AAKLC,MAAAA,IAAI,EAAEtF,UAAU,CAACuF,IALZ;AAMLC,MAAAA,0BAA0B,EAAE,EANvB;AAOLC,MAAAA,4BAA4B,EAAE,EAPzB;AAQLC,MAAAA,4BAA4B,EAAE,EARzB;AASLC,MAAAA,iBAAiB,EAAE,EATd;AAULC,MAAAA,eAAe,EAAE,KAVZ;AAWLC,MAAAA,0BAA0B,EAAE,EAXvB;AAYLC,MAAAA,iBAAiB,EAAE,EAZd;AAaLC,MAAAA,eAAe,EAAE,KAbZ;AAcLC,MAAAA,IAAI,EAAE,EAdD;AAeLC,MAAAA,gBAAgB,EAAE,EAfb;AAgBLxC,MAAAA,WAAW,EAAEA;AAhBR,KAAP;AAkBH,GAnBC;;AAqBA,MAAMiB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACtB,KAAD,EAAa8C,SAAb,EAAgCC,UAAhC,EAA8D1C,WAA9D,EAA6F;AAAA;;AACvH,QAAM2C,iBAAiB,GAAGhD,KAAK,CAACK,WAAD,CAA/B;AACA2C,IAAAA,iBAAiB,CAACF,SAAD,CAAjB,GAA+BC,UAA/B;AACAC,IAAAA,iBAAiB,CAAC3C,WAAlB,GAAgCA,WAAhC;AACAT,IAAAA,aAAa,CAAC;AACZ4B,MAAAA,SAAS,EAAE;AACTT,QAAAA,EAAE,EAAEpC,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAE8C,OAAR,mDAAE,eAAeV,EADV;AAET1B,QAAAA,OAAO,EAAEW,KAAK,CAACX,OAFN;AAGTwC,QAAAA,KAAK,EAAEmB;AAHE;AADC,KAAD,CAAb;AAOD,GAXD;;AAaA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACjD,KAAD,EAAaK,WAAb,EAA4C;AAAA;;AACzET,IAAAA,aAAa,CAAC;AACZ4B,MAAAA,SAAS,EAAE;AACTT,QAAAA,EAAE,EAAEpC,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAE8C,OAAR,mDAAE,eAAeV,EADV;AAET1B,QAAAA,OAAO,EAAEW,KAAK,CAACX,OAFN;AAGTwC,QAAAA,KAAK,EAAEC,iBAAiB,CAACzB,WAAD;AAHf;AADC,KAAD,CAAb;AAOD,GARD,CA/HgE,CA0IhE;;;AACA,MAAM6C,WAAW,GAAG,SAAdA,WAAc,CAClBC,cADkB,EAIf;AAAA,QAFHC,UAEG,uEAFU,EAEV;AAAA,QADHC,SACG,uEADiB,yBACjB;AACH5G,IAAAA,SAAS,CAAC;AACR6G,MAAAA,IAAI,EAAE,IADE;AAERC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,GADD;AAENC,QAAAA,MAAM,EAAE,MAFF;AAGNC,QAAAA,cAAc,EAAE,KAHV;AAINC,QAAAA,eAAe,EAAE,IAJX;AAKNN,QAAAA,SAAS,EAAEA;AALL,OAFA;AASRO,MAAAA,mBAAmB,EAAE,IATb;AAURC,MAAAA,SAAS,EAAEV,cAVH;AAWRW,MAAAA,cAAc,EAAE;AAAEC,QAAAA,IAAI,EAAEX;AAAR;AAXR,KAAD,CAAT;AAaD,GAlBD;;AAoBA,MAAMY,WAAW,GAAG;AAAEC,IAAAA,OAAO,EAAE,iBAAAC,MAAM;AAAA,6CAAUA,MAAV;AAAkBV,QAAAA,KAAK,EAAE,OAAzB;AAAkCW,QAAAA,SAAS,EAAE;AAA7C;AAAA;AAAjB,GAApB;AACA,MAAMC,cAAc,GAAG,CACrB;AAAEjD,IAAAA,KAAK,EAAErE,YAAY,CAACuH,QAAtB;AAAgCC,IAAAA,KAAK,EAAEtF,IAAI,CAAC8B,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,YAAN;AAAoBC,MAAAA,cAAc,EAAE;AAApC,KAAnB;AAAvC,GADqB,EAErB;AAAEG,IAAAA,KAAK,EAAErE,YAAY,CAACyH,QAAtB;AAAgCD,IAAAA,KAAK,EAAEtF,IAAI,CAAC8B,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,iBAAN;AAAyBC,MAAAA,cAAc,EAAE;AAAzC,KAAnB;AAAvC,GAFqB,EAGrB;AAAEG,IAAAA,KAAK,EAAErE,YAAY,CAAC0H,kBAAtB;AAA0CF,IAAAA,KAAK,EAAEtF,IAAI,CAAC8B,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,2BAAN;AAAmCC,MAAAA,cAAc,EAAE;AAAnD,KAAnB;AAAjD,GAHqB,EAIrB;AAAEG,IAAAA,KAAK,EAAErE,YAAY,CAAC2H,KAAtB;AAA6BH,IAAAA,KAAK,EAAEtF,IAAI,CAAC8B,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,eAAN;AAAuBC,MAAAA,cAAc,EAAE;AAAvC,KAAnB;AAApC,GAJqB,EAKrB;AAAEG,IAAAA,KAAK,EAAErE,YAAY,CAAC4H,IAAtB;AAA4BJ,IAAAA,KAAK,EAAEtF,IAAI,CAAC8B,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,mBAAN;AAA2BC,MAAAA,cAAc,EAAE;AAA3C,KAAnB;AAAnC,GALqB,CAAvB;AAQA2D,EAAAA,OAAO,CAACC,GAAR,CAAYnF,cAAZ;AACA,SACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAqB,IAAA,KAAK,EAAE;AAAE+D,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,gBAArB;AAAsC,IAAA,cAAc,EAAC,iBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EAOE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,YADL;AAEE,IAAA,cAAc,EAAC,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAQI,CAAA3D,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEgF,MAAR,IAAiB,CAAjB,IAAuB,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAR3B,EASIhF,MATJ,aASIA,MATJ,uBASIA,MAAM,CAAEO,GAAR,CAAY,UAACJ,KAAD,EAAQM,CAAR,EAAsB;AAAA,QAC1BwE,OAD0B,GACd9E,KADc,CAC1B8E,OAD0B;AAEhC,WACE,MAAC,aAAD;AAAe,MAAA,GAAG,EAAExE,CAAC,GAAG,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,gBAAD;AACE,MAAA,EAAE,EAAC,kBADL;AAEE,MAAA,cAAc,EAAC,kBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADJ,EASI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAE,IAHZ;AAIE,MAAA,KAAK,EAAE,CAAAN,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEf,IAAP,KAAe,EAJxB,CAKE;AALF;AAME,MAAA,QAAQ,EAAE,kBAAC8F,CAAD;AAAA,eAAY7D,oBAAoB,CAAC6D,CAAD,EAAI/E,KAAJ,EAAW,MAAX,EAAmB+E,CAAC,CAACC,MAAF,CAAS7D,KAA5B,EAAmCpE,aAAa,CAACkI,uBAAjD,CAAhC;AAAA,OANZ;AAOE,MAAA,eAAe,EAAC,SAPlB;AAQE,MAAA,KAAK,EAAC,OARR;AASE,MAAA,MAAM,EAAC,QATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATJ,CADF,EAyBI,MAAC,QAAD;AAAU,MAAA,KAAK,EAAE;AAAEC,QAAAA,cAAc,EAAE;AAAlB,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,gBAAD;AACA,MAAA,EAAE,EAAC,aADH;AAEA,MAAA,cAAc,EAAC,aAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADA,CADF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,MAAC,MAAD;AACI,MAAA,QAAQ,EAAE,kBAACH,CAAD;AAAA,eAAY9B,sBAAsB,CAACjD,KAAD,EAAQ+E,CAAC,CAAC5D,KAAV,CAAlC;AAAA,OADd;AAEI,MAAA,KAAK,EAAE1B,cAFX,CAGI;AAHJ;AAII,MAAA,OAAO,EAAE2E,cAJb;AAKI,MAAA,MAAM,EAAEJ,WALZ;AAMI,MAAA,YAAY,EAAE,OANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CATF,CAzBJ,EA8CMc,OA9CN,aA8CMA,OA9CN,uBA8CMA,OAAO,CAAE1E,GAAT,CAAa,UAAC+E,MAAD,EAAsB;AACnCR,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBO,MAAtB;;AACA,cAAQA,MAAM,CAAC9E,WAAf;AACE,aAAKvD,YAAY,CAACyH,QAAlB;AACE;AACA,iBACE,MAAC,kBAAD;AACE,YAAA,GAAG,EAAEjE,CAAC,GAAG,gBADX;AAEE,YAAA,IAAI,EAAE3B,IAFR;AAGE,YAAA,KAAK,EAAEqB,KAHT;AAIE,YAAA,OAAO,EAAEb,OAJX;AAKE,YAAA,UAAU,EAAEC,UALd;AAME,YAAA,WAAW,EAAE+F,MAAM,CAAC9E,WANtB;AAOE,YAAA,oBAAoB,EAAEa,oBAPxB;AAQE,YAAA,gBAAgB,EAAES,gBARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAYF,aAAK7E,YAAY,CAAC2H,KAAlB;AACE;AACA,iBACE,MAAC,kBAAD;AACE,YAAA,GAAG,EAAEnE,CAAC,GAAG,gBADX;AAEE,YAAA,IAAI,EAAE3B,IAFR;AAGE,YAAA,KAAK,EAAEqB,KAHT;AAIE,YAAA,OAAO,EAAEb,OAJX;AAKE,YAAA,UAAU,EAAEC,UALd;AAME,YAAA,WAAW,EAAE+F,MAAM,CAAC9E,WANtB;AAOE,YAAA,oBAAoB,EAAEa,oBAPxB;AAQE,YAAA,gBAAgB,EAAES,gBARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAaF;AACE;AA/BJ;AAiCD,KAnCC,CA9CN,CADF;AAqFD,GAvFD,CATJ,EAmGGpC,WAAW,IACR,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,cAAc,EAAEA,WAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CApGN,CAPF,CADF,EAuHE,MAAC,mBAAD;AAAqB,IAAA,KAAK,EAAE;AAAEiE,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,eADL;AAEE,IAAA,cAAc,EAAC,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAQE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,cAAc,EAAC,mBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,KAAK,EAAEvE,IAHT;AAIE,IAAA,QAAQ,EAAE,kBAAC8F,CAAD;AAAA,aAAO7F,YAAY,CAAC6F,CAAC,CAACC,MAAF,CAAS7D,KAAV,CAAnB;AAAA,KAJZ;AAKE,IAAA,WAAW,EAAEnC,IAAI,CAAC8B,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,wBAAN;AAAgCC,MAAAA,cAAc,EAAE;AAAhD,KAAnB,CALf;AAME,IAAA,eAAe,EAAC,SANlB;AAOE,IAAA,KAAK,EAAC,OAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CARF,EA8BE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,EAAE,EAAC,cADL;AAEE,IAAA,cAAc,EAAC,sBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,KAAK,EAAE3B,OAHT;AAIE,IAAA,QAAQ,EAAE,kBAAC0F,CAAD;AAAA,aAAOzF,eAAe,CAACyF,CAAC,CAACC,MAAF,CAAS7D,KAAV,CAAtB;AAAA,KAJZ;AAKE,IAAA,WAAW,EAAEnC,IAAI,CAAC8B,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE,2BAAN;AAAmCC,MAAAA,cAAc,EAAE;AAAnD,KAAnB,CALf;AAME,IAAA,eAAe,EAAC,SANlB;AAOE,IAAA,KAAK,EAAC,OAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CA9BF,EAoDE,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,aAAlB;AAAgC,IAAA,OAAO,EAAC,WAAxC;AAAoD,IAAA,YAAY,EAAE,GAAlE;AAAuE,IAAA,OAAO,EAAEO,cAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AAAkB,IAAA,EAAE,EAAE,gBAAtB;AAAwC,IAAA,cAAc,EAAC,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CApDF,CAvHF,CADF,CAzKgE,CA6V9D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CApYD;;GAAMjD,U;UAEmD3B,Q,EAI1CiB,O,EAMMlB,W,EAEKA,W;;;KAdpB4B,U;AAsYN,eAAeA,UAAf","sourcesContent":["import React,  { useState, useEffect, useContext } from 'react';\nimport Link from 'next/link';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CommonMode, RelaysIds, SensorsTypes, ISettingsName } from 'utils/constant';\nimport ErrorMessage from 'components/error-message/error-message';\n\nimport {\n  PlantsPageContainer,\n  OrderDetails,\n  BlockTitle,\n  Text,\n  ListItem,\n  ListTitle,\n  ListDes,\n  ButtonText,\n  PlantPageWrapper,\n  PlantsWrapper,\n  PlantsSensorContainer\n} from './your-plants.style';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GET_LOGGED_IN_USER } from 'graphql/query/customer.query';\nimport { Button } from 'components/button/button';\nimport { ADD_PLANT, UPDATE_SETTING } from 'graphql/query/plants.query';\nimport { Input } from 'components/forms/input';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { SuccessMsg } from 'features/user-profile/settings/settings.style';\nimport SoilHumiditySensor from './sensors/SoilHumiditySensor';\nimport LightSensor from './sensors/LightSensor';\nimport { ISetting } from 'utils/types';\nimport Select from 'react-select';\n  \n\ntype YourPlantsProps = {\n  data?: any;\n  index?: Number;\n  Router?: any;\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst YourPlants: React.FC<YourPlantsProps> = ({ deviceType }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const { data, error, loading, refetch: userRefetch } = useQuery(GET_LOGGED_IN_USER, {\n    pollInterval: 5000,\n  });\n  // const router = useRouter();\n  const intl = useIntl();\n  const [name, setPlantName] = useState('');\n  const [openTab, setOpenTab] = useState('');\n  const [plantId, setControllerID] = useState('');\n  const [userinfoMsg, setUserinfoMsg] = useState('');\n  const [sensorSelected, setSensor] = useState('');\n  const [addPlant] = useMutation(ADD_PLANT);\n  \n  const [updateSetting] = useMutation(UPDATE_SETTING);\n  const { plants } = state;\n\n  if (loading) {\n    return <ErrorMessage message={'Cargando...'} />\n  };\n\n  if (error) {\n    return (\n      <ErrorMessage message={error.message} />\n    );\n  };\n\n  const isRelayIdAlreadyAssigend = (plant: any, field: string) => {\n    if (field !== 'relayOneIdRelated' && field !== 'relayTwoIdRelated' && field !== 'relayThreeIdRelated' && field !== 'relayFourIdRelated') return false;\n\n    {Object.keys(ISettingsName).map((settingName, i: number) => {\n      const relaysIds = [RelaysIds.RELAY_ONE, RelaysIds.RELAY_TWO, RelaysIds.RELAY_THIRD, RelaysIds.RELAY_FOURTH];\n      const relayAlreadyAssigned = plant[settingName] && relaysIds.includes(plant[settingName][field]);\n\n      if (relayAlreadyAssigned) {\n        setUserinfoMsg(`${intl.formatMessage({ id: 'relayAlreadyAssinged', defaultMessage: 'Relay already assigned in ' })} ${plant[settingName]}`);\n        setTimeout(function () {\n          setUserinfoMsg('');\n        }, 8000)\n        return true;\n      }\n     })\n   }\n   return false;\n  };\n  \n\n  const handleSettingsChange = (plant: any, field: string, value: string | boolean, settingName: ISettingsName) => {\n    if (isRelayIdAlreadyAssigend(plant, field)) return;\n\n    dispatch({ type: settingName, payload: { plant, value, field } });\n\n    dispatchSettingSave(plant, field, value, settingName);\n\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000)\n  };\n  \n  const handleAddClick = () => {\n    addPlant({\n      variables: {\n        id: data?.getUser?.id,\n        name,\n        plantId: Number(plantId)\n      },\n    });\n\n    setUserinfoMsg('Update user info successfully');\n    userRefetch();\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000)\n  };\n\n  const onDeleteSchedule = (plant: any, settingName: ISettingsName, position: number) => {\n    delete plant[settingName][position];\n    \n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: { ...plant[settingName], settingName: settingName }\n      },\n    });\n\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000)\n  };\n\n  const getDefaultSetting = (settingName: ISettingsName) => { \n    return {\n      name: '',\n      whatsappWarningsOn: false,\n      maxWarning: '',\n      minWarning: '',\n      mode: CommonMode.NONE,\n      relayOneAutomatedTimeToRun: '',\n      relayTwoAutomatedStartedTime: '',\n      relayOneAutomatedStartedTime: '',\n      relayOneIdRelated: '',\n      relayOneWorking: false,\n      relayTwoAutomatedTimeToRun: '',\n      relayTwoIdRelated: '',\n      relayTwoWorking: false,\n      logs: [],\n      scheduledOnTimes: [],\n      settingName: settingName\n    }\n}\n    \n  const dispatchSettingSave = (plant: any, fieldName: string, fieldValue: string | boolean, settingName: ISettingsName) => {\n    const plantSettingInput = plant[settingName];\n    plantSettingInput[fieldName] = fieldValue;\n    plantSettingInput.settingName = settingName;\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: plantSettingInput\n      },\n    });\n  };\n\n  const dispatchNewSettingSave = (plant: any, settingName: ISettingsName) => {\n    updateSetting({\n      variables: {\n        id: data?.getUser?.id,\n        plantId: plant.plantId,\n        input: getDefaultSetting(settingName)\n      },\n    });\n  };\n\n\n  // Add or edit modal\n  const handleModal = (\n    modalComponent: any,\n    modalProps = {},\n    className: string = 'add-time-schedule-modal'\n  ) => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className,\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: { item: modalProps },\n    });\n  };\n\n  const selectStyle = { control: styles => ({ ...styles, width: '197px', textAlign: 'left' }) };\n  const sensorsOptions = [\n    { value: SensorsTypes.DISTANCE, label: intl.formatMessage({ id: 'distanceId', defaultMessage: 'distanceId' }) },\n    { value: SensorsTypes.HUMIDITY, label: intl.formatMessage({ id: 'moistHumidityId', defaultMessage: 'moistHumidityId' }) },\n    { value: SensorsTypes.HUMIDITY_TEMPETURE, label: intl.formatMessage({ id: 'airHumidityAndTempetureId', defaultMessage: 'airHumidityAndTempetureId' }) },\n    { value: SensorsTypes.LIGHT, label: intl.formatMessage({ id: 'lightSensorId', defaultMessage: 'lightSensorId' }) },\n    { value: SensorsTypes.PLUG, label: intl.formatMessage({ id: 'intelligentPlugId', defaultMessage: 'intelligentPlugId' }) },\n];\n\n  console.log(sensorSelected)\n  return (\n    <PlantPageWrapper>\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <Link href=\"/profile\">\n          <a className=\"home-btn\">\n            <FormattedMessage id=\"backProfileBtn\" defaultMessage=\"Back to Profile\" />\n          </a>\n        </Link>\n\n        <OrderDetails>\n          <BlockTitle>\n            <FormattedMessage\n              id=\"yourPlants\"\n              defaultMessage=\"Your Plants\"\n            />\n          </BlockTitle>\n\n          { plants?.length < 1 && (<Text>No tienes plantas registradas</Text>) }\n          { plants?.map((plant, i: number) => {\n            const { sensors } = plant;\n              return (\n                <PlantsWrapper key={i + '-orderList'}>\n                  <ListItem>\n                      <ListTitle>\n                        <Text bold>\n                          <FormattedMessage\n                            id=\"controllerNameId\"\n                            defaultMessage=\"controllerNameId\"\n                          />\n                        </Text>\n                      </ListTitle>\n                      <ListDes>\n                        <Input\n                          type='text'\n                          name='name'\n                          disabled={true}\n                          value={plant?.name || ''}\n                          // we have to change the onChange because the is no one for the controller name actualy\n                          onChange={(e: any) => handleSettingsChange(e, plant, 'name', e.target.value, ISettingsName.SOIL_HUMIDITY_SETTING_1)}\n                          backgroundColor='#F7F7F7'\n                          width='197px'\n                          height='34.5px'\n                        />\n                      </ListDes>\n                    </ListItem>\n\n                    <ListItem style={{ justifyContent: 'flex-start' }}>\n                      <ListTitle>\n                      <Text bold>\n                          <FormattedMessage\n                          id=\"addSensorId\"\n                          defaultMessage=\"addSensorId\"\n                          />\n                      </Text>\n                      </ListTitle>\n                      <ListDes>\n                      <Select \n                          onChange={(e: any) => dispatchNewSettingSave(plant, e.value)}\n                          value={sensorSelected}\n                          // @ts-ignore\n                          options={sensorsOptions}\n                          styles={selectStyle}\n                          menuPosition={'fixed'}\n                      />\n                      </ListDes>\n                    </ListItem>\n\n                    { sensors?.map((sensor: ISetting) => {\n                      console.log('sensor', sensor)\n                      switch (sensor.settingName) {\n                        case SensorsTypes.HUMIDITY:\n                          // check the number of same setting to send\n                          return (\n                            <SoilHumiditySensor \n                              key={i + '-day-container'}\n                              data={data}\n                              plant={plant}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingName={sensor.settingName}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                        case SensorsTypes.LIGHT:\n                          // check the number of same setting to send\n                          return (\n                            <SoilHumiditySensor \n                              key={i + '-day-container'}\n                              data={data}\n                              plant={plant}\n                              openTab={openTab}\n                              setOpenTab={setOpenTab}\n                              settingName={sensor.settingName}\n                              handleSettingsChange={handleSettingsChange}\n                              onDeleteSchedule={onDeleteSchedule} \n                            />\n                          );\n                      \n                        default:\n                          break;\n                      }\n                    })}\n                </PlantsWrapper>\n              )\n            })\n          }\n\n          {userinfoMsg && (\n              <SuccessMsg>\n                <FormattedMessage\n                  id='userInfoSuccess'\n                  defaultMessage={userinfoMsg}\n                />\n              </SuccessMsg>\n          )}\n\n        </OrderDetails>\n      </PlantsPageContainer>\n\n      <PlantsPageContainer style={{ width: '100%' }}>\n        <BlockTitle>\n          <FormattedMessage\n            id=\"addController\"\n            defaultMessage=\"Your Plants\"\n          />\n        </BlockTitle>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantNameField'\n                defaultMessage='Name of the plant'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='text'\n              name='name'\n              value={name}\n              onChange={(e) => setPlantName(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'plantNamePlaceholderId', defaultMessage: 'Balcony plants' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <ListItem>\n          <ListTitle>\n            <Text bold>\n              <FormattedMessage\n                id='plantIdField'\n                defaultMessage='ID of the controller'\n              />\n            </Text>\n          </ListTitle>\n          <ListDes>\n            <Input\n              type='number'\n              name='plantId'\n              value={plantId}\n              onChange={(e) => setControllerID(e.target.value)}\n              placeholder={intl.formatMessage({ id: 'serialNumberPlaceholderId', defaultMessage: 'Look behind Ditto Bot' })}\n              backgroundColor='#F7F7F7'\n              width='197px'\n            />\n          </ListDes>\n        </ListItem>\n\n        <Button className=\"cart-button\" variant=\"secondary\" borderRadius={100} onClick={handleAddClick}>\n          <ButtonText>\n            <FormattedMessage id={\"addPlantButton\"} defaultMessage=\"Add plant\" />\n          </ButtonText>\n        </Button>\n      </PlantsPageContainer>\n    </PlantPageWrapper>\n  );\n    // const renderAirTemperatureSensor = (plant: any, i: any) => {\n  //   return (\n  //     <PlantsSensorContainer>\n  //       <ListItem style={{ justifyContent: 'flex-start' }}>\n  //         <ListTitle>\n  //           <Text bold>\n  //             <FormattedMessage\n  //               id=\"tempSensorId\"\n  //               defaultMessage=\"tempSensorId\"\n  //             />\n  //           </Text>\n  //         </ListTitle>\n  //         <ListDes style={{ marginLeft: '10px' }}>\n  //           <Text>{plant?.tempeture} °</Text>\n  //         </ListDes>\n  //       </ListItem>\n  //     </PlantsSensorContainer>\n  //   )\n  // }\n\n  // const renderAirHumiditySensor = (plant: any, i: any) => {\n  //   return (\n  //     <PlantsSensorContainer>\n  //       <ListItem style={{ justifyContent: 'flex-start' }}>\n  //         <ListTitle>\n  //           <Text bold>\n  //             <FormattedMessage\n  //               id=\"humedadAmbienteSensorId\"\n  //               defaultMessage=\"humedadAmbienteSensorId\"\n  //             />\n  //           </Text>\n  //         </ListTitle>\n  //         <ListDes style={{ marginLeft: '10px' }}>\n  //           <Text>{plant?.airHumidity} %</Text>\n  //         </ListDes>\n  //       </ListItem>\n  //     </PlantsSensorContainer>\n  //   )\n  // }\n};\n\nexport default YourPlants;\n"]},"metadata":{},"sourceType":"module"}