{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { Box, SelectedItem, MenuItem } from './language-switcher.style';\nimport Popover from 'components/popover/popover';\nimport { FormattedMessage } from 'react-intl';\nimport * as flagIcons from 'assets/icons/flags';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { LANGUAGE_MENU } from 'site-settings/site-navigation';\nimport { Arrow } from '../left-menu/left-menu.style';\nimport { MenuDown } from 'assets/icons/MenuDown';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_USER } from 'graphql/mutation/user';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\n\nconst FlagIcon = ({\n  name\n}) => {\n  const TagName = flagIcons[name];\n  return !!TagName ? __jsx(TagName, null) : __jsx(\"p\", null, \"Invalid icon \", name);\n};\n\nconst LanguageMenu = ({\n  onClick\n}) => {\n  return __jsx(React.Fragment, null, LANGUAGE_MENU.map(item => __jsx(MenuItem, {\n    onClick: onClick,\n    key: item.id,\n    value: item.id\n  }, __jsx(\"span\", null, __jsx(FlagIcon, {\n    name: item.icon\n  })), __jsx(FormattedMessage, {\n    id: item.id,\n    defaultMessage: item.defaultMessage\n  }))));\n};\n\nconst LanguageSwitcher = () => {\n  const {\n    locale,\n    changeLanguage\n  } = useLocale();\n  const {\n    authState: {\n      user\n    },\n    authDispatch\n  } = React.useContext(AuthContext);\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const [updateUserMutation] = useMutation(UPDATE_USER);\n\n  const handleSave = async () => {\n    const {\n      name,\n      email,\n      id\n    } = state; // await updateUserMutation({\n    //   variables: {\n    //     id,\n    //      name,\n    //      email\n    //     }\n    // });\n    // setUserinfoMsg('Update user info successfully');\n    // setTimeout(function () {\n    //   setUserinfoMsg('');\n    // }, 8000)\n  };\n\n  const selectedLanguage = LANGUAGE_MENU.find(x => x.id === locale);\n\n  const languageChangeHandler = e => {\n    changeLanguage(e.target.value);\n  };\n\n  return __jsx(Box, null, __jsx(Popover, {\n    className: \"right\",\n    handler: __jsx(SelectedItem, null, __jsx(\"span\", null, __jsx(FormattedMessage, {\n      id: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.id,\n      defaultMessage: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.defaultMessage\n    })), __jsx(Arrow, null, __jsx(MenuDown, null))),\n    content: __jsx(LanguageMenu, {\n      onClick: languageChangeHandler\n    })\n  }));\n};\n\nexport default LanguageSwitcher;\n{\n  /* <MainMenu>\n         <Popover\n           className=\"right\"\n           handler={\n             <SelectedItem>\n               <span>\n                 <Icon>\n                   <CategoryIcon name={activeMenu?.icon} />\n                 </Icon>\n                 <span>\n                   <FormattedMessage\n                     id={activeMenu?.id}\n                     defaultMessage={activeMenu?.defaultMessage}\n                   />\n                 </span>\n               </span>\n               <Arrow>\n                 <MenuDown />\n               </Arrow>\n             </SelectedItem>\n           }\n           content={<CategoryMenu onClick={setActiveMenu} />}\n         />\n       </MainMenu> */\n}","map":null,"metadata":{},"sourceType":"module"}