{"ast":null,"code":"import { useMemo } from 'react';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloClient, HttpLink, ApolloLink, InMemoryCache, concat } from '@apollo/client';\nconst httpLink = new HttpLink({\n  uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  let token = null;\n\n  if (false) {\n    token = localStorage.getItem('access_token');\n  }\n\n  operation.setContext({\n    headers: {\n      'x-access-token': token ? token : ''\n    }\n  });\n  return forward(operation);\n});\nconst client = new ApolloClient({\n  link: authMiddleware.concat(httpLink),\n  cache: new InMemoryCache()\n});\nconsole.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\n\nfunction createApolloClient() {\n  let token = null;\n\n  if (false) {\n    token = localStorage.getItem('access_token');\n  }\n\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials`\n      headers: {\n        'x-access-token': token ? token : ''\n      },\n      // Additional fetch() options like `headers`\n      onError: ({\n        networkError,\n        graphQLErrors\n      }) => {\n        console.log('graphQLErrors', graphQLErrors);\n        console.log('networkError', networkError);\n      }\n    }),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : client; // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n} // import { useMemo } from 'react';\n// import {ApolloClient, ApolloLink, HttpLink, InMemoryCache} from 'apollo-boost';\n// const httpLink = new HttpLink({\n//   uri: 'http://localhost:7000/api', // Server URL (must be absolute)\n//   credentials: 'same-origin', // Additional fetch() options like `credentials`\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log('graphQLErrors', graphQLErrors);\n//     console.log('networkError', networkError);\n//   },\n// });\n// const authLink = new ApolloLink((operation, forward) => {\n//   // Retrieve the authorization token from local storage.\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   // Use the setContext method to set the HTTP headers.\n//   operation.setContext({\n//     headers: {\n//       'x-access-token': token ? token : ''\n//     }\n//   });\n//   // Call the next link in the middleware chain.\n//   return forward(operation);\n// });\n// let apolloClient;\n// function createApolloClient() {\n//   return new ApolloClient({\n//     ssrMode: typeof window === 'undefined',\n//     link: authLink.concat(httpLink),\n//     cache: new InMemoryCache(),\n//   });\n// }\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? createApolloClient();\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === 'undefined') return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n//   return _apolloClient;\n// }\n// export function useApollo(initialState) {\n//   const store = useMemo(() => initializeApollo(initialState), [initialState]);\n//   return store;\n// }","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/Mahdi-Fashion/client/packages/shop/src/utils/apollo.js"],"names":["useMemo","setContext","ApolloClient","HttpLink","ApolloLink","InMemoryCache","concat","httpLink","uri","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","onError","networkError","graphQLErrors","console","log","authMiddleware","operation","forward","token","localStorage","getItem","headers","client","link","cache","createApolloClient","ssrMode","credentials","initializeApollo","initialState","_apolloClient","apolloClient","restore","useApollo","store"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport { setContext } from 'apollo-link-context';\n\nimport {\n  ApolloClient,\n  HttpLink,\n  ApolloLink,\n  InMemoryCache,\n  concat,\n} from '@apollo/client';\n\nconst httpLink = new HttpLink({\n  uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  },\n});\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  let token = null;\n  if (typeof window !== 'undefined') {\n    token = localStorage.getItem('access_token');\n  }\n  operation.setContext({\n    headers: {\n      'x-access-token': token ? token : '',\n    },\n  });\n\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  link: authMiddleware.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconsole.log(process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT);\nfunction createApolloClient() {\n  let token = null;\n  if (typeof window !== 'undefined') {\n    token = localStorage.getItem('access_token');\n  }\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials`\n      headers: {\n        'x-access-token': token ? token : '',\n      }, // Additional fetch() options like `headers`\n      onError: ({ networkError, graphQLErrors }) => {\n        console.log('graphQLErrors', graphQLErrors);\n        console.log('networkError', networkError);\n      },\n    }),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? client;\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n\n\n\n// import { useMemo } from 'react';\n// import {ApolloClient, ApolloLink, HttpLink, InMemoryCache} from 'apollo-boost';\n// const httpLink = new HttpLink({\n//   uri: 'http://localhost:7000/api', // Server URL (must be absolute)\n//   credentials: 'same-origin', // Additional fetch() options like `credentials`\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log('graphQLErrors', graphQLErrors);\n//     console.log('networkError', networkError);\n//   },\n// });\n// const authLink = new ApolloLink((operation, forward) => {\n//   // Retrieve the authorization token from local storage.\n//   let token = null;\n//   if (typeof window !== 'undefined') {\n//     token = localStorage.getItem('access_token');\n//   }\n//   // Use the setContext method to set the HTTP headers.\n//   operation.setContext({\n//     headers: {\n//       'x-access-token': token ? token : ''\n//     }\n//   });\n\n//   // Call the next link in the middleware chain.\n//   return forward(operation);\n// });\n\n// let apolloClient;\n// function createApolloClient() {\n//   return new ApolloClient({\n//     ssrMode: typeof window === 'undefined',\n//     link: authLink.concat(httpLink),\n//     cache: new InMemoryCache(),\n//   });\n// }\n\n// export function initializeApollo(initialState = null) {\n//   const _apolloClient = apolloClient ?? createApolloClient();\n\n//   // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // gets hydrated here\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // For SSG and SSR always create a new Apollo Client\n//   if (typeof window === 'undefined') return _apolloClient;\n//   // Create the Apollo Client once in the client\n//   if (!apolloClient) apolloClient = _apolloClient;\n\n//   return _apolloClient;\n// }\n\n// export function useApollo(initialState) {\n//   const store = useMemo(() => initializeApollo(initialState), [initialState]);\n//   return store;\n// }\n\n\n\n"]},"metadata":{},"sourceType":"module"}