{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/AirHumidityReading.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nconst AirHumidityReading = ({\n  module,\n  plantId\n}) => {\n  var _latestDataFetched, _latestDataFetched$ge, _latestDataFetched$ge2, _latestDataFetched2, _latestDataFetched2$g, _latestDataFetched2$g2, _latestDataFetched3, _latestDataFetched3$g, _latestDataFetched3$g2;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 1000\n  });\n  const plantIndex = (_latestDataFetched = latestDataFetched) === null || _latestDataFetched === void 0 ? void 0 : (_latestDataFetched$ge = _latestDataFetched.getUser) === null || _latestDataFetched$ge === void 0 ? void 0 : (_latestDataFetched$ge2 = _latestDataFetched$ge.plants) === null || _latestDataFetched$ge2 === void 0 ? void 0 : _latestDataFetched$ge2.findIndex(plant => plant.plantId === plantId);\n  const sensorIndex = (_latestDataFetched2 = latestDataFetched) === null || _latestDataFetched2 === void 0 ? void 0 : (_latestDataFetched2$g = _latestDataFetched2.getUser.plants[plantIndex]) === null || _latestDataFetched2$g === void 0 ? void 0 : (_latestDataFetched2$g2 = _latestDataFetched2$g.sensors) === null || _latestDataFetched2$g2 === void 0 ? void 0 : _latestDataFetched2$g2.findIndex(sensor => sensor.settingType === module.settingType);\n  let reading = (_latestDataFetched3 = latestDataFetched) === null || _latestDataFetched3 === void 0 ? void 0 : (_latestDataFetched3$g = _latestDataFetched3.getUser.plants[plantIndex]) === null || _latestDataFetched3$g === void 0 ? void 0 : (_latestDataFetched3$g2 = _latestDataFetched3$g.sensors[sensorIndex]) === null || _latestDataFetched3$g2 === void 0 ? void 0 : _latestDataFetched3$g2.reading;\n  console.log('data?.getUser.plants[plantIndex]?.sensor', data === null || data === void 0 ? void 0 : data.getUser.plants[plantIndex].sensors, module);\n  console.log('plantIndex', plantIndex);\n  console.log('reading', reading);\n  return __jsx(Text, {\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, reading, \" % \\uD83D\\uDCA8\");\n};\n\nexport default AirHumidityReading;","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/sensor-readings/AirHumidityReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","AirHumidityReading","module","plantId","loading","error","data","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","plantIndex","latestDataFetched","getUser","plants","findIndex","plant","sensorIndex","sensors","sensor","settingType","reading","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,yBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAQA,MAAMC,kBAAmC,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA0B;AAAA;;AAClE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACC,2BAAD,EAA8B;AACnEO,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAAzC;AAOE,QAAMC,UAAU,yBAAGC,iBAAH,gFAAG,mBAAmBC,OAAtB,oFAAG,sBAA4BC,MAA/B,2DAAG,uBAAoCC,SAApC,CAA+CC,KAAD,IAAgBA,KAAK,CAACZ,OAAN,KAAkBA,OAAhF,CAAnB;AACA,QAAMa,WAAW,0BAAGL,iBAAH,iFAAG,oBAAmBC,OAAnB,CAA2BC,MAA3B,CAAkCH,UAAlC,CAAH,oFAAG,sBAA+CO,OAAlD,2DAAG,uBAAwDH,SAAxD,CAAmEI,MAAD,IAAiBA,MAAM,CAACC,WAAP,KAAuBjB,MAAM,CAACiB,WAAjH,CAApB;AACA,MAAIC,OAAO,0BAAGT,iBAAH,iFAAG,oBAAmBC,OAAnB,CAA2BC,MAA3B,CAAkCH,UAAlC,CAAH,oFAAG,sBAA+CO,OAA/C,CAAuDD,WAAvD,CAAH,2DAAG,uBAAqEI,OAAnF;AACFC,EAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDhB,IAAxD,aAAwDA,IAAxD,uBAAwDA,IAAI,CAAEM,OAAN,CAAcC,MAAd,CAAqBH,UAArB,EAAiCO,OAAzF,EAAkGf,MAAlG;AACAmB,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BZ,UAA1B;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,OAAvB;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYA,OAAZ,oBADJ;AAGH,CAjBD;;AAmBA,eAAenB,kBAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  module: any;\n  plantId: any;\n  latestDataFetched: any;\n}\n\nconst AirHumidityReading: React.FC<Props> = ({ module, plantId  }) => {\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 1000,\n      });\n      \n\n      const plantIndex = latestDataFetched?.getUser?.plants?.findIndex((plant: any) => plant.plantId === plantId);\n      const sensorIndex = latestDataFetched?.getUser.plants[plantIndex]?.sensors?.findIndex((sensor: any) => sensor.settingType === module.settingType);            \n      let reading = latestDataFetched?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    console.log('data?.getUser.plants[plantIndex]?.sensor', data?.getUser.plants[plantIndex].sensors, module)\n    console.log('plantIndex', plantIndex)\n    console.log('reading', reading)\n    return (\n        <Text bold>{reading} % ðŸ’¨</Text>\n    );\n};\n\nexport default AirHumidityReading;\n"]},"metadata":{},"sourceType":"module"}