{"ast":null,"code":"var _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/layouts/header/menu/language-switcher/language-switcher.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Box, SelectedItem, MenuItem } from './language-switcher.style';\nimport Popover from 'components/popover/popover';\nimport { FormattedMessage } from 'react-intl';\nimport * as flagIcons from 'assets/icons/flags';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { LANGUAGE_MENU } from 'site-settings/site-navigation';\nimport { Arrow } from '../left-menu/left-menu.style';\nimport { MenuDown } from 'assets/icons/MenuDown';\n\nconst FlagIcon = ({\n  name\n}) => {\n  const TagName = flagIcons[name];\n  return !!TagName ? __jsx(TagName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 22\n    }\n  }) : __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 36\n    }\n  }, \"Invalid icon \", name);\n};\n\nconst LanguageMenu = ({\n  onClick\n}) => {\n  return __jsx(React.Fragment, null, LANGUAGE_MENU.map(item => __jsx(MenuItem, {\n    onClick: onClick,\n    key: item.id,\n    value: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, __jsx(FlagIcon, {\n    name: item.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  })), __jsx(FormattedMessage, {\n    id: item.id,\n    defaultMessage: item.defaultMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst LanguageSwitcher = () => {\n  const {\n    locale,\n    changeLanguage\n  } = useLocale();\n  const [updateUserMutation] = useMutation(UPDATE_USER);\n\n  const handleSave = async () => {\n    const {\n      name,\n      email\n    } = state;\n    await updateUserMutation({\n      variables: {\n        id,\n        name,\n        email\n      }\n    });\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000);\n  };\n\n  const selectedLanguage = LANGUAGE_MENU.find(x => x.id === locale);\n\n  const languageChangeHandler = e => {\n    changeLanguage(e.target.value);\n  };\n\n  return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(Popover, {\n    className: \"right\",\n    handler: __jsx(SelectedItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.id,\n      defaultMessage: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.defaultMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    })), __jsx(Arrow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, __jsx(MenuDown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }))),\n    content: __jsx(LanguageMenu, {\n      onClick: languageChangeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 18\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default LanguageSwitcher;\n{\n  /* <MainMenu>\n         <Popover\n           className=\"right\"\n           handler={\n             <SelectedItem>\n               <span>\n                 <Icon>\n                   <CategoryIcon name={activeMenu?.icon} />\n                 </Icon>\n                 <span>\n                   <FormattedMessage\n                     id={activeMenu?.id}\n                     defaultMessage={activeMenu?.defaultMessage}\n                   />\n                 </span>\n               </span>\n               <Arrow>\n                 <MenuDown />\n               </Arrow>\n             </SelectedItem>\n           }\n           content={<CategoryMenu onClick={setActiveMenu} />}\n         />\n       </MainMenu> */\n}","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/layouts/header/menu/language-switcher/language-switcher.tsx"],"names":["React","Box","SelectedItem","MenuItem","Popover","FormattedMessage","flagIcons","useLocale","LANGUAGE_MENU","Arrow","MenuDown","FlagIcon","name","TagName","LanguageMenu","onClick","map","item","id","icon","defaultMessage","LanguageSwitcher","locale","changeLanguage","updateUserMutation","useMutation","UPDATE_USER","handleSave","email","state","variables","setUserinfoMsg","setTimeout","selectedLanguage","find","x","languageChangeHandler","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box, SelectedItem, Flag, MenuItem } from './language-switcher.style';\nimport Popover from 'components/popover/popover';\nimport { FormattedMessage } from 'react-intl';\nimport * as flagIcons from 'assets/icons/flags';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { LANGUAGE_MENU } from 'site-settings/site-navigation';\nimport { Arrow } from '../left-menu/left-menu.style';\nimport { MenuDown } from 'assets/icons/MenuDown';\n\nconst FlagIcon = ({ name }) => {\n  const TagName = flagIcons[name];\n  return !!TagName ? <TagName /> : <p>Invalid icon {name}</p>;\n};\n\nconst LanguageMenu = ({ onClick }) => {\n  return (\n    <>\n      {LANGUAGE_MENU.map((item) => (\n        <MenuItem onClick={onClick} key={item.id} value={item.id}>\n          <span>\n            <FlagIcon name={item.icon} />\n          </span>\n          <FormattedMessage id={item.id} defaultMessage={item.defaultMessage} />\n        </MenuItem>\n      ))}\n    </>\n  );\n};\n\nconst LanguageSwitcher: React.FC<{}> = () => {\n  const { locale, changeLanguage } = useLocale();\n  const [updateUserMutation] = useMutation(UPDATE_USER);\n  \n  const handleSave = async () => {\n    const { name, email } = state;\n    await updateUserMutation({\n      variables: {\n         id,\n         name,\n         email\n        }\n    });\n    setUserinfoMsg('Update user info successfully');\n    setTimeout(function () {\n      setUserinfoMsg('');\n    }, 8000)\n  };\n  \n  const selectedLanguage = LANGUAGE_MENU.find((x) => x.id === locale);\n  const languageChangeHandler = (e) => {\n    changeLanguage(e.target.value);\n  };\n  return (\n    <Box>\n      <Popover\n        className=\"right\"\n        handler={\n          <SelectedItem>\n            {/* <Flag>\n              <FlagIcon name={selectedLanguage?.icon} />\n            </Flag> */}\n            <span>\n              <FormattedMessage\n                id={selectedLanguage?.id}\n                defaultMessage={selectedLanguage?.defaultMessage}\n              />\n            </span>\n            <Arrow>\n              <MenuDown />\n            </Arrow>\n          </SelectedItem>\n        }\n        content={<LanguageMenu onClick={languageChangeHandler} />}\n      />\n    </Box>\n  );\n};\n\nexport default LanguageSwitcher;\n{/* <MainMenu>\n        <Popover\n          className=\"right\"\n          handler={\n            <SelectedItem>\n              <span>\n                <Icon>\n                  <CategoryIcon name={activeMenu?.icon} />\n                </Icon>\n                <span>\n                  <FormattedMessage\n                    id={activeMenu?.id}\n                    defaultMessage={activeMenu?.defaultMessage}\n                  />\n                </span>\n              </span>\n              <Arrow>\n                <MenuDown />\n              </Arrow>\n            </SelectedItem>\n          }\n          content={<CategoryMenu onClick={setActiveMenu} />}\n        />\n      </MainMenu> */}\n"]},"metadata":{},"sourceType":"module"}