{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Col } from 'react-styled-flexboxgrid';\nimport { openModal } from '@redq/reuse-modal';\nimport Router from 'next/router';\nimport RadioCardTWO from 'components/radio-card/radio-card-two';\nimport RadioCard from 'components/radio-card/radio-card';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { DELETE_ADDRESS, SETPRIMARY_ADDRESS } from 'graphql/mutation/address';\nimport { UPDATE_USER } from 'graphql/mutation/user';\nimport { CHANGE_PASSWORD } from 'graphql/mutation/changePassword';\nimport { DELETE_CARD } from 'graphql/mutation/card';\nimport { DELETE_PHONENUMBER, SETPRIMARY_PHONENUMBER } from 'graphql/mutation/phone';\nimport { SettingsForm, SettingsFormContent, HeadingSection, Title, Row, ButtonGroup, Input, SuccessMsg, InputUpper } from './settings.style';\nimport RadioGroupTwo from 'components/radio-group/radio-group-two';\nimport RadioGroupThree from 'components/radio-group/radio-group-three';\nimport UpdateAddressTwo from 'components/address-card/address-card-two';\nimport UpdateContact from 'components/contact-card/contact-card';\nimport { Button } from 'components/button/button';\nimport { UPDATE_ME } from 'graphql/mutation/me';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label } from 'components/forms/label';\n\nvar SettingsContent = function SettingsContent(_ref) {\n  var _state$oldPassword, _state$newPassword, _state$confirmPasswor;\n\n  var deviceType = _ref.deviceType;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(''),\n      userinfoMsg = _useState[0],\n      setUserinfoMsg = _useState[1];\n\n  var _useState2 = useState(''),\n      passwordChangeMsg = _useState2[0],\n      setPasswordChangeMsg = _useState2[1];\n\n  var _React$useContext = React.useContext(AuthContext),\n      isStaff = _React$useContext.authState.isStaff,\n      authDispatch = _React$useContext.authDispatch;\n\n  var _useMutation = useMutation(UPDATE_ME),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateMeMutation = _useMutation2[0];\n\n  var _useMutation3 = useMutation(DELETE_CARD),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      deletePaymentCardMutation = _useMutation4[0];\n\n  var _useMutation5 = useMutation(UPDATE_USER),\n      _useMutation6 = _slicedToArray(_useMutation5, 1),\n      updateUserMutation = _useMutation6[0];\n\n  var _useMutation7 = useMutation(CHANGE_PASSWORD),\n      _useMutation8 = _slicedToArray(_useMutation7, 1),\n      changePasswordMutation = _useMutation8[0];\n\n  var _useMutation9 = useMutation(DELETE_PHONENUMBER),\n      _useMutation10 = _slicedToArray(_useMutation9, 1),\n      deletePhoneNumberMutation = _useMutation10[0];\n\n  var _useMutation11 = useMutation(SETPRIMARY_PHONENUMBER),\n      _useMutation12 = _slicedToArray(_useMutation11, 1),\n      setprimaryPhoneNumberMutation = _useMutation12[0];\n\n  var _useMutation13 = useMutation(SETPRIMARY_ADDRESS),\n      _useMutation14 = _slicedToArray(_useMutation13, 1),\n      setprimaryAddressMutation = _useMutation14[0];\n\n  var _useMutation15 = useMutation(DELETE_ADDRESS),\n      _useMutation16 = _slicedToArray(_useMutation15, 1),\n      deleteAddressMutation = _useMutation16[0];\n\n  var intl = useIntl();\n  var passwordEmptyFields = intl.formatMessage({\n    id: 'passwordEmptyFields',\n    defaultMessage: 'passwordEmptyFields'\n  });\n  var delivery_address = state.delivery_address,\n      card = state.card,\n      name = state.name,\n      email = state.email,\n      id = state.id,\n      phones = state.phones,\n      plants = state.plants,\n      role = state.role;\n\n  var handleChange = function handleChange(e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name;\n    dispatch({\n      type: 'HANDLE_ON_INPUT_CHANGE',\n      payload: {\n        value: value,\n        field: name\n      }\n    });\n  }; // Add or edit modal\n\n\n  var handleModal = function handleModal(modalComponent) {\n    var modalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'add-address-modal';\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  var handleEditDelete = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item, index, type, name) {\n      var modalComponent;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(type === 'edit')) {\n                _context.next = 5;\n                break;\n              }\n\n              modalComponent = name === 'address' ? UpdateAddressTwo : UpdateContact;\n              handleModal(modalComponent, {\n                item: item,\n                id: id\n              });\n              _context.next = 29;\n              break;\n\n            case 5:\n              _context.t0 = name;\n              _context.next = _context.t0 === 'payment' ? 8 : _context.t0 === 'contact' ? 12 : _context.t0 === 'address' ? 20 : 28;\n              break;\n\n            case 8:\n              dispatch({\n                type: 'DELETE_CARD',\n                payload: item.id\n              });\n              _context.next = 11;\n              return deletePaymentCardMutation({\n                variables: {\n                  cardId: JSON.stringify(item.id)\n                }\n              });\n\n            case 11:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 12:\n              if (!(phones.length > 1)) {\n                _context.next = 19;\n                break;\n              }\n\n              dispatch({\n                type: 'DELETE_CONTACT',\n                payload: item.id\n              });\n              _context.next = 16;\n              return deletePhoneNumberMutation({\n                variables: {\n                  id: id,\n                  phoneId: item.id\n                }\n              });\n\n            case 16:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 19:\n              return _context.abrupt(\"return\", null);\n\n            case 20:\n              if (!(delivery_address.length > 1)) {\n                _context.next = 27;\n                break;\n              }\n\n              dispatch({\n                type: 'DELETE_ADDRESS',\n                payload: item.id\n              });\n              _context.next = 24;\n              return deleteAddressMutation({\n                variables: {\n                  id: id,\n                  addressId: item.id\n                }\n              });\n\n            case 24:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 27:\n              return _context.abrupt(\"return\", null);\n\n            case 28:\n              return _context.abrupt(\"return\", false);\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleEditDelete(_x, _x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handlePrimary = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(item, name) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = name;\n              _context2.next = _context2.t0 === 'contact' ? 3 : _context2.t0 === 'address' ? 7 : 11;\n              break;\n\n            case 3:\n              dispatch({\n                type: 'SET_PRIMARY_CONTACT',\n                payload: item.id\n              });\n              _context2.next = 6;\n              return setprimaryPhoneNumberMutation({\n                variables: {\n                  id: id,\n                  phoneId: item.id\n                }\n              });\n\n            case 6:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 7:\n              dispatch({\n                type: 'SET_PRIMARY_ADDRESS',\n                payload: item.id\n              });\n              _context2.next = 10;\n              return setprimaryAddressMutation({\n                variables: {\n                  id: id,\n                  addressId: item.id\n                }\n              });\n\n            case 10:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 11:\n              return _context2.abrupt(\"return\", false);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handlePrimary(_x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleSave = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var name, email;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              name = state.name, email = state.email;\n              _context3.next = 3;\n              return updateUserMutation({\n                variables: {\n                  id: id,\n                  name: name,\n                  email: email\n                }\n              });\n\n            case 3:\n              setUserinfoMsg('Update user info successfully');\n              setTimeout(function () {\n                setUserinfoMsg('');\n              }, 8000);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleSave() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleSavePassord = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var oldPassword, newPassword, confirmPassword, hasEmptyFields;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              oldPassword = state.oldPassword, newPassword = state.newPassword, confirmPassword = state.confirmPassword;\n              hasEmptyFields = !oldPassword || !newPassword || !confirmPassword;\n\n              if (!hasEmptyFields) {\n                _context4.next = 7;\n                break;\n              }\n\n              setPasswordChangeMsg(passwordEmptyFields);\n              return _context4.abrupt(\"return\");\n\n            case 7:\n              setPasswordChangeMsg('');\n\n            case 8:\n              _context4.next = 10;\n              return changePasswordMutation({\n                variables: {\n                  id: id,\n                  old_password: oldPassword,\n                  new_password: newPassword,\n                  confirm_password: confirmPassword\n                }\n              });\n\n            case 10:\n              if (true) {\n                localStorage.removeItem('access_token');\n                authDispatch({\n                  type: 'SIGN_OUT'\n                });\n                Router.push('/');\n              }\n\n              setPasswordChangeMsg('Loadding...');\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleSavePassord() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var hasEmptyFields = ((_state$oldPassword = state.oldPassword) === null || _state$oldPassword === void 0 ? void 0 : _state$oldPassword.length) === 0 || ((_state$newPassword = state.newPassword) === null || _state$newPassword === void 0 ? void 0 : _state$newPassword.length) === 0 || ((_state$confirmPasswor = state.confirmPassword) === null || _state$confirmPasswor === void 0 ? void 0 : _state$confirmPasswor.length) === 0;\n  console.log('isStaff', isStaff);\n  return __jsx(SettingsForm, null, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"profilePageTitle\",\n    defaultMessage: \"Your Profile\"\n  })), isStaff && __jsx(Title, null, \"[\", role, \"]\")), __jsx(Row, {\n    style: {\n      alignItems: 'flex-end',\n      marginBottom: '50px'\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    sm: 5,\n    md: 5,\n    lg: 5\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"profileNameField\",\n    defaultMessage: \"Your Name\"\n  })), __jsx(InputUpper, {\n    type: \"text\",\n    label: \"Name\",\n    name: \"name\",\n    value: name,\n    onChange: handleChange,\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\",\n    marginBottom: \"10px\" // intlInputLabelId=\"profileNameField\"\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 5,\n    md: 5,\n    lg: 5\n  }, __jsx(Label, null, __jsx(FormattedMessage, {\n    id: \"profileEmailField\",\n    defaultMessage: \"Your Email\"\n  })), __jsx(Input, {\n    type: \"email\",\n    name: \"email\",\n    label: \"Email Address\",\n    value: email,\n    onChange: handleChange,\n    backgroundColor: \"#F7F7F7\",\n    marginBottom: \"10px\" // intlInputLabelId=\"profileEmailField\"\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 2\n  }, __jsx(Button, {\n    size: \"big\",\n    style: {\n      width: '100%',\n      marginBottom: '10px'\n    },\n    onClick: handleSave\n  }, __jsx(FormattedMessage, {\n    id: \"profileSaveBtn\",\n    defaultMessage: \"Save\"\n  }))), userinfoMsg && __jsx(SuccessMsg, null, __jsx(FormattedMessage, {\n    id: \"userInfoSuccess\",\n    defaultMessage: userinfoMsg\n  }))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"contactNumberTItle\",\n    defaultMessage: \"Contact Numbers\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroupThree, {\n    items: phones,\n    component: function component(item, index) {\n      return __jsx(RadioCard, {\n        id: index,\n        key: index,\n        title: item.is_primary ? intl.formatMessage({\n          id: 'primaryId',\n          defaultMessage: 'Primary'\n        }) : intl.formatMessage({\n          id: 'secundaryId',\n          defaultMessage: 'Secondary'\n        }),\n        content: item.number,\n        checked: item.is_primary === true,\n        onChange: function onChange() {\n          return handlePrimary(item, 'contact');\n        },\n        name: \"contact\",\n        onEdit: function onEdit() {\n          return handleEditDelete(item, index, 'edit', 'contact');\n        },\n        onDelete: function onDelete() {\n          return handleEditDelete(item, index, 'delete', 'contact');\n        }\n      });\n    },\n    secondaryComponent: __jsx(Button, {\n      size: \"big\",\n      variant: \"outlined\",\n      type: \"button\",\n      className: \"add-button\",\n      onClick: function onClick() {\n        return handleModal(UpdateContact, {\n          item: {},\n          id: id\n        }, 'add-contact-modal');\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"addContactBtn\",\n      defaultMessage: \"Add Contact\"\n    }))\n  }))))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12,\n    style: {\n      position: 'relative'\n    }\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"deliveryAddresTitle\",\n    defaultMessage: \"Delivery Address\"\n  }))), __jsx(ButtonGroup, null, __jsx(RadioGroupTwo, {\n    items: delivery_address,\n    component: function component(item, index) {\n      return __jsx(RadioCardTWO, {\n        id: index,\n        key: index,\n        address: item.address,\n        instructions: item.instructions,\n        location: item.location,\n        title: item.title,\n        name: \"address\",\n        isChecked: item.is_primary === true,\n        onChange: function onChange() {\n          return handlePrimary(item, 'address');\n        },\n        onEdit: function onEdit() {\n          return handleEditDelete(item, index, 'edit', 'address');\n        },\n        onDelete: function onDelete() {\n          return handleEditDelete(item, index, 'delete', 'address');\n        }\n      });\n    },\n    secondaryComponent: __jsx(Button, {\n      size: \"big\",\n      variant: \"outlined\",\n      type: \"button\",\n      className: \"add-button\",\n      onClick: function onClick() {\n        return handleModal(UpdateAddressTwo, {\n          item: {},\n          id: id\n        }, 'add-address-modal');\n      }\n    }, __jsx(FormattedMessage, {\n      id: (delivery_address === null || delivery_address === void 0 ? void 0 : delivery_address.length) === 3 ? \"fullDeliveryAddressesMsg\" : \"addAddressBtn\",\n      defaultMessage: \"Add Address\"\n    }))\n  }))))), __jsx(Row, {\n    style: {\n      alignItems: 'flex-end',\n      marginBottom: '50px'\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 12\n  }, __jsx(SettingsFormContent, null, __jsx(HeadingSection, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"changePasswordTitle\",\n    defaultMessage: \"Change Password\"\n  }))))), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 3\n  }, __jsx(Input, {\n    type: \"password\"\n    /* label='Old Password' */\n    ,\n    placeholder: intl.formatMessage({\n      id: 'oldPasswordId',\n      defaultMessage: 'Old password'\n    }),\n    name: \"oldPassword\",\n    value: state.oldPassword || '',\n    onChange: handleChange,\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\",\n    marginBottom: \"10px\"\n    /* intlInputLabelId=\"profileNameField\" */\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 3\n  }, __jsx(Input, {\n    type: \"password\",\n    label: \"New Password\",\n    placeholder: intl.formatMessage({\n      id: 'newPasswordId',\n      defaultMessage: 'New password'\n    }),\n    name: \"newPassword\",\n    value: state.newPassword || '',\n    onChange: handleChange,\n    backgroundColor: \"#F7F7F7\",\n    height: \"48px\",\n    marginBottom: \"10px\" // intlInputLabelId=\"profileNameField\"\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 3\n  }, __jsx(Input, {\n    type: \"password\",\n    name: \"confirmPassword\",\n    placeholder: intl.formatMessage({\n      id: 'confirmPasswordId',\n      defaultMessage: 'Confirm password'\n    }),\n    value: state.confirmPassword || '',\n    onChange: handleChange,\n    backgroundColor: \"#F7F7F7\",\n    marginBottom: \"10px\" // intlInputLabelId=\"profileEmailField\"\n\n  })), __jsx(Col, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    lg: 3\n  }, passwordChangeMsg === passwordEmptyFields && __jsx(SuccessMsg, null, __jsx(FormattedMessage, {\n    id: \"passwordEmptyFields\",\n    defaultMessage: passwordEmptyFields\n  })), !passwordChangeMsg && __jsx(Button, {\n    size: \"big\",\n    style: {\n      width: '100%',\n      marginBottom: '10px'\n    },\n    onClick: handleSavePassord\n  }, __jsx(FormattedMessage, {\n    id: \"profileSaveBtn\",\n    defaultMessage: \"Save\"\n  })), passwordChangeMsg && __jsx(Button, {\n    size: \"big\",\n    style: {\n      width: '100%'\n    },\n    onClick: handleSavePassord\n  }, __jsx(FormattedMessage, {\n    id: \"profileSaveBtn\",\n    defaultMessage: \"Loading..\"\n  }))))));\n};\n\nexport default SettingsContent;","map":null,"metadata":{},"sourceType":"module"}