{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/HumidityReading.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text } from '../your-plants.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\nvar HumidityReading = function HumidityReading(_ref) {\n  _s();\n\n  var _data$getUser, _data$getUser$plants, _data$getUser$plants$, _data$getUser$plants$2;\n\n  var module = _ref.module,\n      plantId = _ref.plantId;\n\n  var _useQuery = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: \"network-only\",\n    pollInterval: 10000\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var sensorIndex = Number(module === null || module === void 0 ? void 0 : module.settingType[(module === null || module === void 0 ? void 0 : module.settingType.length) - 1]);\n  var plantIndex = data === null || data === void 0 ? void 0 : (_data$getUser = data.getUser) === null || _data$getUser === void 0 ? void 0 : (_data$getUser$plants = _data$getUser.plants) === null || _data$getUser$plants === void 0 ? void 0 : _data$getUser$plants.findIndex(function (plant) {\n    return plant.plantId === module.plantId;\n  });\n  var reading = data === null || data === void 0 ? void 0 : (_data$getUser$plants$ = data.getUser.plants[plantIndex]) === null || _data$getUser$plants$ === void 0 ? void 0 : (_data$getUser$plants$2 = _data$getUser$plants$.sensors[sensorIndex]) === null || _data$getUser$plants$2 === void 0 ? void 0 : _data$getUser$plants$2.reading;\n  console.log('module', module);\n  console.log('plantIndex', plantIndex);\n  console.log('reading', reading); // if (reading > -5 && reading <= 0) reading = 0;\n  // if (reading >= 100 && reading < 110) reading = 100;\n  // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n  // const readingFormatted = (module.reading >= 0 && module.reading <= 110) ? `${module.reading} % ðŸ’§` : 'Disconected';  \n  // console.log(\"module.reading\", module.reading, reading)\n\n  return __jsx(Text, {\n    bold: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"\".concat(module.reading, \" % \\uD83D\\uDCA7\"));\n};\n\n_s(HumidityReading, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = HumidityReading;\nexport default HumidityReading;\n\nvar _c;\n\n$RefreshReg$(_c, \"HumidityReading\");","map":{"version":3,"sources":["/Users/estebanmuruzabal/work/ditto/client/packages/shop/src/features/your-plants/sensors/HumidityReading.tsx"],"names":["React","Text","useQuery","GET_LOGGED_IN_USER_SETTINGS","HumidityReading","module","plantId","notifyOnNetworkStatusChange","fetchPolicy","pollInterval","loading","error","data","sensorIndex","Number","settingType","length","plantIndex","getUser","plants","findIndex","plant","reading","sensors","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAcA,SAA4JC,IAA5J,QAAwR,sBAAxR;AAMA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;;AAOA,IAAMC,eAAgC,GAAG,SAAnCA,eAAmC,OAA0B;AAAA;;AAAA;;AAAA,MAAvBC,MAAuB,QAAvBA,MAAuB;AAAA,MAAfC,OAAe,QAAfA,OAAe;;AAAA,kBAE9BJ,QAAQ,CAACC,2BAAD,EAA8B;AACnEI,IAAAA,2BAA2B,EAAE,IADsC;AAEnEC,IAAAA,WAAW,EAAE,cAFsD;AAGnEC,IAAAA,YAAY,EAAE;AAHqD,GAA9B,CAFsB;AAAA,MAEvDC,OAFuD,aAEvDA,OAFuD;AAAA,MAE9CC,KAF8C,aAE9CA,KAF8C;AAAA,MAEvCC,IAFuC,aAEvCA,IAFuC;;AAS7D,MAAMC,WAAW,GAAGC,MAAM,CAACT,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEU,WAAR,CAAoB,CAAAV,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEU,WAAR,CAAoBC,MAApB,IAA6B,CAAjD,CAAD,CAA1B;AACF,MAAMC,UAAU,GAAGL,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEM,OAAT,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,SAAvB,CAAiC,UAACC,KAAD;AAAA,WAAgBA,KAAK,CAACf,OAAN,KAAkBD,MAAM,CAACC,OAAzC;AAAA,GAAjC,CAAnB;AACA,MAAIgB,OAAO,GAAGV,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEM,OAAN,CAAcC,MAAd,CAAqBF,UAArB,CAAH,oFAAG,sBAAkCM,OAAlC,CAA0CV,WAA1C,CAAH,2DAAG,uBAAwDS,OAAtE;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBpB,MAAtB;AACAmB,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BR,UAA1B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB,EAd+D,CAgB/D;AACA;AAGA;AACA;AACA;;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAejB,MAAM,CAACiB,OAAtB,qBADJ;AAGH,CA1BD;;GAAMlB,e;UAE+BF,Q;;;KAF/BE,e;AA4BN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { SearchBox } from 'components/search-box/search-box';\nimport Router,{ useRouter } from 'next/router';\nimport LineChart from 'components/line-chart/line-chart';\nimport GraphChart from 'components/graph-chart/graph-chart';\nimport { CloseIcon } from 'assets/icons/CloseIcon';\nimport { PencilIcon } from 'assets/icons/PencilIcon';\nimport { Button } from 'components/button/button';\nimport Switch from 'components/switch/switch';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Select from 'react-select';\nimport { Input } from 'components/forms/input';\nimport { SensorsTypes, HumiditySensorMode, WeekDays, fourRelaysOptions, humidityModeOptions, manualModeOptions } from 'utils/constant';\nimport HumidityLogsGraph from '../humidity-logs-graph/humidity-logs-graph';\nimport { PlantsSensorContainer, ListItem, ListTitle, ListDes, InputUpper, WeekContainer, DayContainer, ScheduleTime, TextSpaced, CardButtons, ActionButton, Text, Status, ButtonText, Type, ActionsButtons, Row, ScheduleTimeContainer, WeekContainerModal, ErrorMsg, Porcentage } from '../your-plants.style';\nimport { openModal } from '@redq/reuse-modal';\nimport AddTimeSchedule from 'components/add-time-schedule/add-schedule-card';  \nimport { ISetting } from 'utils/types';\nimport { CheckMark } from 'assets/icons/CheckMark';\nimport { getRelayNameText, getSettingTypeText } from 'utils/sensorUtils';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_LOGGED_IN_USER_SETTINGS } from 'graphql/query/customer.query';\n\ninterface Props {\n  module: any;\n  moduleIndex: any;\n}\n\nconst HumidityReading: React.FC<Props> = ({ module, plantId  }) => {\n\n    const { loading, error, data } = useQuery(GET_LOGGED_IN_USER_SETTINGS, {\n        notifyOnNetworkStatusChange: true,\n        fetchPolicy: \"network-only\",\n        pollInterval: 10000,\n      });\n    \n    \n      const sensorIndex = Number(module?.settingType[module?.settingType.length - 1]);\n    const plantIndex = data?.getUser?.plants?.findIndex((plant: any) => plant.plantId === module.plantId);            \n    let reading = data?.getUser.plants[plantIndex]?.sensors[sensorIndex]?.reading;\n    console.log('module', module)\n    console.log('plantIndex', plantIndex)\n    console.log('reading', reading)\n    \n    // if (reading > -5 && reading <= 0) reading = 0;\n    // if (reading >= 100 && reading < 110) reading = 100;\n\n\n    // const readingFormatted = (reading >= -10 && reading < 0) ? 0 + ' % ðŸ’§' : (reading >= 0 && reading <= 100 && reading) ? reading + ' % ðŸ’§' : 'Disconected';\n    // const readingFormatted = (module.reading >= 0 && module.reading <= 110) ? `${module.reading} % ðŸ’§` : 'Disconected';  \n    // console.log(\"module.reading\", module.reading, reading)\n    return (\n        <Text bold>{`${module.reading} % ðŸ’§`}</Text>\n    );\n};\n\nexport default HumidityReading;\n"]},"metadata":{},"sourceType":"module"}