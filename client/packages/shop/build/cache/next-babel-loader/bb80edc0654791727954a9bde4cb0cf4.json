{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'assets/styles/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL, isLocale } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nconst LanguageContext = React.createContext({});\nexport const LanguageProvider = ({\n  children,\n  messages\n}) => {\n  const [locale, setLocale] = React.useState('en');\n\n  const changeLanguage = newLocale => {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n\n  React.useEffect(() => {\n    const localSetting = Cookie.get('locale');\n\n    if (localSetting && isLocale(localSetting)) {\n      document.documentElement.lang = localSetting;\n      setLocale(localSetting);\n    }\n  }, [locale]);\n  let isRtl = isRTL(locale);\n  return __jsx(LanguageContext.Provider, {\n    value: {\n      locale,\n      changeLanguage,\n      isRtl\n    }\n  }, __jsx(IntlProvider, {\n    locale: locale,\n    messages: messages[locale]\n  }, __jsx(InjectRTL, {\n    lang: locale,\n    dir: isRtl ? 'rtl' : 'ltr'\n  }, __jsx(StyleSheetManager, {\n    stylisPlugins: []\n  }, children))));\n};\nexport const useLocale = () => React.useContext(LanguageContext);","map":null,"metadata":{},"sourceType":"module"}