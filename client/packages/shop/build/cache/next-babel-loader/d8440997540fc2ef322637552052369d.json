{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport MobileDrawer from './mobile-drawer';\nimport { MobileHeaderWrapper, MobileHeaderInnerWrapper, DrawerWrapper, LogoWrapper, SearchWrapper, SearchModalWrapper, SearchModalClose } from './header.style';\nimport Search from 'features/search/search';\nimport LogoImage from 'assets/images/logo.svg';\nimport { SearchIcon } from 'assets/icons/SearchIcon';\nimport { LongArrowLeft } from 'assets/icons/LongArrowLeft';\nimport Logo from 'layouts/logo/logo';\nimport LanguageSwitcher from './menu/language-switcher/language-switcher';\nimport { isCategoryPage } from '../is-home-page';\nimport useDimensions from 'utils/useComponentSize';\nimport { GET_TYPE } from 'graphql/query/type.query';\nimport { useQuery } from '@apollo/react-hooks';\nimport { CATEGORY_MENU_ITEMS } from 'site-settings/site-navigation';\n\nconst SearchModal = () => {\n  const onSubmit = () => {\n    closeModal();\n  };\n\n  return __jsx(SearchModalWrapper, null, __jsx(SearchModalClose, {\n    type: \"submit\",\n    onClick: () => closeModal()\n  }, __jsx(LongArrowLeft, null)), __jsx(Search, {\n    className: \"header-modal-search\",\n    showButtonText: false,\n    onSubmit: onSubmit\n  }));\n};\n\nconst MobileHeader = ({\n  className\n}) => {\n  const {\n    pathname,\n    query\n  } = useRouter();\n  const [mobileHeaderRef, dimensions] = useDimensions();\n  const router = useRouter();\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(GET_TYPE, {\n    variables: {\n      searchText: ''\n    }\n  });\n\n  const handleSearchModal = () => {\n    openModal({\n      show: true,\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'search-modal-mobile',\n        width: '100%',\n        height: '100%'\n      },\n      closeOnClickOutside: false,\n      component: SearchModal,\n      closeComponent: () => __jsx(\"div\", null)\n    });\n  };\n\n  const type = pathname === '/restaurant' ? 'restaurant' : query.type;\n  const isHomePage = isCategoryPage(type);\n  const typeMenu = data.types.items.map(item => {\n    return {\n      id: item.id,\n      href: `/${item.slug}`,\n      defaultMessage: item.name,\n      icon: item.icon,\n      dynamic: true\n    };\n  });\n  const initialMenu = router.asPath == '/' ? typeMenu[0] : typeMenu.find(item => item.href == router.asPath);\n\n  if (initialMenu) {\n    if (localStorage.getItem('myMenu')) {\n      localStorage.removeItem('myMenu');\n    }\n\n    localStorage.setItem('myMenu', JSON.stringify(initialMenu));\n  }\n\n  const [activeMenu, setActiveMenu] = React.useState(initialMenu !== null && initialMenu !== void 0 ? initialMenu : CATEGORY_MENU_ITEMS[0]);\n  return __jsx(MobileHeaderWrapper, null, __jsx(MobileHeaderInnerWrapper, {\n    className: className,\n    ref: mobileHeaderRef\n  }, __jsx(DrawerWrapper, null, __jsx(MobileDrawer, null)), __jsx(LogoWrapper, null, __jsx(Logo, {\n    imageUrl: LogoImage,\n    alt: \"shop logo\",\n    onClick: initialMenu ? initialMenu : JSON.parse(localStorage.getItem('myMenu'))\n  })), __jsx(LanguageSwitcher, null), __jsx(SearchWrapper, {\n    onClick: handleSearchModal,\n    className: \"searchIconWrapper\"\n  }, __jsx(SearchIcon, null))));\n};\n\nexport default MobileHeader;","map":null,"metadata":{},"sourceType":"module"}