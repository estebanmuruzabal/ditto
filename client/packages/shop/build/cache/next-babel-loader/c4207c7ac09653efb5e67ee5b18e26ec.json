{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { Wrapper, Container, Heading, SubHeading, Button, LinkButton, Offer } from './authentication-form.style';\nimport { FormattedMessage } from 'react-intl';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport PhoneInput from 'react-phone-input-2';\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { PHONE_VERIFICATION_MUTATION } from \"../../graphql/mutation/signup\";\nexport default function PhoneVerificationModal() {\n  var _useContext = useContext(AuthContext),\n      authDispatch = _useContext.authDispatch;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      phone = _React$useState2[0],\n      setPhone = _React$useState2[1];\n\n  var toggleSignInForm = function toggleSignInForm() {\n    authDispatch({\n      type: 'SIGNIN'\n    });\n  };\n\n  var toggleOtpForm = function toggleOtpForm() {\n    authDispatch({\n      type: 'OTP_VERIFICATION'\n    });\n  };\n\n  var _useMutation = useMutation(PHONE_VERIFICATION_MUTATION, {\n    onCompleted: function onCompleted(data) {\n      if (true) {\n        localStorage.setItem('phone_number', \"\".concat(phone));\n        toggleOtpForm();\n      }\n    },\n    onError: function onError(error) {\n      setPhone('');\n      console.log(error);\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      phoneVerificationMutation = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  var handlePhoneChange = function handlePhoneChange(value, data, event, formattedValue) {\n    setPhone(value);\n  };\n\n  return __jsx(Wrapper, null, __jsx(Container, {\n    style: {\n      paddingBottom: 30\n    }\n  }, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"phoneVerificationText\",\n    defaultMessage: \"Phone Verification\"\n  })), __jsx(SubHeading, null, __jsx(FormattedMessage, {\n    id: \"sendPhoneVerifyText\",\n    defaultMessage: \"We'll send you a verification code to verify your phone number\"\n  })), __jsx(\"form\", {\n    method: \"post\",\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                _context.next = 3;\n                return phoneVerificationMutation({\n                  variables: {\n                    phone: phone\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  }, __jsx(PhoneInput, {\n    inputProps: {\n      name: 'phone',\n      required: true,\n      autoFocus: true\n    },\n    containerStyle: {\n      textAlign: \"left\"\n    },\n    inputStyle: {\n      backgroundColor: \"#F7F7F7\",\n      height: \"48px\",\n      marginBottom: \"10px\",\n      width: \"100%\"\n    },\n    country: 'bd',\n    value: phone,\n    onChange: handlePhoneChange\n  }), __jsx(Button, {\n    variant: \"primary\",\n    size: \"big\",\n    style: {\n      width: '100%'\n    },\n    type: \"submit\"\n  }, \"Send Code\")), loading && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\"\n    }\n  }, \"Loading...\"), error && __jsx(\"p\", {\n    style: {\n      marginTop: \"15px\",\n      color: \"red\"\n    }\n  }, \"Please try again!\"), __jsx(Offer, {\n    style: {\n      padding: '20px 0'\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"backToSign\",\n    defaultMessage: \"Back to\"\n  }), ' ', __jsx(LinkButton, {\n    onClick: toggleSignInForm\n  }, __jsx(FormattedMessage, {\n    id: \"loginBtnText\",\n    defaultMessage: \"Login\"\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}