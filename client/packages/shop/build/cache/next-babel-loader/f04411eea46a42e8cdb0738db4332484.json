{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { themeGet } from '@styled-system/theme-get';\nimport * as Yup from 'yup';\nimport { closeModal } from '@redq/reuse-modal';\nimport { ErrorMessage, Formik, Form } from 'formik';\nimport { useMutation } from '@apollo/react-hooks';\nimport MaskedInput from 'react-text-mask';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { Button } from 'components/button/button';\nimport { ADD_PHONENUMBER, UPDATE_PHONENUMBER } from 'graphql/mutation/phone';\nimport { FieldWrapper, Heading } from './contact-card.style';\nimport { FormattedMessage } from 'react-intl';\nvar ContactValidationSchema = Yup.object().shape({\n  number: Yup.string().required('Number is required')\n});\n\nvar CreateOrUpdateContact = function CreateOrUpdateContact(_ref) {\n  var item = _ref.item;\n  var ContactItem = item.item;\n  var ID = item.id;\n  var newContactid = null;\n  var initialValues = {\n    id: ContactItem.id || null,\n    type: ContactItem.type || 'secondary',\n    number: ContactItem.number || ''\n  };\n\n  var _useMutation = useMutation(ADD_PHONENUMBER),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addPhoneMutation = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_PHONENUMBER),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updatePhoneMutation = _useMutation4[0];\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var _yield$addPhoneMutati, data, updatePhone;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Object.keys(ContactItem).length === 0)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 3;\n              return addPhoneMutation({\n                variables: {\n                  id: ID,\n                  number: values.number\n                }\n              });\n\n            case 3:\n              _yield$addPhoneMutati = _context.sent;\n              data = _yield$addPhoneMutati.data;\n              newContactid = data.addPhoneNumber.id;\n              values.id = newContactid;\n              dispatch({\n                type: 'ADD_CONTACT',\n                payload: {\n                  values: values\n                }\n              });\n              closeModal();\n              /*if (typeof window !== 'undefined') {\n                window.location.reload(false);\n              }*/\n\n              _context.next = 16;\n              break;\n\n            case 11:\n              _context.next = 13;\n              return updatePhoneMutation({\n                variables: {\n                  id: ID,\n                  phoneId: ContactItem.id ? ContactItem.id : newContactid,\n                  number: values.number\n                }\n              });\n\n            case 13:\n              updatePhone = _context.sent;\n              dispatch({\n                type: 'UPDATE_CONTACT',\n                payload: {\n                  values: values,\n                  id: ContactItem.id ? ContactItem.id : newContactid\n                }\n              });\n              closeModal();\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: ContactValidationSchema\n  }, function (_ref3) {\n    var values = _ref3.values,\n        handleChange = _ref3.handleChange,\n        handleBlur = _ref3.handleBlur;\n    return __jsx(Form, null, __jsx(Heading, null, ContactItem ? __jsx(FormattedMessage, {\n      id: \"editContactId\",\n      defaultMessage: \"\"\n    }) : __jsx(FormattedMessage, {\n      id: \"addNewContactId\",\n      defaultMessage: \"\"\n    })), __jsx(FieldWrapper, null, __jsx(MaskedInput, {\n      mask: [/[0-9]/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/],\n      className: \"form-control\",\n      placeholder: \"Enter a phone number\",\n      guide: false,\n      id: \"my-input-id\",\n      value: values.number,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      name: \"number\",\n      render: function render(ref, props) {\n        return __jsx(StyledInput, _extends({\n          ref: ref\n        }, props));\n      }\n    })), __jsx(ErrorMessage, {\n      name: \"number\",\n      component: StyledError\n    }), __jsx(Button, {\n      type: \"submit\",\n      style: {\n        width: '100%',\n        height: '44px'\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"savedContactId\",\n      defaultMessage: \"Save Contact\"\n    })));\n  });\n};\n\nexport default CreateOrUpdateContact;\nvar StyledInput = styled.input.withConfig({\n  displayName: \"contact-card__StyledInput\",\n  componentId: \"sc-7lusqt-0\"\n})([\"width:100%;height:54px;border-radius:\", \";font-family:\", \";border:1px solid \", \";color:\", \";font-size:16px;line-height:19px;font-weight:\", \";padding:0 18px;box-sizing:border-box;transition:border-color 0.25s ease;&:hover,&:focus{outline:0;}&:focus{border-color:\", \";}&::placeholder{color:\", \";}\"], themeGet('radii.base', '6px'), themeGet('fonts.body', 'Lato, sans-serif'), themeGet('colors.gray.700', '#e6e6e6'), themeGet('colors.text.bold', '#0D1136'), themeGet('fontWeights.regular', '400'), themeGet('colors.primary.regular', '#009e7f'), themeGet('colors.text.regular', '#77798C'));\nvar StyledError = styled.div.withConfig({\n  displayName: \"contact-card__StyledError\",\n  componentId: \"sc-7lusqt-1\"\n})([\"color:red;padding-bottom:10px;margin-top:-5px;\"]);","map":null,"metadata":{},"sourceType":"module"}