{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRef, useCallback, useEffect } from 'react';\nimport { isClient } from './use-is-client';\nexport let ScrollDirections;\n\n(function (ScrollDirections) {\n  ScrollDirections[ScrollDirections[\"Horizontal\"] = 0] = \"Horizontal\";\n  ScrollDirections[ScrollDirections[\"Vertical\"] = 1] = \"Vertical\";\n})(ScrollDirections || (ScrollDirections = {}));\n\nfunction scrollToPercent(el, {\n  container,\n  percentOfElement,\n  offsetPX,\n  direction,\n  percentOfContainer\n}) {\n  const rect = el.current.getClientRects()[0];\n  const isVertical = direction === ScrollDirections.Vertical;\n  const refSize = isVertical ? rect.height : rect.width;\n  const elemScroll = isVertical ? rect.y : rect.x;\n  const scrollSize = container === window ? isVertical ? container.innerHeight : container.innerWidth : isVertical ? container.scrollHeight : container.scrollWidth;\n  let addOffset = refSize * percentOfElement / 100;\n\n  if (offsetPX) {\n    addOffset += offsetPX;\n  }\n\n  const containerScroll = isVertical ? container.scrollY : container.scrollX;\n  const newScroll = containerScroll + elemScroll + (scrollSize * percentOfContainer / 100 + addOffset);\n  const scrollObj = isVertical ? {\n    top: newScroll\n  } : {\n    left: newScroll\n  };\n  window.scrollTo(_objectSpread(_objectSpread({}, scrollObj), {}, {\n    behavior: 'smooth'\n  }));\n}\n\nexport function useRefScroll({\n  percentOfElement = 50,\n  offsetPX = 0,\n  onMount = false,\n  container = isClient ? window : null,\n  percentOfContainer = 50,\n  direction = ScrollDirections.Vertical\n}) {\n  const elRef = useRef(null);\n  const scroll = useCallback(() => {\n    if (elRef.current) {\n      scrollToPercent(elRef, {\n        percentOfElement,\n        offsetPX,\n        container,\n        percentOfContainer,\n        direction\n      });\n    }\n  }, [elRef.current]);\n  useEffect(() => {\n    if (onMount) {\n      scroll();\n    }\n  }, []);\n  return {\n    elRef,\n    scroll\n  };\n} // function MyComponent() {\n//   // using the hook without arguments will scroll the element to the center of the\n//   // window's viewport\n//   // alias elRef to myDiv for easier usage if having multiple elements\n//   // in the same component\n//   const { elRef: myDiv, scroll } = useRefScroller();\n//   return (\n//     <div>\n//       <button onClick={scroll}>Scroll</button>\n//       <div ref={myDiv}>\n//         `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum efficitur, massa vitae consectetur egestas, justo magna\n//         facilisis arcu, non accumsan lacus ipsum sit amet nisl.`\n//       </div>\n//     </div>\n//   );\n// }","map":null,"metadata":{},"sourceType":"module"}