{"version":3,"sources":["../../src/types.ts","../../src/parser.ts","../../src/normalize.ts","../../src/index.ts","../../src/skeleton.ts","../../src/error.ts","../../src/formatters.ts","../../src/core.ts","../../src/utils.ts","../../src/invariant.ts","../../../src/components/injectIntl.tsx","../../../src/components/useIntl.ts"],"names":["SKELETON_TYPE","p","input","charCodeAt","s7","s1","s9","peg$currPos","s12","peg$FAILED","s0","peg$silentFails","s2","s3","matchingLiteralElIndex","literalEl","result","skeleton","type","value","el","IntlMessageFormat"],"mappings":"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","file":"static/js/29.a19dcc6a.chunk.js","sourcesContent":["export var TYPE;\n(function (TYPE) {\n    /**\n     * Raw text\n     */\n    TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n    /**\n     * Variable w/o any format, e.g `var` in `this is a {var}`\n     */\n    TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n    /**\n     * Variable w/ number format\n     */\n    TYPE[TYPE[\"number\"] = 2] = \"number\";\n    /**\n     * Variable w/ date format\n     */\n    TYPE[TYPE[\"date\"] = 3] = \"date\";\n    /**\n     * Variable w/ time format\n     */\n    TYPE[TYPE[\"time\"] = 4] = \"time\";\n    /**\n     * Variable w/ select format\n     */\n    TYPE[TYPE[\"select\"] = 5] = \"select\";\n    /**\n     * Variable w/ plural format\n     */\n    TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n    /**\n     * Only possible within plural argument.\n     * This is the `#` symbol that will be substituted with the count.\n     */\n    TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n    /**\n     * XML-like tag\n     */\n    TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\nexport var SKELETON_TYPE;\n(function (SKELETON_TYPE) {\n    SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n    SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */\nexport function isLiteralElement(el) {\n    return el.type === TYPE.literal;\n}\nexport function isArgumentElement(el) {\n    return el.type === TYPE.argument;\n}\nexport function isNumberElement(el) {\n    return el.type === TYPE.number;\n}\nexport function isDateElement(el) {\n    return el.type === TYPE.date;\n}\nexport function isTimeElement(el) {\n    return el.type === TYPE.time;\n}\nexport function isSelectElement(el) {\n    return el.type === TYPE.select;\n}\nexport function isPluralElement(el) {\n    return el.type === TYPE.plural;\n}\nexport function isPoundElement(el) {\n    return el.type === TYPE.pound;\n}\nexport function isTagElement(el) {\n    return el.type === TYPE.tag;\n}\nexport function isNumberSkeleton(el) {\n    return !!(el && typeof el === 'object' && el.type === 0 /* number */);\n}\nexport function isDateTimeSkeleton(el) {\n    return !!(el && typeof el === 'object' && el.type === 1 /* dateTime */);\n}\nexport function createLiteralElement(value) {\n    return {\n        type: TYPE.literal,\n        value: value,\n    };\n}\nexport function createNumberElement(value, style) {\n    return {\n        type: TYPE.number,\n        value: value,\n        style: style,\n    };\n}\n//# sourceMappingURL=types.js.map","// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\nimport { TYPE, } from './types';\nvar SyntaxError = /** @class */ (function (_super) {\n    __extends(SyntaxError, _super);\n    function SyntaxError(message, expected, found, location) {\n        var _this = _super.call(this) || this;\n        _this.message = message;\n        _this.expected = expected;\n        _this.found = found;\n        _this.location = location;\n        _this.name = \"SyntaxError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(_this, SyntaxError);\n        }\n        return _this;\n    }\n    SyntaxError.buildMessage = function (expected, found) {\n        function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n        }\n        function literalEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\"/g, \"\\\\\\\"\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function classEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\]/g, \"\\\\]\")\n                .replace(/\\^/g, \"\\\\^\")\n                .replace(/-/g, \"\\\\-\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function describeExpectation(expectation) {\n            switch (expectation.type) {\n                case \"literal\":\n                    return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n                case \"class\":\n                    var escapedParts = expectation.parts.map(function (part) {\n                        return Array.isArray(part)\n                            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n                            : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                case \"any\":\n                    return \"any character\";\n                case \"end\":\n                    return \"end of input\";\n                case \"other\":\n                    return expectation.description;\n            }\n        }\n        function describeExpected(expected1) {\n            var descriptions = expected1.map(describeExpectation);\n            var i;\n            var j;\n            descriptions.sort();\n            if (descriptions.length > 0) {\n                for (i = 1, j = 1; i < descriptions.length; i++) {\n                    if (descriptions[i - 1] !== descriptions[i]) {\n                        descriptions[j] = descriptions[i];\n                        j++;\n                    }\n                }\n                descriptions.length = j;\n            }\n            switch (descriptions.length) {\n                case 1:\n                    return descriptions[0];\n                case 2:\n                    return descriptions[0] + \" or \" + descriptions[1];\n                default:\n                    return descriptions.slice(0, -1).join(\", \")\n                        + \", or \"\n                        + descriptions[descriptions.length - 1];\n            }\n        }\n        function describeFound(found1) {\n            return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n        }\n        return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    return SyntaxError;\n}(Error));\nexport { SyntaxError };\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n    var peg$FAILED = {};\n    var peg$startRuleFunctions = { start: peg$parsestart };\n    var peg$startRuleFunction = peg$parsestart;\n    var peg$c0 = function (parts) {\n        return parts.join('');\n    };\n    var peg$c1 = function (messageText) {\n        return __assign({ type: TYPE.literal, value: messageText }, insertLocation());\n    };\n    var peg$c2 = \"#\";\n    var peg$c3 = peg$literalExpectation(\"#\", false);\n    var peg$c4 = function () {\n        return __assign({ type: TYPE.pound }, insertLocation());\n    };\n    var peg$c5 = peg$otherExpectation(\"tagElement\");\n    var peg$c6 = \"<\";\n    var peg$c7 = peg$literalExpectation(\"<\", false);\n    var peg$c8 = \"/>\";\n    var peg$c9 = peg$literalExpectation(\"/>\", false);\n    var peg$c10 = function (value) {\n        return __assign({ type: TYPE.literal, value: value.join('') }, insertLocation());\n    };\n    var peg$c11 = function (open, children, close) {\n        if (open !== close) {\n            error(\"Mismatch tag \\\"\" + open + \"\\\" !== \\\"\" + close + \"\\\"\", location());\n        }\n        return __assign({ type: TYPE.tag, value: open, children: children }, insertLocation());\n    };\n    var peg$c12 = function () { messageCtx.push('openingTag'); return true; };\n    var peg$c13 = \">\";\n    var peg$c14 = peg$literalExpectation(\">\", false);\n    var peg$c15 = function (tag) { messageCtx.pop(); return true; };\n    var peg$c16 = function (tag) {\n        return tag;\n    };\n    var peg$c17 = \"</\";\n    var peg$c18 = peg$literalExpectation(\"</\", false);\n    var peg$c19 = function () { messageCtx.push('closingTag'); return true; };\n    var peg$c20 = peg$otherExpectation(\"argumentElement\");\n    var peg$c21 = \"{\";\n    var peg$c22 = peg$literalExpectation(\"{\", false);\n    var peg$c23 = \"}\";\n    var peg$c24 = peg$literalExpectation(\"}\", false);\n    var peg$c25 = function (value) {\n        return __assign({ type: TYPE.argument, value: value }, insertLocation());\n    };\n    var peg$c26 = peg$otherExpectation(\"numberSkeletonId\");\n    var peg$c27 = /^['\\/{}]/;\n    var peg$c28 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n    var peg$c29 = peg$anyExpectation();\n    var peg$c30 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n    var peg$c31 = \"/\";\n    var peg$c32 = peg$literalExpectation(\"/\", false);\n    var peg$c33 = function (option) { return option; };\n    var peg$c34 = peg$otherExpectation(\"numberSkeletonToken\");\n    var peg$c35 = function (stem, options) {\n        return { stem: stem, options: options };\n    };\n    var peg$c36 = function (tokens) {\n        return __assign({ type: 0 /* number */, tokens: tokens }, insertLocation());\n    };\n    var peg$c37 = \"::\";\n    var peg$c38 = peg$literalExpectation(\"::\", false);\n    var peg$c39 = function (skeleton) { return skeleton; };\n    var peg$c40 = function () { messageCtx.push('numberArgStyle'); return true; };\n    var peg$c41 = function (style) {\n        messageCtx.pop();\n        return style.replace(/\\s*$/, '');\n    };\n    var peg$c42 = \",\";\n    var peg$c43 = peg$literalExpectation(\",\", false);\n    var peg$c44 = \"number\";\n    var peg$c45 = peg$literalExpectation(\"number\", false);\n    var peg$c46 = function (value, type, style) {\n        return __assign({ type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time, style: style && style[2], value: value }, insertLocation());\n    };\n    var peg$c47 = \"'\";\n    var peg$c48 = peg$literalExpectation(\"'\", false);\n    var peg$c49 = /^[^']/;\n    var peg$c50 = peg$classExpectation([\"'\"], true, false);\n    var peg$c51 = /^[^a-zA-Z'{}]/;\n    var peg$c52 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n    var peg$c53 = /^[a-zA-Z]/;\n    var peg$c54 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n    var peg$c55 = function (pattern) {\n        return __assign({ type: 1 /* dateTime */, pattern: pattern }, insertLocation());\n    };\n    var peg$c56 = function () { messageCtx.push('dateOrTimeArgStyle'); return true; };\n    var peg$c57 = \"date\";\n    var peg$c58 = peg$literalExpectation(\"date\", false);\n    var peg$c59 = \"time\";\n    var peg$c60 = peg$literalExpectation(\"time\", false);\n    var peg$c61 = \"plural\";\n    var peg$c62 = peg$literalExpectation(\"plural\", false);\n    var peg$c63 = \"selectordinal\";\n    var peg$c64 = peg$literalExpectation(\"selectordinal\", false);\n    var peg$c65 = \"offset:\";\n    var peg$c66 = peg$literalExpectation(\"offset:\", false);\n    var peg$c67 = function (value, pluralType, offset, options) {\n        return __assign({ type: TYPE.plural, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in plural element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c68 = \"select\";\n    var peg$c69 = peg$literalExpectation(\"select\", false);\n    var peg$c70 = function (value, options) {\n        return __assign({ type: TYPE.select, value: value, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in select element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c71 = \"=\";\n    var peg$c72 = peg$literalExpectation(\"=\", false);\n    var peg$c73 = function (id) { messageCtx.push('select'); return true; };\n    var peg$c74 = function (id, value) {\n        messageCtx.pop();\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c75 = function (id) { messageCtx.push('plural'); return true; };\n    var peg$c76 = function (id, value) {\n        messageCtx.pop();\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c77 = peg$otherExpectation(\"whitespace\");\n    var peg$c78 = /^[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n    var peg$c79 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\xA0\", \"\\u1680\", [\"\\u2000\", \"\\u200A\"], \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\"], false, false);\n    var peg$c80 = peg$otherExpectation(\"syntax pattern\");\n    var peg$c81 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n    var peg$c82 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n    var peg$c83 = peg$otherExpectation(\"optional whitespace\");\n    var peg$c84 = peg$otherExpectation(\"number\");\n    var peg$c85 = \"-\";\n    var peg$c86 = peg$literalExpectation(\"-\", false);\n    var peg$c87 = function (negative, num) {\n        return num\n            ? negative\n                ? -num\n                : num\n            : 0;\n    };\n    var peg$c88 = peg$otherExpectation(\"apostrophe\");\n    var peg$c89 = peg$otherExpectation(\"double apostrophes\");\n    var peg$c90 = \"''\";\n    var peg$c91 = peg$literalExpectation(\"''\", false);\n    var peg$c92 = function () { return \"'\"; };\n    var peg$c93 = function (escapedChar, quotedChars) {\n        return escapedChar + quotedChars.replace(\"''\", \"'\");\n    };\n    var peg$c94 = function (x) {\n        return ((ignoreTag() || x !== '<') &&\n            x !== '{' &&\n            !(isInPluralOption() && x === '#') &&\n            !(isNestedMessageText() && x === '}') &&\n            !(!ignoreTag() && isNestedMessageText() && x === '>'));\n    };\n    var peg$c95 = \"\\n\";\n    var peg$c96 = peg$literalExpectation(\"\\n\", false);\n    var peg$c97 = function (x) {\n        return x === '<' || x === '>' || x === '{' || x === '}' || (isInPluralOption() && x === '#');\n    };\n    var peg$c98 = peg$otherExpectation(\"argNameOrNumber\");\n    var peg$c99 = peg$otherExpectation(\"validTag\");\n    var peg$c100 = peg$otherExpectation(\"argNumber\");\n    var peg$c101 = \"0\";\n    var peg$c102 = peg$literalExpectation(\"0\", false);\n    var peg$c103 = function () { return 0; };\n    var peg$c104 = /^[1-9]/;\n    var peg$c105 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n    var peg$c106 = /^[0-9]/;\n    var peg$c107 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$c108 = function (digits) {\n        return parseInt(digits.join(''), 10);\n    };\n    var peg$c109 = peg$otherExpectation(\"argName\");\n    var peg$c110 = peg$otherExpectation(\"tagName\");\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n    var peg$result;\n    if (options.startRule !== undefined) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n    function expected(description, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n    }\n    function error(message, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location1);\n    }\n    function peg$literalExpectation(text1, ignoreCase) {\n        return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n    }\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n    function peg$anyExpectation() {\n        return { type: \"any\" };\n    }\n    function peg$endExpectation() {\n        return { type: \"end\" };\n    }\n    function peg$otherExpectation(description) {\n        return { type: \"other\", description: description };\n    }\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n            return details;\n        }\n        else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column\n            };\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                }\n                else {\n                    details.column++;\n                }\n                p++;\n            }\n            peg$posDetailsCache[pos] = details;\n            return details;\n        }\n    }\n    function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column\n            }\n        };\n    }\n    function peg$fail(expected1) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected1);\n    }\n    function peg$buildSimpleError(message, location1) {\n        return new SyntaxError(message, [], \"\", location1);\n    }\n    function peg$buildStructuredError(expected1, found, location1) {\n        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n    }\n    function peg$parsestart() {\n        var s0;\n        s0 = peg$parsemessage();\n        return s0;\n    }\n    function peg$parsemessage() {\n        var s0, s1;\n        s0 = [];\n        s1 = peg$parsemessageElement();\n        while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$parsemessageElement();\n        }\n        return s0;\n    }\n    function peg$parsemessageElement() {\n        var s0;\n        s0 = peg$parseliteralElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargumentElement();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsesimpleFormatElement();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsepluralElement();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseselectElement();\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$parsetagElement();\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$parsepoundElement();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return s0;\n    }\n    function peg$parsemessageText() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsedoubleApostrophes();\n        if (s2 === peg$FAILED) {\n            s2 = peg$parsequotedString();\n            if (s2 === peg$FAILED) {\n                s2 = peg$parseunquotedString();\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsedoubleApostrophes();\n                if (s2 === peg$FAILED) {\n                    s2 = peg$parsequotedString();\n                    if (s2 === peg$FAILED) {\n                        s2 = peg$parseunquotedString();\n                    }\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c0(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parseliteralElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        s1 = peg$parsemessageText();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsepoundElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 35) {\n            s1 = peg$c2;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c3);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c4();\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsetagElement() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s2 = peg$c6;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsevalidTag();\n            if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c8) {\n                        s5 = peg$c8;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c9);\n                        }\n                    }\n                    if (s5 !== peg$FAILED) {\n                        s2 = [s2, s3, s4, s5];\n                        s1 = s2;\n                    }\n                    else {\n                        peg$currPos = s1;\n                        s1 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c10(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseopeningTag();\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessage();\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$parseclosingTag();\n                    if (s3 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c11(s1, s2, s3);\n                        s0 = s1;\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c5);\n            }\n        }\n        return s0;\n    }\n    function peg$parseopeningTag() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s1 = peg$c6;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s2 = peg$c12();\n            if (s2) {\n                s2 = undefined;\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parsevalidTag();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 62) {\n                        s4 = peg$c13;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c14);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c15(s3);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c16(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseclosingTag() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c17) {\n            s1 = peg$c17;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c18);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s2 = peg$c19();\n            if (s2) {\n                s2 = undefined;\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parsevalidTag();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 62) {\n                        s4 = peg$c13;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c14);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c15(s3);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c16(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseargumentElement() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c25(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonId() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n        if (s4 === peg$FAILED) {\n            if (peg$c27.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c28);\n                }\n            }\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c29);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsewhiteSpace();\n                if (s4 === peg$FAILED) {\n                    if (peg$c27.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c28);\n                        }\n                    }\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c29);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c26);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonTokenOption() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 47) {\n            s1 = peg$c31;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c32);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c33(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c30);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonToken() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$parsenumberSkeletonTokenOption();\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsenumberSkeletonTokenOption();\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c35(s2, s3);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c34);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeleton() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsenumberSkeletonToken();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsenumberSkeletonToken();\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c36(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsenumberArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c37) {\n            s1 = peg$c37;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c38);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c39(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            peg$savedPos = peg$currPos;\n            s1 = peg$c40();\n            if (s1) {\n                s1 = undefined;\n            }\n            else {\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessageText();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c41(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c42;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c43);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c44) {\n                                    s7 = peg$c44;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c45);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c42;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c43);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsenumberArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c23;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c24);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c46(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonLiteral() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c47;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c48);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsedoubleApostrophes();\n            if (s3 === peg$FAILED) {\n                if (peg$c49.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c50);\n                    }\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parsedoubleApostrophes();\n                    if (s3 === peg$FAILED) {\n                        if (peg$c49.test(input.charAt(peg$currPos))) {\n                            s3 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c50);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c47;\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c48);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s1 = [s1, s2, s3];\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = [];\n            s1 = peg$parsedoubleApostrophes();\n            if (s1 === peg$FAILED) {\n                if (peg$c51.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c52);\n                    }\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                while (s1 !== peg$FAILED) {\n                    s0.push(s1);\n                    s1 = peg$parsedoubleApostrophes();\n                    if (s1 === peg$FAILED) {\n                        if (peg$c51.test(input.charAt(peg$currPos))) {\n                            s1 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c52);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonPattern() {\n        var s0, s1;\n        s0 = [];\n        if (peg$c53.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c54);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            while (s1 !== peg$FAILED) {\n                s0.push(s1);\n                if (peg$c53.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c54);\n                    }\n                }\n            }\n        }\n        else {\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeleton() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsedateTimeSkeletonLiteral();\n        if (s3 === peg$FAILED) {\n            s3 = peg$parsedateTimeSkeletonPattern();\n        }\n        if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsedateTimeSkeletonLiteral();\n                if (s3 === peg$FAILED) {\n                    s3 = peg$parsedateTimeSkeletonPattern();\n                }\n            }\n        }\n        else {\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            s1 = input.substring(s1, peg$currPos);\n        }\n        else {\n            s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c55(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsedateOrTimeArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c37) {\n            s1 = peg$c37;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c38);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsedateTimeSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c39(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            peg$savedPos = peg$currPos;\n            s1 = peg$c56();\n            if (s1) {\n                s1 = undefined;\n            }\n            else {\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessageText();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c41(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateOrTimeFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c42;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c43);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 4) === peg$c57) {\n                                    s7 = peg$c57;\n                                    peg$currPos += 4;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c58);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4) === peg$c59) {\n                                        s7 = peg$c59;\n                                        peg$currPos += 4;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c60);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c42;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c43);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsedateOrTimeArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c23;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c24);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c46(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsesimpleFormatElement() {\n        var s0;\n        s0 = peg$parsenumberFormatElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parsedateOrTimeFormatElement();\n        }\n        return s0;\n    }\n    function peg$parsepluralElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c42;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c43);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c61) {\n                                    s7 = peg$c61;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c62);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 13) === peg$c63) {\n                                        s7 = peg$c63;\n                                        peg$currPos += 13;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c64);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c42;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c43);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = peg$currPos;\n                                                if (input.substr(peg$currPos, 7) === peg$c65) {\n                                                    s12 = peg$c65;\n                                                    peg$currPos += 7;\n                                                }\n                                                else {\n                                                    s12 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c66);\n                                                    }\n                                                }\n                                                if (s12 !== peg$FAILED) {\n                                                    s13 = peg$parse_();\n                                                    if (s13 !== peg$FAILED) {\n                                                        s14 = peg$parsenumber();\n                                                        if (s14 !== peg$FAILED) {\n                                                            s12 = [s12, s13, s14];\n                                                            s11 = s12;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s11;\n                                                            s11 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s11;\n                                                        s11 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s11;\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 === peg$FAILED) {\n                                                    s11 = null;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        s13 = [];\n                                                        s14 = peg$parsepluralOption();\n                                                        if (s14 !== peg$FAILED) {\n                                                            while (s14 !== peg$FAILED) {\n                                                                s13.push(s14);\n                                                                s14 = peg$parsepluralOption();\n                                                            }\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            s14 = peg$parse_();\n                                                            if (s14 !== peg$FAILED) {\n                                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                                    s15 = peg$c23;\n                                                                    peg$currPos++;\n                                                                }\n                                                                else {\n                                                                    s15 = peg$FAILED;\n                                                                    if (peg$silentFails === 0) {\n                                                                        peg$fail(peg$c24);\n                                                                    }\n                                                                }\n                                                                if (s15 !== peg$FAILED) {\n                                                                    peg$savedPos = s0;\n                                                                    s1 = peg$c67(s3, s7, s11, s13);\n                                                                    s0 = s1;\n                                                                }\n                                                                else {\n                                                                    peg$currPos = s0;\n                                                                    s0 = peg$FAILED;\n                                                                }\n                                                            }\n                                                            else {\n                                                                peg$currPos = s0;\n                                                                s0 = peg$FAILED;\n                                                            }\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseselectElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c42;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c43);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c68) {\n                                    s7 = peg$c68;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c69);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c42;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c43);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = [];\n                                                s12 = peg$parseselectOption();\n                                                if (s12 !== peg$FAILED) {\n                                                    while (s12 !== peg$FAILED) {\n                                                        s11.push(s12);\n                                                        s12 = peg$parseselectOption();\n                                                    }\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        if (input.charCodeAt(peg$currPos) === 125) {\n                                                            s13 = peg$c23;\n                                                            peg$currPos++;\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                            if (peg$silentFails === 0) {\n                                                                peg$fail(peg$c24);\n                                                            }\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c70(s3, s11);\n                                                            s0 = s1;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralRuleSelectValue() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c71;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c72);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumber();\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargName();\n        }\n        return s0;\n    }\n    function peg$parseselectOption() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargName();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c21;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c22);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c73(s2);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parsemessage();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                    s7 = peg$c23;\n                                    peg$currPos++;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c24);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c74(s2, s6);\n                                    s0 = s1;\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralOption() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsepluralRuleSelectValue();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c21;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c22);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c75(s2);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parsemessage();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                    s7 = peg$c23;\n                                    peg$currPos++;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c24);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c76(s2, s6);\n                                    s0 = s1;\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsewhiteSpace() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c78.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c79);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c77);\n            }\n        }\n        return s0;\n    }\n    function peg$parsepatternSyntax() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c81.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c82);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c80);\n            }\n        }\n        return s0;\n    }\n    function peg$parse_() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhiteSpace();\n        while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsewhiteSpace();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c83);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumber() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c85;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c86);\n            }\n        }\n        if (s1 === peg$FAILED) {\n            s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargNumber();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c87(s1, s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c84);\n            }\n        }\n        return s0;\n    }\n    function peg$parseapostrophe() {\n        var s0, s1;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s0 = peg$c47;\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c48);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c88);\n            }\n        }\n        return s0;\n    }\n    function peg$parsedoubleApostrophes() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c90) {\n            s1 = peg$c90;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c91);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c92();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c89);\n            }\n        }\n        return s0;\n    }\n    function peg$parsequotedString() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c47;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c48);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseescapedChar();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = [];\n                if (input.substr(peg$currPos, 2) === peg$c90) {\n                    s5 = peg$c90;\n                    peg$currPos += 2;\n                }\n                else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c91);\n                    }\n                }\n                if (s5 === peg$FAILED) {\n                    if (peg$c49.test(input.charAt(peg$currPos))) {\n                        s5 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c50);\n                        }\n                    }\n                }\n                while (s5 !== peg$FAILED) {\n                    s4.push(s5);\n                    if (input.substr(peg$currPos, 2) === peg$c90) {\n                        s5 = peg$c90;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c91);\n                        }\n                    }\n                    if (s5 === peg$FAILED) {\n                        if (peg$c49.test(input.charAt(peg$currPos))) {\n                            s5 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c50);\n                            }\n                        }\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s3 = input.substring(s3, peg$currPos);\n                }\n                else {\n                    s3 = s4;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s4 = peg$c47;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c48);\n                        }\n                    }\n                    if (s4 === peg$FAILED) {\n                        s4 = null;\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c93(s2, s3);\n                        s0 = s1;\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseunquotedString() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s3 = peg$c94(s2);\n            if (s3) {\n                s3 = undefined;\n            }\n            else {\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 10) {\n                s1 = peg$c95;\n                peg$currPos++;\n            }\n            else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c96);\n                }\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseescapedChar() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s3 = peg$c97(s2);\n            if (s3) {\n                s3 = undefined;\n            }\n            else {\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseargNameOrNumber() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseargNumber();\n        if (s1 === peg$FAILED) {\n            s1 = peg$parseargName();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c98);\n            }\n        }\n        return s0;\n    }\n    function peg$parsevalidTag() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseargNumber();\n        if (s1 === peg$FAILED) {\n            s1 = peg$parsetagName();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c99);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargNumber() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 48) {\n            s1 = peg$c101;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c102);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c103();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            if (peg$c104.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c105);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                if (peg$c106.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c107);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$c106.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c107);\n                        }\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s2 = [s2, s3];\n                    s1 = s2;\n                }\n                else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c108(s1);\n            }\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c100);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargName() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n        if (s4 === peg$FAILED) {\n            s4 = peg$parsepatternSyntax();\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c29);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsewhiteSpace();\n                if (s4 === peg$FAILED) {\n                    s4 = peg$parsepatternSyntax();\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c29);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c109);\n            }\n        }\n        return s0;\n    }\n    function peg$parsetagName() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (input.charCodeAt(peg$currPos) === 45) {\n            s2 = peg$c85;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c86);\n            }\n        }\n        if (s2 === peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = peg$currPos;\n            peg$silentFails++;\n            s4 = peg$parsewhiteSpace();\n            if (s4 === peg$FAILED) {\n                s4 = peg$parsepatternSyntax();\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n                s3 = undefined;\n            }\n            else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c29);\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s3 = [s3, s4];\n                    s2 = s3;\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                if (input.charCodeAt(peg$currPos) === 45) {\n                    s2 = peg$c85;\n                    peg$currPos++;\n                }\n                else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c86);\n                    }\n                }\n                if (s2 === peg$FAILED) {\n                    s2 = peg$currPos;\n                    s3 = peg$currPos;\n                    peg$silentFails++;\n                    s4 = peg$parsewhiteSpace();\n                    if (s4 === peg$FAILED) {\n                        s4 = peg$parsepatternSyntax();\n                    }\n                    peg$silentFails--;\n                    if (s4 === peg$FAILED) {\n                        s3 = undefined;\n                    }\n                    else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 !== peg$FAILED) {\n                        if (input.length > peg$currPos) {\n                            s4 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c29);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            s3 = [s3, s4];\n                            s2 = s3;\n                        }\n                        else {\n                            peg$currPos = s2;\n                            s2 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c110);\n            }\n        }\n        return s0;\n    }\n    var messageCtx = ['root'];\n    function isNestedMessageText() {\n        return messageCtx.length > 1;\n    }\n    function isInPluralOption() {\n        return messageCtx[messageCtx.length - 1] === 'plural';\n    }\n    function insertLocation() {\n        return options && options.captureLocation ? {\n            location: location()\n        } : {};\n    }\n    function ignoreTag() {\n        return options && options.ignoreTag;\n    }\n    peg$result = peg$startRuleFunction();\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    }\n    else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n}\nexport var pegParse = peg$parse;\n//# sourceMappingURL=parser.js.map","var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { isPluralElement, isLiteralElement, isSelectElement, } from './types';\nimport { pegParse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\nexport function normalizeHashtagInPlural(els) {\n    els.forEach(function (el) {\n        // If we're encountering a plural el\n        if (!isPluralElement(el) && !isSelectElement(el)) {\n            return;\n        }\n        // Go down the options and search for # in any literal element\n        Object.keys(el.options).forEach(function (id) {\n            var _a;\n            var opt = el.options[id];\n            // If we got a match, we have to split this\n            // and inject a NumberElement in the middle\n            var matchingLiteralElIndex = -1;\n            var literalEl = undefined;\n            for (var i = 0; i < opt.value.length; i++) {\n                var el_1 = opt.value[i];\n                if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n                    matchingLiteralElIndex = i;\n                    literalEl = el_1;\n                    break;\n                }\n            }\n            if (literalEl) {\n                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n                var newEls = pegParse(newValue);\n                (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\n            }\n            normalizeHashtagInPlural(opt.value);\n        });\n    });\n}\n//# sourceMappingURL=normalize.js.map","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nimport IntlMessageFormat from './core';\nexport * from './formatters';\nexport * from './core';\nexport * from './error';\nexport default IntlMessageFormat;\n//# sourceMappingURL=index.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nexport function parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\n        var len = match.length;\n        switch (match[0]) {\n            // Era\n            case 'G':\n                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n                break;\n            // Year\n            case 'y':\n                result.year = len === 2 ? '2-digit' : 'numeric';\n                break;\n            case 'Y':\n            case 'u':\n            case 'U':\n            case 'r':\n                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n            // Quarter\n            case 'q':\n            case 'Q':\n                throw new RangeError('`q/Q` (quarter) patterns are not supported');\n            // Month\n            case 'M':\n            case 'L':\n                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n                break;\n            // Week\n            case 'w':\n            case 'W':\n                throw new RangeError('`w/W` (week) patterns are not supported');\n            case 'd':\n                result.day = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'D':\n            case 'F':\n            case 'g':\n                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n            // Weekday\n            case 'E':\n                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n                break;\n            case 'e':\n                if (len < 4) {\n                    throw new RangeError('`e..eee` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            case 'c':\n                if (len < 4) {\n                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            // Period\n            case 'a': // AM, PM\n                result.hour12 = true;\n                break;\n            case 'b': // am, pm, noon, midnight\n            case 'B': // flexible day periods\n                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n            // Hour\n            case 'h':\n                result.hourCycle = 'h12';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'H':\n                result.hourCycle = 'h23';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'K':\n                result.hourCycle = 'h11';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'k':\n                result.hourCycle = 'h24';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'j':\n            case 'J':\n            case 'C':\n                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n            // Minute\n            case 'm':\n                result.minute = ['numeric', '2-digit'][len - 1];\n                break;\n            // Second\n            case 's':\n                result.second = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'S':\n            case 'A':\n                throw new RangeError('`S/A` (second) pattenrs are not supported, use `s` instead');\n            // Zone\n            case 'z': // 1..3, 4: specific non-location format\n                result.timeZoneName = len < 4 ? 'short' : 'long';\n                break;\n            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n            case 'O': // 1, 4: miliseconds in day short, long\n            case 'v': // 1, 4: generic non-location format\n            case 'V': // 1, 2, 3, 4: time zone ID or city\n            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\n                throw new RangeError('`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead');\n        }\n        return '';\n    });\n    return result;\n}\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== 'string') {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        }\n        // @@@+ case\n        else if (g2 === '+') {\n            result.minimumSignificantDigits = g1.length;\n        }\n        // .### case\n        else if (g1[0] === '#') {\n            result.maximumSignificantDigits = g1.length;\n        }\n        // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits =\n                g1.length + (typeof g2 === 'string' ? g2.length : 0);\n        }\n        return '';\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch (str) {\n        case 'sign-auto':\n            return {\n                signDisplay: 'auto',\n            };\n        case 'sign-accounting':\n            return {\n                currencySign: 'accounting',\n            };\n        case 'sign-always':\n            return {\n                signDisplay: 'always',\n            };\n        case 'sign-accounting-always':\n            return {\n                signDisplay: 'always',\n                currencySign: 'accounting',\n            };\n        case 'sign-except-zero':\n            return {\n                signDisplay: 'exceptZero',\n            };\n        case 'sign-accounting-except-zero':\n            return {\n                signDisplay: 'exceptZero',\n                currencySign: 'accounting',\n            };\n        case 'sign-never':\n            return {\n                signDisplay: 'never',\n            };\n    }\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nexport function convertNumberSkeletonToNumberFormatOptions(tokens) {\n    var result = {};\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        switch (token.stem) {\n            case 'percent':\n                result.style = 'percent';\n                continue;\n            case 'currency':\n                result.style = 'currency';\n                result.currency = token.options[0];\n                continue;\n            case 'group-off':\n                result.useGrouping = false;\n                continue;\n            case 'precision-integer':\n            case '.':\n                result.maximumFractionDigits = 0;\n                continue;\n            case 'measure-unit':\n                result.style = 'unit';\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case 'compact-short':\n                result.notation = 'compact';\n                result.compactDisplay = 'short';\n                continue;\n            case 'compact-long':\n                result.notation = 'compact';\n                result.compactDisplay = 'long';\n                continue;\n            case 'scientific':\n                result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'engineering':\n                result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'notation-simple':\n                result.notation = 'standard';\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case 'unit-width-narrow':\n                result.currencyDisplay = 'narrowSymbol';\n                result.unitDisplay = 'narrow';\n                continue;\n            case 'unit-width-short':\n                result.currencyDisplay = 'code';\n                result.unitDisplay = 'short';\n                continue;\n            case 'unit-width-full-name':\n                result.currencyDisplay = 'name';\n                result.unitDisplay = 'long';\n                continue;\n            case 'unit-width-iso-code':\n                result.currencyDisplay = 'symbol';\n                continue;\n        }\n        // Precision\n        // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision\n        // precision-integer case\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            if (token.options.length > 1) {\n                throw new RangeError('Fraction-precision stems only accept a single optional option');\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (match, g1, g2, g3, g4, g5) {\n                // .000* case (before ICU67 it was .000+)\n                if (g2 === '*') {\n                    result.minimumFractionDigits = g1.length;\n                }\n                // .### case\n                else if (g3 && g3[0] === '#') {\n                    result.maximumFractionDigits = g3.length;\n                }\n                // .00## case\n                else if (g4 && g5) {\n                    result.minimumFractionDigits = g4.length;\n                    result.maximumFractionDigits = g4.length + g5.length;\n                }\n                else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits = g1.length;\n                }\n                return '';\n            });\n            if (token.options.length) {\n                result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\n            }\n            continue;\n        }\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = __assign(__assign({}, result), signOpts);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=skeleton.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexport var ReactIntlErrorCode;\n(function (ReactIntlErrorCode) {\n    ReactIntlErrorCode[\"FORMAT_ERROR\"] = \"FORMAT_ERROR\";\n    ReactIntlErrorCode[\"UNSUPPORTED_FORMATTER\"] = \"UNSUPPORTED_FORMATTER\";\n    ReactIntlErrorCode[\"INVALID_CONFIG\"] = \"INVALID_CONFIG\";\n    ReactIntlErrorCode[\"MISSING_DATA\"] = \"MISSING_DATA\";\n    ReactIntlErrorCode[\"MISSING_TRANSLATION\"] = \"MISSING_TRANSLATION\";\n})(ReactIntlErrorCode || (ReactIntlErrorCode = {}));\nvar ReactIntlError = /** @class */ (function (_super) {\n    __extends(ReactIntlError, _super);\n    function ReactIntlError(code, message, exception) {\n        var _this = _super.call(this, \"[React Intl Error \" + code + \"] \" + message + \" \\n\" + (exception ? \"\\n\" + exception.stack : '')) || this;\n        _this.code = code;\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(_this, ReactIntlError);\n        }\n        return _this;\n    }\n    return ReactIntlError;\n}(Error));\nexport { ReactIntlError };\nvar UnsupportedFormatterError = /** @class */ (function (_super) {\n    __extends(UnsupportedFormatterError, _super);\n    function UnsupportedFormatterError(message, exception) {\n        return _super.call(this, \"UNSUPPORTED_FORMATTER\" /* UNSUPPORTED_FORMATTER */, message, exception) || this;\n    }\n    return UnsupportedFormatterError;\n}(ReactIntlError));\nexport { UnsupportedFormatterError };\nvar InvalidConfigError = /** @class */ (function (_super) {\n    __extends(InvalidConfigError, _super);\n    function InvalidConfigError(message, exception) {\n        return _super.call(this, \"INVALID_CONFIG\" /* INVALID_CONFIG */, message, exception) || this;\n    }\n    return InvalidConfigError;\n}(ReactIntlError));\nexport { InvalidConfigError };\nvar MissingDataError = /** @class */ (function (_super) {\n    __extends(MissingDataError, _super);\n    function MissingDataError(message, exception) {\n        return _super.call(this, \"MISSING_DATA\" /* MISSING_DATA */, message, exception) || this;\n    }\n    return MissingDataError;\n}(ReactIntlError));\nexport { MissingDataError };\nvar MessageFormatError = /** @class */ (function (_super) {\n    __extends(MessageFormatError, _super);\n    function MessageFormatError(message, locale, descriptor, exception) {\n        var _this = _super.call(this, \"FORMAT_ERROR\" /* FORMAT_ERROR */, message + \" \\nLocale: \" + locale + \"\\nMessageID: \" + (descriptor === null || descriptor === void 0 ? void 0 : descriptor.id) + \"\\nDefault Message: \" + (descriptor === null || descriptor === void 0 ? void 0 : descriptor.defaultMessage) + \"\\nDescription: \" + (descriptor === null || descriptor === void 0 ? void 0 : descriptor.description) + \" \\n\", exception) || this;\n        _this.descriptor = descriptor;\n        return _this;\n    }\n    return MessageFormatError;\n}(ReactIntlError));\nexport { MessageFormatError };\nvar MissingTranslationError = /** @class */ (function (_super) {\n    __extends(MissingTranslationError, _super);\n    function MissingTranslationError(descriptor, locale) {\n        var _this = _super.call(this, \"MISSING_TRANSLATION\" /* MISSING_TRANSLATION */, \"Missing message: \\\"\" + descriptor.id + \"\\\" for locale \\\"\" + locale + \"\\\", using \" + (descriptor.defaultMessage ? 'default message' : 'id') + \" as fallback.\") || this;\n        _this.descriptor = descriptor;\n        return _this;\n    }\n    return MissingTranslationError;\n}(ReactIntlError));\nexport { MissingTranslationError };\n//# sourceMappingURL=error.js.map","import { convertNumberSkeletonToNumberFormatOptions, isArgumentElement, isDateElement, isDateTimeSkeleton, isLiteralElement, isNumberElement, isNumberSkeleton, isPluralElement, isPoundElement, isSelectElement, isTimeElement, parseDateTimeSkeleton, isTagElement, } from 'intl-messageformat-parser';\nimport { MissingValueError, InvalidValueError, FormatError, InvalidValueTypeError, } from './error';\nexport var PART_TYPE;\n(function (PART_TYPE) {\n    PART_TYPE[PART_TYPE[\"literal\"] = 0] = \"literal\";\n    PART_TYPE[PART_TYPE[\"object\"] = 1] = \"object\";\n})(PART_TYPE || (PART_TYPE = {}));\nfunction mergeLiteral(parts) {\n    if (parts.length < 2) {\n        return parts;\n    }\n    return parts.reduce(function (all, part) {\n        var lastPart = all[all.length - 1];\n        if (!lastPart ||\n            lastPart.type !== 0 /* literal */ ||\n            part.type !== 0 /* literal */) {\n            all.push(part);\n        }\n        else {\n            lastPart.value += part.value;\n        }\n        return all;\n    }, []);\n}\nfunction isFormatXMLElementFn(el) {\n    return typeof el === 'function';\n}\n// TODO(skeleton): add skeleton support\nexport function formatToParts(els, locales, formatters, formats, values, currentPluralValue, \n// For debugging\noriginalMessage) {\n    // Hot path for straight simple msg translations\n    if (els.length === 1 && isLiteralElement(els[0])) {\n        return [\n            {\n                type: 0 /* literal */,\n                value: els[0].value,\n            },\n        ];\n    }\n    var result = [];\n    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n        var el = els_1[_i];\n        // Exit early for string parts.\n        if (isLiteralElement(el)) {\n            result.push({\n                type: 0 /* literal */,\n                value: el.value,\n            });\n            continue;\n        }\n        // TODO: should this part be literal type?\n        // Replace `#` in plural rules with the actual numeric value.\n        if (isPoundElement(el)) {\n            if (typeof currentPluralValue === 'number') {\n                result.push({\n                    type: 0 /* literal */,\n                    value: formatters.getNumberFormat(locales).format(currentPluralValue),\n                });\n            }\n            continue;\n        }\n        var varName = el.value;\n        // Enforce that all required values are provided by the caller.\n        if (!(values && varName in values)) {\n            throw new MissingValueError(varName, originalMessage);\n        }\n        var value = values[varName];\n        if (isArgumentElement(el)) {\n            if (!value || typeof value === 'string' || typeof value === 'number') {\n                value =\n                    typeof value === 'string' || typeof value === 'number'\n                        ? String(value)\n                        : '';\n            }\n            result.push({\n                type: typeof value === 'string' ? 0 /* literal */ : 1 /* object */,\n                value: value,\n            });\n            continue;\n        }\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (isDateElement(el)) {\n            var style = typeof el.style === 'string'\n                ? formats.date[el.style]\n                : isDateTimeSkeleton(el.style)\n                    ? parseDateTimeSkeleton(el.style.pattern)\n                    : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isTimeElement(el)) {\n            var style = typeof el.style === 'string'\n                ? formats.time[el.style]\n                : isDateTimeSkeleton(el.style)\n                    ? parseDateTimeSkeleton(el.style.pattern)\n                    : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isNumberElement(el)) {\n            var style = typeof el.style === 'string'\n                ? formats.number[el.style]\n                : isNumberSkeleton(el.style)\n                    ? convertNumberSkeletonToNumberFormatOptions(el.style.tokens)\n                    : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getNumberFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isTagElement(el)) {\n            var children = el.children, value_1 = el.value;\n            var formatFn = values[value_1];\n            if (!isFormatXMLElementFn(formatFn)) {\n                throw new InvalidValueTypeError(value_1, 'function', originalMessage);\n            }\n            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n            var chunks = formatFn.apply(void 0, parts.map(function (p) { return p.value; }));\n            if (!Array.isArray(chunks)) {\n                chunks = [chunks];\n            }\n            result.push.apply(result, chunks.map(function (c) {\n                return {\n                    type: typeof c === 'string' ? 0 /* literal */ : 1 /* object */,\n                    value: c,\n                };\n            }));\n        }\n        if (isSelectElement(el)) {\n            var opt = el.options[value] || el.options.other;\n            if (!opt) {\n                throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n        if (isPluralElement(el)) {\n            var opt = el.options[\"=\" + value];\n            if (!opt) {\n                if (!Intl.PluralRules) {\n                    throw new FormatError(\"Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-pluralrules\\\"\\n\", \"MISSING_INTL_API\" /* MISSING_INTL_API */, originalMessage);\n                }\n                var rule = formatters\n                    .getPluralRules(locales, { type: el.pluralType })\n                    .select(value - (el.offset || 0));\n                opt = el.options[rule] || el.options.other;\n            }\n            if (!opt) {\n                throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n            continue;\n        }\n    }\n    return mergeLiteral(result);\n}\n//# sourceMappingURL=formatters.js.map","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { parse } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { formatToParts, } from './formatters';\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {\n        all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function (all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, __assign({}, defaultConfig));\n}\nexport function createDefaultFormatters(cache) {\n    if (cache === void 0) { cache = {\n        number: {},\n        dateTime: {},\n        pluralRules: {},\n    }; }\n    return {\n        getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n        getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n        getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules),\n    };\n}\nvar IntlMessageFormat = /** @class */ (function () {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        var _this = this;\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {},\n        };\n        this.format = function (values) {\n            var parts = _this.formatToParts(values);\n            // Hot path for straight simple msg translations\n            if (parts.length === 1) {\n                return parts[0].value;\n            }\n            var result = parts.reduce(function (all, part) {\n                if (!all.length ||\n                    part.type !== 0 /* literal */ ||\n                    typeof all[all.length - 1] !== 'string') {\n                    all.push(part.value);\n                }\n                else {\n                    all[all.length - 1] += part.value;\n                }\n                return all;\n            }, []);\n            if (result.length <= 1) {\n                return result[0] || '';\n            }\n            return result;\n        };\n        this.formatToParts = function (values) {\n            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n        };\n        this.resolvedOptions = function () { return ({\n            locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],\n        }); };\n        this.getAst = function () { return _this.ast; };\n        if (typeof message === 'string') {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n            }\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message, {\n                normalizeHashtagInPlural: false,\n                ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,\n            });\n        }\n        else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError('A message must be provided as a String or AST.');\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        // Defined first because it's used to build the format pattern.\n        this.locales = locales;\n        this.formatters =\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\n    }\n    Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n        get: function () {\n            if (!IntlMessageFormat.memoizedDefaultLocale) {\n                IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n            }\n            return IntlMessageFormat.memoizedDefaultLocale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IntlMessageFormat.memoizedDefaultLocale = null;\n    IntlMessageFormat.__parse = parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            currency: {\n                style: 'currency',\n            },\n            percent: {\n                style: 'percent',\n            },\n        },\n        date: {\n            short: {\n                month: 'numeric',\n                day: 'numeric',\n                year: '2-digit',\n            },\n            medium: {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            long: {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            full: {\n                weekday: 'long',\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n        },\n        time: {\n            short: {\n                hour: 'numeric',\n                minute: 'numeric',\n            },\n            medium: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n            },\n            long: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n            full: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n        },\n    };\n    return IntlMessageFormat;\n}());\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;\n//# sourceMappingURL=core.js.map","/*\nHTML escaping is the same as React's\n(on purpose.) Therefore, it has the following Copyright and Licensing:\n\nCopyright 2013-2014, Facebook, Inc.\nAll rights reserved.\n\nThis source code is licensed under the BSD-style license found in the LICENSE\nfile in the root directory of React's source tree.\n*/\nimport * as React from 'react';\nimport IntlMessageFormat from 'intl-messageformat';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { invariant } from '@formatjs/intl-utils';\nimport { UnsupportedFormatterError } from './error';\nexport function filterProps(props, whitelist, defaults) {\n    if (defaults === void 0) { defaults = {}; }\n    return whitelist.reduce(function (filtered, name) {\n        if (name in props) {\n            filtered[name] = props[name];\n        }\n        else if (name in defaults) {\n            filtered[name] = defaults[name];\n        }\n        return filtered;\n    }, {});\n}\nexport function invariantIntlContext(intl) {\n    invariant(intl, '[React Intl] Could not find required `intl` object. ' +\n        '<IntlProvider> needs to exist in the component ancestry.');\n}\nexport var defaultErrorHandler = function (error) {\n    if (process.env.NODE_ENV !== 'production') {\n        console.error(error);\n    }\n};\nexport var DEFAULT_INTL_CONFIG = {\n    formats: {},\n    messages: {},\n    timeZone: undefined,\n    textComponent: React.Fragment,\n    defaultLocale: 'en',\n    defaultFormats: {},\n    onError: defaultErrorHandler,\n};\nexport function createIntlCache() {\n    return {\n        dateTime: {},\n        number: {},\n        message: {},\n        relativeTime: {},\n        pluralRules: {},\n        list: {},\n        displayNames: {},\n    };\n}\n/**\n * Create intl formatters and populate cache\n * @param cache explicit cache to prevent leaking memory\n */\nexport function createFormatters(cache) {\n    if (cache === void 0) { cache = createIntlCache(); }\n    var RelativeTimeFormat = Intl.RelativeTimeFormat;\n    var ListFormat = Intl.ListFormat;\n    var DisplayNames = Intl.DisplayNames;\n    return {\n        getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n        getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n        getMessageFormat: memoizeIntlConstructor(IntlMessageFormat, cache.message),\n        getRelativeTimeFormat: memoizeIntlConstructor(RelativeTimeFormat, cache.relativeTime),\n        getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules),\n        getListFormat: memoizeIntlConstructor(ListFormat, cache.list),\n        getDisplayNames: memoizeIntlConstructor(DisplayNames, cache.displayNames),\n    };\n}\nexport function getNamedFormat(formats, type, name, onError) {\n    var formatType = formats && formats[type];\n    var format;\n    if (formatType) {\n        format = formatType[name];\n    }\n    if (format) {\n        return format;\n    }\n    onError(new UnsupportedFormatterError(\"No \" + type + \" format named: \" + name));\n}\n//# sourceMappingURL=utils.js.map","export function invariant(condition, message, Err) {\n    if (Err === void 0) { Err = Error; }\n    if (!condition) {\n        throw new Err(message);\n    }\n}\n//# sourceMappingURL=invariant.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as hoistNonReactStatics_ from 'hoist-non-react-statics';\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nvar hoistNonReactStatics = hoistNonReactStatics_.default || hoistNonReactStatics_;\nimport { invariantIntlContext } from '../utils';\nfunction getDisplayName(Component) {\n    return Component.displayName || Component.name || 'Component';\n}\n// TODO: We should provide initial value here\nvar IntlContext = React.createContext(null);\nvar IntlConsumer = IntlContext.Consumer, IntlProvider = IntlContext.Provider;\nexport var Provider = IntlProvider;\nexport var Context = IntlContext;\nexport default function injectIntl(WrappedComponent, options) {\n    var _a = options || {}, _b = _a.intlPropName, intlPropName = _b === void 0 ? 'intl' : _b, _c = _a.forwardRef, forwardRef = _c === void 0 ? false : _c, _d = _a.enforceContext, enforceContext = _d === void 0 ? true : _d;\n    var WithIntl = function (props) { return (React.createElement(IntlConsumer, null, function (intl) {\n        var _a;\n        if (enforceContext) {\n            invariantIntlContext(intl);\n        }\n        var intlProp = (_a = {}, _a[intlPropName] = intl, _a);\n        return (React.createElement(WrappedComponent, __assign({}, props, intlProp, { ref: forwardRef ? props.forwardedRef : null })));\n    })); };\n    WithIntl.displayName = \"injectIntl(\" + getDisplayName(WrappedComponent) + \")\";\n    WithIntl.WrappedComponent = WrappedComponent;\n    if (forwardRef) {\n        return hoistNonReactStatics(React.forwardRef(function (props, ref) { return (React.createElement(WithIntl, __assign({}, props, { forwardedRef: ref }))); }), WrappedComponent);\n    }\n    return hoistNonReactStatics(WithIntl, WrappedComponent);\n}\n//# sourceMappingURL=injectIntl.js.map","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n//# sourceMappingURL=useIntl.js.map"],"sourceRoot":""}