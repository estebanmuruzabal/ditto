{"version":3,"sources":["components/Select/Select.tsx","containers/Orders/Orders.style.tsx","containers/Orders/ActionWrapper.tsx","containers/Orders/Orders.tsx"],"names":["getContainerFontStyle","$theme","typography","fontBold14","props","overrides","SelectArrow","Popover","Body","style","zIndex","Placeholder","color","colors","textDark","SingleValue","lineHeight","DropdownListItem","fontSize","fontWeight","OptionContent","$selected","textNormal","DropdownOption","TableWrapper","styled","width","height","StyledTable","withStyle","BaseStyledTable","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","alignContent","StyledHeadCell","BaseStyledHeadCell","fontFamily","alignItems","boxShadow","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","alignSelf","StyledCell","BaseStyledCell","borderBottom","justifyContent","Icon","icon","Component","AllIcons","hasOwnProperty","ActionWrapper","itemData","itemsOffset","dispatch","useDrawerDispatch","openDrawer","React","useCallback","type","drawerComponent","data","onClick","marginRight","cursor","GET_ORDERS","gql","themedUseStyletron","createThemedUseStyletron","Status","display","textTransform","content","backgroundColor","borders","borderE6","Col","Column","marginBottom","Row","Rows","prevButtonDisabledStyles","nextButtonDisabledStyles","marginLeft","statusSelectOptions","value","label","Orders","useCss","theme","sent","primary","failed","red400","processing","paid","blue400","useState","status","setStatus","search","setSearch","offset","setOffset","useQuery","error","refetch","message","handlePreviousDisabled","orders","totalCount","handleNextDisabled","hasMore","fluid","md","xs","Select","options","labelKey","valueKey","placeholder","searchable","onChange","length","Input","event","currentTarget","searchText","clearable","$gridTemplateColumns","items","map","item","index","Fragment","key","className","toLowerCase","customer_name","contact_number","delivery_address","delivery_method_name","payment_method","payment_status","delivery_pickup_date","total","order_products","product","i","quantity","recicledQuantity","name","price","NoResult","hideButton","gridColumnStart","gridColumnEnd","textAlign","marginTop","Button","disabled"],"mappings":"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","file":"static/js/25.280184f8.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Select } from 'baseui/select';\nimport { CaretDownIcon } from '../../assets/icons/CaretDownIcon';\n\nexport const getContainerFontStyle = ({ $theme }) => {\n  return $theme.typography.fontBold14;\n};\n\nexport default ({ ...props }) => {\n  return (\n    <Select\n      overrides={{\n        SelectArrow: () => {\n          return <CaretDownIcon />;\n        },\n        Popover: {\n          props: {\n            overrides: {\n              Body: {\n                style: { zIndex: 1 },\n              },\n            },\n          },\n        },\n        Placeholder: {\n          style: ({ $theme }) => ({\n            color: $theme.colors.textDark,\n            ...getContainerFontStyle({ $theme }),\n          }),\n        },\n        SingleValue: {\n          style: ({ $theme }) => ({\n            ...getContainerFontStyle({ $theme }),\n            color: $theme.colors.textDark,\n            lineHeight: '1.5',\n          }),\n        },\n        DropdownListItem: {\n          style: ({ $theme }) => ({\n            fontSize: '14px',\n            fontWeight: '700',\n            color: $theme.colors.textDark,\n          }),\n        },\n        OptionContent: {\n          style: ({ $theme, $selected }) => {\n            return {\n              ...$theme.typography.fontBold14,\n              color: $selected\n                ? $theme.colors.textDark\n                : $theme.colors.textNormal,\n            };\n          },\n        },\n        DropdownOption: {\n          style: ({ $theme }) => ({\n            fontSize: '14px',\n            fontWeight: '700',\n            color: $theme.colors.textDark,\n          }),\n        },\n      }}\n      {...props}\n    />\n  );\n};\n","import { styled, withStyle } from 'baseui';\nimport {\n  StyledTable as BaseStyledTable,\n  StyledHeadCell as BaseStyledHeadCell,\n  StyledBodyCell as BaseStyledCell,\n} from 'baseui/table-grid';\n\nexport const TableWrapper = styled('div', () => ({\n  width: '100%',\n  height: '1175px',\n}));\n\nexport const StyledTable = withStyle(BaseStyledTable, () => ({\n  borderTopLeftRadius: '0 !important',\n  borderTopRightRadius: '0 !important',\n  borderBottomLeftRadius: '0 !important',\n  borderBottomRightRadius: '0 !important',\n  alignContent: 'start',\n}));\n\nexport const StyledHeadCell = withStyle(BaseStyledHeadCell, () => ({\n  fontFamily: \"'Lato', sans-serif\",\n  fontWeight: 700,\n  color: '#161F6A !important',\n  alignItems: 'center',\n  boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',\n  borderTopColor: 'rgba(0, 0, 0, 0.12)',\n  borderRightColor: 'rgba(0, 0, 0, 0.12)',\n  borderBottomColor: 'rgba(0, 0, 0, 0.12)',\n  borderLeftColor: 'rgba(0, 0, 0, 0.12)',\n  alignSelf: 'start',\n  height: '50px'\n}));\n\nexport const StyledCell = withStyle(BaseStyledCell, () => ({\n  fontFamily: \"'Lato', sans-serif\",\n  fontWeight: 400,\n  color: '#161F6A !important',\n  alignSelf: 'center',\n  borderBottom: '1px solid #ccc',\n  height: '100%',\n}));\n\nexport const StyledHeadCellCenter = withStyle(BaseStyledHeadCell, () => ({\n  fontFamily: \"'Lato', sans-serif\",\n  fontWeight: 700,\n  color: '#161F6A !important',\n  alignItems: 'center',\n  boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',\n  borderTopColor: 'rgba(0, 0, 0, 0.12)',\n  borderRightColor: 'rgba(0, 0, 0, 0.12)',\n  borderBottomColor: 'rgba(0, 0, 0, 0.12)',\n  borderLeftColor: 'rgba(0, 0, 0, 0.12)',\n  alignSelf: 'start',\n  justifyContent: 'center',\n}));\n\nexport const StyledCellCenter = withStyle(BaseStyledCell, () => ({\n  fontFamily: \"'Lato', sans-serif\",\n  fontWeight: 400,\n  color: '#161F6A !important',\n  alignSelf: 'center',\n  justifyContent: 'center',\n}));\n","import React from 'react';\nimport {useDrawerDispatch} from '../../context/DrawerContext';\nimport {\n    IconWrapper,\n    ActionStyle,\n} from '../Types/Types.style';\nimport {AllIcons} from \"../../assets/icons/all-icons\";\nimport gql from 'graphql-tag';\nimport {useMutation} from \"@apollo/react-hooks\";\n\n\ntype Props = {\n    itemData: any;\n    itemsOffset: number;\n};\n\nconst Icon = ({icon, width = '18px', height = '18px'}) => {\n    let Component = AllIcons.hasOwnProperty(icon) ? AllIcons[icon] : 'span';\n    return <Component width={width} height={height}/>;\n}\n\nconst ActionWrapper: React.FC<Props> =\n    ({\n         itemData,\n        itemsOffset,\n         ...props\n     }) => {\n        const dispatch = useDrawerDispatch();\n        const openDrawer = React.useCallback(\n            () => {\n                dispatch({\n                    type: 'OPEN_DRAWER',\n                    drawerComponent: 'ORDER_STATUS_UPDATE_FORM',\n                    data: itemData,\n                })\n            },\n            [dispatch, itemData]\n        );\n        \n\n\n        return (\n            <div>\n                <ActionStyle>\n                    <IconWrapper onClick={openDrawer} style={{marginRight: '0px', cursor: 'pointer'}}>\n                        <Icon icon=\"ArrowNext\"/>\n                    </IconWrapper>\n                </ActionStyle>\n                {/*<ActionStyle>\n                    <IconWrapper onClick={} style={{color: '#c50707', cursor: 'pointer'}}>\n                        <Icon width=\"15px\" height=\"15px\" icon=\"CloseIcon\"/>\n                    </IconWrapper>\n                </ActionStyle>*/}\n            </div>\n        );\n    };\n\nexport default ActionWrapper;\n","import React, {useState} from 'react';\nimport {styled, withStyle, createThemedUseStyletron} from 'baseui';\nimport dayjs from 'dayjs';\nimport {\n    Grid,\n    Row as Rows,\n    Col as Column,\n} from '../../components/FlexBox/FlexBox';\nimport Select from '../../components/Select/Select';\nimport Input from '../../components/Input/Input';\n\nimport gql from 'graphql-tag';\nimport {useQuery} from '@apollo/react-hooks';\nimport {Wrapper, Header, Heading} from '../../components/WrapperStyle';\n\nimport {\n    TableWrapper,\n    StyledTable,\n    StyledHeadCell,\n    StyledCell,\n} from './Orders.style';\nimport NoResult from '../../components/NoResult/NoResult';\nimport Button from \"../../components/Button/Button\";\nimport ActionWrapper from \"../Orders/ActionWrapper\";\nimport {StyledBodyCell} from \"../Types/Types.style\";\n// import { useIntl } from 'react-intl';\n\nconst GET_ORDERS = gql`\n    query GetOrders(\n        $status: String,\n        $searchText: String\n        $offset: Int\n    ) {\n        orders(\n            status: $status,\n            searchText: $searchText,\n            offset: $offset,\n        ) {\n            items {\n                id\n                order_code\n                customer_id\n                contact_number\n                datetime\n                customer_name\n                delivery_method_name\n                delivery_pickup_date\n                delivery_address\n                payment_method\n                payment_status\n                order_products {\n                    product_id\n                    image\n                    quantity\n                    recicledQuantity\n                    unit\n                    name\n                    price\n                }\n                status\n                coupon_code\n                discount_amount\n                sub_total\n                total\n                delivery_method_id\n                order_tracking {\n                    status\n                    ordering\n                    is_current\n                    step_competed\n                }\n            }\n            totalCount\n            hasMore\n        }\n    }\n`;\n\ntype CustomThemeT = { red400: string; textNormal: string; colors: any };\nconst themedUseStyletron = createThemedUseStyletron<CustomThemeT>();\n\nconst Status = styled('div', ({$theme}) => ({\n    ...$theme.typography.fontBold14,\n    color: $theme.colors.textDark,\n    display: 'flex',\n    alignItems: 'center',\n    lineHeight: '1',\n    textTransform: 'capitalize',\n    ':before': {\n        content: '\"\"',\n        width: '10px',\n        height: '10px',\n        display: 'inline-block',\n        borderTopLeftRadius: '10px',\n        borderTopRightRadius: '10px',\n        borderBottomRightRadius: '10px',\n        borderBottomLeftRadius: '10px', \n        backgroundColor: $theme.borders.borderE6,\n        marginRight: '10px',\n    },\n}));\n\nconst Col = withStyle(Column, () => ({\n    '@media only screen and (max-width: 767px)': {\n        marginBottom: '20px',\n\n        ':last-child': {\n            marginBottom: 0,\n        },\n    },\n}));\n\nconst Row = withStyle(Rows, () => ({\n    '@media only screen and (min-width: 768px)': {\n        alignItems: 'center',\n    },\n}));\n\nconst prevButtonDisabledStyles = {\n    width: '90px',\n    marginRight: '10px',\n    color: '#6f6f6f',\n    backgroundColor: '#d8d8d8'\n};\nconst nextButtonDisabledStyles = {\n    width: '90px',\n    marginLeft: '10px',\n    color: '#6f6f6f',\n    backgroundColor: '#d8d8d8'\n};\n\nconst statusSelectOptions = [\n    {value: 'Pendiente', label: 'Pendiente'},\n    {value: 'Recibido', label: 'Recibido'},\n    {value: 'Procesando', label: 'Procesando'},\n    {value: 'EnTransito', label: 'EnTransito'},\n    {value: 'Entregado', label: 'Entregado'},\n    {value: 'Cancelado', label: 'Cancelado'},\n    {value: 'Fallado', label: 'Fallado'},\n];\n\nexport default function Orders() {\n    \n    const [useCss, theme] = themedUseStyletron();\n    const sent = useCss({\n        ':before': {\n            content: '\"\"',\n            backgroundColor: theme.colors.primary,\n        },\n    });\n    const failed = useCss({\n        ':before': {\n            content: '\"\"',\n            backgroundColor: theme.colors.red400,\n        },\n    });\n    const processing = useCss({\n        ':before': {\n            content: '\"\"',\n            backgroundColor: theme.colors.textNormal,\n        },\n    });\n    const paid = useCss({\n        ':before': {\n            content: '\"\"',\n            backgroundColor: theme.colors.blue400,\n        },\n    });\n\n    const [status, setStatus] = useState([]);\n    const [search, setSearch] = useState([]);\n    const [offset, setOffset] = useState(0);\n\n    const {data, error, refetch} = useQuery(GET_ORDERS);\n\n    if (error) {\n        return <div>Error! {error.message}</div>;\n    }\n\n    function handleStatus({value}) {\n        setStatus(value);\n        if (value.length) {\n            refetch({\n                status: value[0].value,\n            });\n        } else {\n            refetch({status: null});\n        }\n    }\n\n    function handleSearch(event) {\n        const {value} = event.currentTarget;\n        setSearch(value);\n        refetch({searchText: value});\n    }\n\n    function handlePrevious() {\n        setOffset(offset-12);\n        refetch({\n            offset: offset - 12,\n        });\n    }\n\n    function handlePreviousDisabled(data) {\n        const result = (data ? data.orders.totalCount === 0 : false) || offset === 0;\n        return result;\n    }\n\n    function handleNext() {\n        setOffset(offset+12);\n        refetch({\n            offset: offset + 12,\n        });\n    }\n\n    function handleNextDisabled(data) {\n        const result = data ? !data.orders.hasMore : true;\n        return result;\n    }\n\n    return (\n        <Grid fluid={true}>\n            <Row>\n                <Col md={12}>\n                    <Header\n                        style={{\n                            marginBottom: 30,\n                            boxShadow: '0 0 8px rgba(0, 0 ,0, 0.1)',\n                        }}\n                    >\n                        <Col md={3} xs={12}>\n                            <Heading>Orders</Heading>\n                        </Col>\n\n                        <Col md={9} xs={12}>\n                            <Row>\n                                <Col md={3} xs={12}>\n                                    <Select\n                                        options={statusSelectOptions}\n                                        labelKey=\"label\"\n                                        valueKey=\"value\"\n                                        placeholder=\"Status\"\n                                        value={status}\n                                        searchable={false}\n                                        onChange={handleStatus}\n                                    />\n                                </Col>\n\n                                <Col md={6} xs={12}>\n                                    <Input\n                                        value={search}\n                                        placeholder=\"Ex: Search By Address\"\n                                        onChange={handleSearch}\n                                        clearable\n                                    />\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Header>\n\n                    <Wrapper style={{boxShadow: '0 0 5px rgba(0, 0 , 0, 0.05)'}}>\n                        <TableWrapper>\n                            <StyledTable\n                                // $gridTemplateColumns=\"minmax(100px, auto) minmax(150px, auto) minmax(200px, auto) minmax(200px, auto) minmax(200px, auto) minmax(150px, auto) minmax(150px, auto) minmax(150px, auto) minmax(150px, auto) minmax(150px, auto) minmax(150px, auto) minmax(150px, auto) minmax(150px, auto) minmax(150px, auto)\">\n                                $gridTemplateColumns=\"minmax(100px, auto) minmax(100px, auto) minmax(120px, auto) minmax(130px, auto) minmax(100px, auto) minmax(110px, auto) minmax(100px, auto) minmax(110px, auto) minmax(65px, auto) minmax(300px, auto)\">\n                                <StyledHeadCell>Status</StyledHeadCell>\n                                <StyledHeadCell>Customer</StyledHeadCell>\n                                <StyledHeadCell>Phone Num</StyledHeadCell>\n                                <StyledHeadCell>Deli/Pickup Address</StyledHeadCell>\n                                <StyledHeadCell>Delivery Method</StyledHeadCell>\n                                <StyledHeadCell>Payment Method</StyledHeadCell>\n                                <StyledHeadCell>Payment Status</StyledHeadCell>\n                                <StyledHeadCell>Deli/Pickup Date</StyledHeadCell>\n                                <StyledHeadCell>Total</StyledHeadCell>\n                                <StyledHeadCell>Productos comprados</StyledHeadCell>\n\n                                {data ? (\n                                    data.orders.items.length ? (\n                                        data.orders.items.map((item: any, index: number) => {\n\n                                            return (\n                                                <React.Fragment key={index + 1}>\n                                                    <StyledCell style={{justifyContent: 'center'}}>\n                                                        <Status\n                                                            className={\n                                                                item.status.toLowerCase() === 'delivered'\n                                                                    ? sent\n                                                                    : item.status.toLowerCase() === 'pending'\n                                                                    ? paid\n                                                                    : item.status.toLowerCase() === 'processing'\n                                                                        ? processing\n                                                                        : item.status.toLowerCase() === 'failed'\n                                                                            ? failed\n                                                                            : ''\n                                                            }\n                                                        >\n                                                            <ActionWrapper itemsOffset={offset} itemData={item}/>\n                                                            {item.status}\n                                                        </Status>\n                                                    </StyledCell>\n                                                    <StyledCell>{item.customer_name}</StyledCell>\n                                                    <StyledCell>{item.contact_number}</StyledCell>\n                                                    <StyledCell>{item.delivery_address}</StyledCell>\n                                                    <StyledCell>\n                                                        {item.delivery_method_name}\n                                                    </StyledCell>\n                                                    <StyledCell>{item.payment_method}</StyledCell>\n                                                    <StyledCell>{item.payment_status}</StyledCell>\n                                                    <StyledCell>{item.delivery_pickup_date}</StyledCell>\n                                                    <StyledCell>${item.total}</StyledCell>\n                                                    <StyledCell>{item.order_products.map((product, i: number) => (<div key={'item' + i}>{product.quantity + product.recicledQuantity} - {product.name} - ${product.price}</div>))}</StyledCell>\n                                                    \n                                                </React.Fragment>\n                                            );\n                                        })\n                                    ) : (\n                                        <NoResult\n                                            hideButton={false}\n                                            style={{\n                                                gridColumnStart: '1',\n                                                gridColumnEnd: 'one',\n                                            }}\n                                        />\n                                    )\n                                ) : null}\n                            </StyledTable>\n                        </TableWrapper>\n                    </Wrapper>\n\n                    <Row>\n                        <Col md={8}>\n                        </Col>\n                        <Col md={4}\n                             style={{ display: 'block', textAlign: 'right', marginTop: '20px' }}\n                        >\n                            <Button\n                                style={ handlePreviousDisabled(data) ? prevButtonDisabledStyles : {marginRight: '10px'}}\n                                disabled={handlePreviousDisabled(data)}\n                                onClick={handlePrevious}>\n                                Previous\n                            </Button>\n                            <Button\n                                style={ handleNextDisabled(data) ? nextButtonDisabledStyles : null}\n                                disabled={handleNextDisabled(data)}\n                                onClick={handleNext}>\n                                Next\n                            </Button>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Grid>\n    );\n}\n"],"sourceRoot":""}