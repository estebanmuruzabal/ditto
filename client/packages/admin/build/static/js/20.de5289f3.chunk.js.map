{"version":3,"sources":["components/Button/Button.tsx","components/Button/Button.style.tsx","components/Input/Input.tsx","components/FormFields/FormFields.tsx","helpers/images-path.ts","containers/Login/Login.style.tsx","containers/Login/Login.tsx"],"names":["Button","children","overrides","props","BaseButton","style","$theme","$size","$shape","SIZE","compact","large","paddingLeft","sizing","scale25","paddingRight","getPaddingStyles","value","buttonBorderRadius","SHAPE","pill","round","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","getBorderRadiiStyles","Input","color","colors","textDark","typography","fontBold14","getInputFontStyle","Title","styled","font18","marginTop","marginBottom","textAlign","Label","Msg","fontBold12","red400","marginLeft","FormFields","Block","width","display","flexDirection","margin","FormLabel","FormTitle","Error","ADMIN_IMAGE_HOST","process","NEXT_PUBLIC_APP_IMAGE_URL","Wrapper","height","alignItems","justifyContent","backgroundColor","borderF1","FormWrapper","borderRadius","padding","LogoWrapper","LogoImage","backfaceVisibility","maxWidth","initialValues","phone","password","GET_SETTING","gql","getLoginValidationSchema","Yup","shape","required","MyInput","field","form","useQuery","data","error","refetch","useState","siteSettingData","setSiteSettingData","React","useEffect","JSON","parse","getSiteSetting","fav","document","getElementById","href","favicon","history","useHistory","location","useLocation","useContext","AuthContext","authenticate","isAuthenticated","signinErrors","to","pathname","from","state","onSubmit","replace","render","errors","status","touched","isSubmitting","src","image","alt","site_title","type","name","component","placeholder","disabled","length","validationSchema"],"mappings":"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","file":"static/js/20.de5289f3.chunk.js","sourcesContent":["import React from 'react';\nimport { Button as BaseButton, SIZE, SHAPE, KIND } from 'baseui/button';\nimport { getPaddingStyles, getBorderRadiiStyles } from './Button.style';\n\nconst Button = ({ children, overrides, ...props }: any) => {\n  return (\n    <BaseButton\n      {...props}\n      overrides={{\n        BaseButton: {\n          style: ({ $theme, $size, $shape }) => {\n            return {\n              ...getPaddingStyles({ $theme, $size }),\n              ...getBorderRadiiStyles({ $theme, $size, $shape }),\n            };\n          },\n        },\n        ...overrides,\n      }}\n    >\n      {children}\n    </BaseButton>\n  );\n};\n\nexport { SIZE, SHAPE, KIND };\nexport default Button;\n","import { SIZE, SHAPE } from 'baseui/button';\n\nexport const getPaddingStyles = ({ $theme, $size }) => {\n  switch ($size) {\n    case SIZE.compact:\n      return {\n        paddingLeft: $theme.sizing.scale25,\n        paddingRight: $theme.sizing.scale25,\n      };\n    case SIZE.large:\n      return {\n        paddingLeft: $theme.sizing.scale25,\n        paddingRight: $theme.sizing.scale25,\n      };\n    default:\n      return {\n        paddingLeft: $theme.sizing.scale25,\n        paddingRight: $theme.sizing.scale25,\n      };\n  }\n};\n\nexport const getBorderRadiiStyles = ({ $theme, $size, $shape }) => {\n  let value = $theme.buttonBorderRadius;\n\n  if ($shape === SHAPE.pill) {\n    if ($size === SIZE.compact) {\n      value = '30px';\n    } else if ($size === SIZE.large) {\n      value = '42px';\n    } else {\n      value = '38px';\n    }\n  } else if ($shape === SHAPE.round) {\n    value = '50%';\n  }\n\n  return {\n    borderTopRightRadius: value,\n    borderBottomRightRadius: value,\n    borderTopLeftRadius: value,\n    borderBottomLeftRadius: value,\n  };\n};\n","import React from 'react';\nimport { Input as BaseInput, SIZE } from 'baseui/input';\n\nconst getInputFontStyle = ({ $theme }) => {\n  return {\n    color: $theme.colors.textDark,\n    ...$theme.typography.fontBold14,\n  };\n};\n\nconst Input = ({ ...props }) => {\n  return (\n    <BaseInput\n      overrides={{\n        Input: {\n          style: ({ $theme }) => {\n            return {\n              ...getInputFontStyle({ $theme }),\n            };\n          },\n        },\n      }}\n      {...props}\n    />\n  );\n};\n\nexport { SIZE };\nexport default Input;\n","import React from \"react\";\nimport { Block } from \"baseui/block\";\nimport { styled } from \"baseui\";\n\nconst Title = styled(\"h3\", ({ $theme }) => ({\n  ...$theme.typography.font18,\n  marginTop: \"0\",\n  marginBottom: \"0\",\n  color: $theme.colors.textDark,\n  textAlign: \"center\"\n}));\n\nconst Label = styled(\"label\", ({ $theme }) => ({\n  ...$theme.typography.fontBold14,\n  marginBottom: \"10px\",\n  color: $theme.colors.textDark\n}));\n\nconst Msg = styled(\"span\", ({ $theme }) => ({\n  ...$theme.typography.fontBold12,\n  color: $theme.colors.red400,\n  marginTop: \"5px\",\n  marginLeft: \"auto\"\n}));\n\nexport const FormFields = ({ children }) => {\n  return (\n    <Block\n      overrides={{\n        Block: {\n          style: {\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            margin: \"20px 0\",\n\n            \":first-child\": {\n              marginTop: 0\n            },\n\n            \":last-child\": {\n              marginBottom: 0\n            },\n\n            \":only-child\": {\n              margin: 0\n            }\n          }\n        }\n      }}\n    >\n      {children}\n    </Block>\n  );\n};\n\nexport const FormLabel = ({ children }) => {\n  return <Label>{children}</Label>;\n};\n\nexport const FormTitle = ({ children }) => {\n  return <Title>{children}</Title>;\n};\n\nexport const Error = ({ children }) => {\n  return <Msg>{children}</Msg>;\n};\n","export const ADMIN_IMAGE_HOST = process.env.REACT_APP_IMAGE_URL;\nexport const SHOP_IMAGE_HOST = process.env.NEXT_PUBLIC_APP_IMAGE_URL;\n","import { styled } from \"baseui\";\n\nexport const Wrapper = styled(\"div\", ({ $theme }) => ({\n  width: \"100vw\",\n  height: \"100vh\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  backgroundColor: $theme.colors.borderF1,\n\n  \"@media only screen and (max-width: 520px)\": {\n    backgroundColor: \"#fff\"\n  }\n}));\n\nexport const FormWrapper = styled(\"div\", () => ({\n  width: \"470px\",\n  borderRadius: \"3px\",\n  backgroundColor: \"#ffffff\",\n  padding: \"50px\",\n  display: \"flex\",\n  flexDirection: \"column\",\n\n  \"@media only screen and (max-width: 500px)\": {\n    width: \"100%\",\n    padding: \"30px\"\n  }\n}));\n\nexport const LogoWrapper = styled(\"div\", () => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  marginBottom: \"20px\"\n}));\n\nexport const LogoImage = styled(\"img\", () => ({\n  display: \"block\",\n  backfaceVisibility: \"hidden\",\n  maxWidth: \"150px\"\n}));\n","import React, {useContext, useState} from 'react';\nimport { Redirect, useHistory, useLocation } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { AuthContext } from '../../context/auth';\nimport {\n  FormFields,\n  FormLabel,\n  FormTitle,\n  Error,\n} from '../../components/FormFields/FormFields';\nimport { Wrapper, FormWrapper, LogoImage, LogoWrapper } from './Login.style';\nimport Input from '../../components/Input/Input';\nimport Button from '../../components/Button/Button';\nimport Logoimage from '../../assets/image/PickBazar.png';\nimport {gql} from \"apollo-boost\";\nimport {useQuery} from \"@apollo/react-hooks\";\nimport {ADMIN_IMAGE_HOST} from \"../../helpers/images-path\";\n\nconst initialValues = {\n  phone: '543624951926',\n  password: '123456',\n};\nconst GET_SETTING = gql`\n    query GetSetting {\n        getSiteSetting(key: \"site-settings\") {\n            id\n            key\n            value\n        }\n    }\n`;\nfunction getFaviconEl() {\n    return document.getElementById(\"favicon\") as HTMLAnchorElement;\n}\n\nconst getLoginValidationSchema = () => {\n  return Yup.object().shape({\n      phone: Yup.string().required('Phone Number is Required!'),\n    password: Yup.string().required('Password is Required!'),\n  });\n};\n\nconst MyInput = ({ field, form, ...props }) => {\n  return <Input {...field} {...props} />;\n};\n\nexport default () => {\n\n    const {data, error, refetch} = useQuery(GET_SETTING)\n    const [siteSettingData, setSiteSettingData] = useState<any | null>(null);\n\n    React.useEffect(() => {\n        if (data) {\n            setSiteSettingData(JSON.parse(data.getSiteSetting.value))\n        }\n    }, [data])\n\n    let fav = getFaviconEl();\n    if (siteSettingData) {\n        fav.href = ADMIN_IMAGE_HOST+siteSettingData.favicon;\n    }\n\n  let history = useHistory();\n  let location = useLocation();\n  const { authenticate, isAuthenticated, error: signinErrors } = useContext(AuthContext);\n  if (isAuthenticated) return <Redirect to={{ pathname: '/' }} />;\n\n  let { from } = (location.state as any) || { from: { pathname: '/' } };\n  let login = ({ phone, password }) => {\n    authenticate({ phone, password }, () => {\n      history.replace(from);\n    });\n  };\n\n  return (\n    <Wrapper>\n      <FormWrapper>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={login}\n          render={({ errors, status, touched, isSubmitting }) => (\n            <Form>\n              <FormFields>\n                <LogoWrapper>\n                  <LogoImage src={siteSettingData ? ADMIN_IMAGE_HOST+siteSettingData.image : ''} alt={siteSettingData ? siteSettingData.site_title : ''} />\n                </LogoWrapper>\n                <FormTitle>Log in to admin</FormTitle>\n              </FormFields>\n\n              <FormFields>\n                <FormLabel>Email</FormLabel>\n                <Field\n                  type='text'\n                  name='phone'\n                  component={MyInput}\n                  placeholder='Ex: demo@demo.com'\n                />\n                {errors.phone && touched.phone && (\n                  <Error>{errors.phone}</Error>\n                )}\n              </FormFields>\n              <FormFields>\n                <FormLabel>Password</FormLabel>\n                <Field\n                  type='password'\n                  name='password'\n                  component={MyInput}\n                  placeholder='Ex: demo'\n                />\n                {errors.password && touched.password && (\n                  <Error>{errors.password}</Error>\n                )}\n              </FormFields>\n              <Button\n                type='submit'\n                disabled={isSubmitting}\n                overrides={{\n                  BaseButton: {\n                    style: ({ $theme }) => ({\n                      width: '100%',\n                      marginLeft: 'auto',\n                      borderTopLeftRadius: '3px',\n                      borderTopRightRadius: '3px',\n                      borderBottomLeftRadius: '3px',\n                      borderBottomRightRadius: '3px',\n                    }),\n                  },\n                }}\n              >\n                Submit\n              </Button>\n              {typeof signinErrors === 'string' && signinErrors?.length && (\n                <Error>{signinErrors}</Error>\n              )}\n            </Form>\n          )}\n          validationSchema={getLoginValidationSchema}\n        />\n      </FormWrapper>\n    </Wrapper>\n  );\n};\n"],"sourceRoot":""}